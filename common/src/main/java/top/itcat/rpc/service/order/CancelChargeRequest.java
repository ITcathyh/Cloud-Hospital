/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package top.itcat.rpc.service.order;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2019-7-3")
public class CancelChargeRequest implements org.apache.thrift.TBase<CancelChargeRequest, CancelChargeRequest._Fields>, java.io.Serializable, Cloneable, Comparable<CancelChargeRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CancelChargeRequest");

  private static final org.apache.thrift.protocol.TField OPERATOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("operatorId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField CHARGE_ITEM_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("chargeItemIds", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CancelChargeRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CancelChargeRequestTupleSchemeFactory());
  }

  public long operatorId; // required
  public List<Long> chargeItemIds; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    OPERATOR_ID((short)1, "operatorId"),
    CHARGE_ITEM_IDS((short)2, "chargeItemIds");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OPERATOR_ID
          return OPERATOR_ID;
        case 2: // CHARGE_ITEM_IDS
          return CHARGE_ITEM_IDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __OPERATORID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OPERATOR_ID, new org.apache.thrift.meta_data.FieldMetaData("operatorId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CHARGE_ITEM_IDS, new org.apache.thrift.meta_data.FieldMetaData("chargeItemIds", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CancelChargeRequest.class, metaDataMap);
  }

  public CancelChargeRequest() {
  }

  public CancelChargeRequest(
    long operatorId,
    List<Long> chargeItemIds)
  {
    this();
    this.operatorId = operatorId;
    setOperatorIdIsSet(true);
    this.chargeItemIds = chargeItemIds;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CancelChargeRequest(CancelChargeRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    this.operatorId = other.operatorId;
    if (other.isSetChargeItemIds()) {
      List<Long> __this__chargeItemIds = new ArrayList<Long>(other.chargeItemIds);
      this.chargeItemIds = __this__chargeItemIds;
    }
  }

  public CancelChargeRequest deepCopy() {
    return new CancelChargeRequest(this);
  }

  @Override
  public void clear() {
    setOperatorIdIsSet(false);
    this.operatorId = 0;
    this.chargeItemIds = null;
  }

  public long getOperatorId() {
    return this.operatorId;
  }

  public CancelChargeRequest setOperatorId(long operatorId) {
    this.operatorId = operatorId;
    setOperatorIdIsSet(true);
    return this;
  }

  public void unsetOperatorId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPERATORID_ISSET_ID);
  }

  /** Returns true if field operatorId is set (has been assigned a value) and false otherwise */
  public boolean isSetOperatorId() {
    return EncodingUtils.testBit(__isset_bitfield, __OPERATORID_ISSET_ID);
  }

  public void setOperatorIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPERATORID_ISSET_ID, value);
  }

  public int getChargeItemIdsSize() {
    return (this.chargeItemIds == null) ? 0 : this.chargeItemIds.size();
  }

  public java.util.Iterator<Long> getChargeItemIdsIterator() {
    return (this.chargeItemIds == null) ? null : this.chargeItemIds.iterator();
  }

  public void addToChargeItemIds(long elem) {
    if (this.chargeItemIds == null) {
      this.chargeItemIds = new ArrayList<Long>();
    }
    this.chargeItemIds.add(elem);
  }

  public List<Long> getChargeItemIds() {
    return this.chargeItemIds;
  }

  public CancelChargeRequest setChargeItemIds(List<Long> chargeItemIds) {
    this.chargeItemIds = chargeItemIds;
    return this;
  }

  public void unsetChargeItemIds() {
    this.chargeItemIds = null;
  }

  /** Returns true if field chargeItemIds is set (has been assigned a value) and false otherwise */
  public boolean isSetChargeItemIds() {
    return this.chargeItemIds != null;
  }

  public void setChargeItemIdsIsSet(boolean value) {
    if (!value) {
      this.chargeItemIds = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case OPERATOR_ID:
      if (value == null) {
        unsetOperatorId();
      } else {
        setOperatorId((Long)value);
      }
      break;

    case CHARGE_ITEM_IDS:
      if (value == null) {
        unsetChargeItemIds();
      } else {
        setChargeItemIds((List<Long>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case OPERATOR_ID:
      return Long.valueOf(getOperatorId());

    case CHARGE_ITEM_IDS:
      return getChargeItemIds();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case OPERATOR_ID:
      return isSetOperatorId();
    case CHARGE_ITEM_IDS:
      return isSetChargeItemIds();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CancelChargeRequest)
      return this.equals((CancelChargeRequest)that);
    return false;
  }

  public boolean equals(CancelChargeRequest that) {
    if (that == null)
      return false;

    boolean this_present_operatorId = true;
    boolean that_present_operatorId = true;
    if (this_present_operatorId || that_present_operatorId) {
      if (!(this_present_operatorId && that_present_operatorId))
        return false;
      if (this.operatorId != that.operatorId)
        return false;
    }

    boolean this_present_chargeItemIds = true && this.isSetChargeItemIds();
    boolean that_present_chargeItemIds = true && that.isSetChargeItemIds();
    if (this_present_chargeItemIds || that_present_chargeItemIds) {
      if (!(this_present_chargeItemIds && that_present_chargeItemIds))
        return false;
      if (!this.chargeItemIds.equals(that.chargeItemIds))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_operatorId = true;
    list.add(present_operatorId);
    if (present_operatorId)
      list.add(operatorId);

    boolean present_chargeItemIds = true && (isSetChargeItemIds());
    list.add(present_chargeItemIds);
    if (present_chargeItemIds)
      list.add(chargeItemIds);

    return list.hashCode();
  }

  @Override
  public int compareTo(CancelChargeRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOperatorId()).compareTo(other.isSetOperatorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperatorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operatorId, other.operatorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChargeItemIds()).compareTo(other.isSetChargeItemIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChargeItemIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chargeItemIds, other.chargeItemIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CancelChargeRequest(");
    boolean first = true;

    sb.append("operatorId:");
    sb.append(this.operatorId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("chargeItemIds:");
    if (this.chargeItemIds == null) {
      sb.append("null");
    } else {
      sb.append(this.chargeItemIds);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'operatorId' because it's a primitive and you chose the non-beans generator.
    if (chargeItemIds == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'chargeItemIds' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CancelChargeRequestStandardSchemeFactory implements SchemeFactory {
    public CancelChargeRequestStandardScheme getScheme() {
      return new CancelChargeRequestStandardScheme();
    }
  }

  private static class CancelChargeRequestStandardScheme extends StandardScheme<CancelChargeRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CancelChargeRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // OPERATOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.operatorId = iprot.readI64();
              struct.setOperatorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CHARGE_ITEM_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list112 = iprot.readListBegin();
                struct.chargeItemIds = new ArrayList<Long>(_list112.size);
                long _elem113;
                for (int _i114 = 0; _i114 < _list112.size; ++_i114)
                {
                  _elem113 = iprot.readI64();
                  struct.chargeItemIds.add(_elem113);
                }
                iprot.readListEnd();
              }
              struct.setChargeItemIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetOperatorId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'operatorId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CancelChargeRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(OPERATOR_ID_FIELD_DESC);
      oprot.writeI64(struct.operatorId);
      oprot.writeFieldEnd();
      if (struct.chargeItemIds != null) {
        oprot.writeFieldBegin(CHARGE_ITEM_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.chargeItemIds.size()));
          for (long _iter115 : struct.chargeItemIds)
          {
            oprot.writeI64(_iter115);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CancelChargeRequestTupleSchemeFactory implements SchemeFactory {
    public CancelChargeRequestTupleScheme getScheme() {
      return new CancelChargeRequestTupleScheme();
    }
  }

  private static class CancelChargeRequestTupleScheme extends TupleScheme<CancelChargeRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CancelChargeRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.operatorId);
      {
        oprot.writeI32(struct.chargeItemIds.size());
        for (long _iter116 : struct.chargeItemIds)
        {
          oprot.writeI64(_iter116);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CancelChargeRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.operatorId = iprot.readI64();
      struct.setOperatorIdIsSet(true);
      {
        org.apache.thrift.protocol.TList _list117 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
        struct.chargeItemIds = new ArrayList<Long>(_list117.size);
        long _elem118;
        for (int _i119 = 0; _i119 < _list117.size; ++_i119)
        {
          _elem118 = iprot.readI64();
          struct.chargeItemIds.add(_elem118);
        }
      }
      struct.setChargeItemIdsIsSet(true);
    }
  }

}

