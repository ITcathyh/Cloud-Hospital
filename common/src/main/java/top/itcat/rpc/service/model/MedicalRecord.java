/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package top.itcat.rpc.service.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2019-7-3")
public class MedicalRecord implements org.apache.thrift.TBase<MedicalRecord, MedicalRecord._Fields>, java.io.Serializable, Cloneable, Comparable<MedicalRecord> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MedicalRecord");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField MEDICAL_RECORD_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("medicalRecordNo", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField DOCTOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("doctorId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField COMPLAIN_FIELD_DESC = new org.apache.thrift.protocol.TField("complain", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CURRENT_MEDICAL_HISTORY_FIELD_DESC = new org.apache.thrift.protocol.TField("currentMedicalHistory", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CURRENT_MEDICAL_TREATMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("currentMedicalTreatment", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ALLERGY_HISTORY_FIELD_DESC = new org.apache.thrift.protocol.TField("allergyHistory", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField PAST_MEDICAL_HISTORY_FIELD_DESC = new org.apache.thrift.protocol.TField("pastMedicalHistory", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField PHYSICAL_CHECK_UP_FIELD_DESC = new org.apache.thrift.protocol.TField("physicalCheckUp", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField PRELIMINARY_DIAGNOSIS_WESTERN_FIELD_DESC = new org.apache.thrift.protocol.TField("preliminaryDiagnosisWestern", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField PRELIMINARY_DIAGNOSIS_CHINESE_FIELD_DESC = new org.apache.thrift.protocol.TField("preliminaryDiagnosisChinese", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField DOCTOR_DIAGNOSTICS_FIELD_DESC = new org.apache.thrift.protocol.TField("doctorDiagnostics", org.apache.thrift.protocol.TType.LIST, (short)14);
  private static final org.apache.thrift.protocol.TField VALID_FIELD_DESC = new org.apache.thrift.protocol.TField("valid", org.apache.thrift.protocol.TType.I32, (short)255);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MedicalRecordStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MedicalRecordTupleSchemeFactory());
  }

  public long id; // optional
  public long medicalRecordNo; // optional
  public long doctorId; // optional
  public long time; // optional
  public String complain; // optional
  public String currentMedicalHistory; // optional
  public String currentMedicalTreatment; // optional
  public String allergyHistory; // optional
  public String pastMedicalHistory; // optional
  public String physicalCheckUp; // optional
  public String preliminaryDiagnosisWestern; // optional
  public String preliminaryDiagnosisChinese; // optional
  /**
   * 
   * @see MedicalRecordStatusEnum
   */
  public MedicalRecordStatusEnum status; // optional
  public List<DoctorDiagnostic> doctorDiagnostics; // optional
  public int valid; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    MEDICAL_RECORD_NO((short)2, "medicalRecordNo"),
    DOCTOR_ID((short)3, "doctorId"),
    TIME((short)4, "time"),
    COMPLAIN((short)5, "complain"),
    CURRENT_MEDICAL_HISTORY((short)6, "currentMedicalHistory"),
    CURRENT_MEDICAL_TREATMENT((short)7, "currentMedicalTreatment"),
    ALLERGY_HISTORY((short)8, "allergyHistory"),
    PAST_MEDICAL_HISTORY((short)9, "pastMedicalHistory"),
    PHYSICAL_CHECK_UP((short)10, "physicalCheckUp"),
    PRELIMINARY_DIAGNOSIS_WESTERN((short)11, "preliminaryDiagnosisWestern"),
    PRELIMINARY_DIAGNOSIS_CHINESE((short)12, "preliminaryDiagnosisChinese"),
    /**
     * 
     * @see MedicalRecordStatusEnum
     */
    STATUS((short)13, "status"),
    DOCTOR_DIAGNOSTICS((short)14, "doctorDiagnostics"),
    VALID((short)255, "valid");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // MEDICAL_RECORD_NO
          return MEDICAL_RECORD_NO;
        case 3: // DOCTOR_ID
          return DOCTOR_ID;
        case 4: // TIME
          return TIME;
        case 5: // COMPLAIN
          return COMPLAIN;
        case 6: // CURRENT_MEDICAL_HISTORY
          return CURRENT_MEDICAL_HISTORY;
        case 7: // CURRENT_MEDICAL_TREATMENT
          return CURRENT_MEDICAL_TREATMENT;
        case 8: // ALLERGY_HISTORY
          return ALLERGY_HISTORY;
        case 9: // PAST_MEDICAL_HISTORY
          return PAST_MEDICAL_HISTORY;
        case 10: // PHYSICAL_CHECK_UP
          return PHYSICAL_CHECK_UP;
        case 11: // PRELIMINARY_DIAGNOSIS_WESTERN
          return PRELIMINARY_DIAGNOSIS_WESTERN;
        case 12: // PRELIMINARY_DIAGNOSIS_CHINESE
          return PRELIMINARY_DIAGNOSIS_CHINESE;
        case 13: // STATUS
          return STATUS;
        case 14: // DOCTOR_DIAGNOSTICS
          return DOCTOR_DIAGNOSTICS;
        case 255: // VALID
          return VALID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __MEDICALRECORDNO_ISSET_ID = 1;
  private static final int __DOCTORID_ISSET_ID = 2;
  private static final int __TIME_ISSET_ID = 3;
  private static final int __VALID_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.MEDICAL_RECORD_NO,_Fields.DOCTOR_ID,_Fields.TIME,_Fields.COMPLAIN,_Fields.CURRENT_MEDICAL_HISTORY,_Fields.CURRENT_MEDICAL_TREATMENT,_Fields.ALLERGY_HISTORY,_Fields.PAST_MEDICAL_HISTORY,_Fields.PHYSICAL_CHECK_UP,_Fields.PRELIMINARY_DIAGNOSIS_WESTERN,_Fields.PRELIMINARY_DIAGNOSIS_CHINESE,_Fields.STATUS,_Fields.DOCTOR_DIAGNOSTICS,_Fields.VALID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MEDICAL_RECORD_NO, new org.apache.thrift.meta_data.FieldMetaData("medicalRecordNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DOCTOR_ID, new org.apache.thrift.meta_data.FieldMetaData("doctorId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COMPLAIN, new org.apache.thrift.meta_data.FieldMetaData("complain", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CURRENT_MEDICAL_HISTORY, new org.apache.thrift.meta_data.FieldMetaData("currentMedicalHistory", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CURRENT_MEDICAL_TREATMENT, new org.apache.thrift.meta_data.FieldMetaData("currentMedicalTreatment", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ALLERGY_HISTORY, new org.apache.thrift.meta_data.FieldMetaData("allergyHistory", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAST_MEDICAL_HISTORY, new org.apache.thrift.meta_data.FieldMetaData("pastMedicalHistory", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHYSICAL_CHECK_UP, new org.apache.thrift.meta_data.FieldMetaData("physicalCheckUp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRELIMINARY_DIAGNOSIS_WESTERN, new org.apache.thrift.meta_data.FieldMetaData("preliminaryDiagnosisWestern", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRELIMINARY_DIAGNOSIS_CHINESE, new org.apache.thrift.meta_data.FieldMetaData("preliminaryDiagnosisChinese", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MedicalRecordStatusEnum.class)));
    tmpMap.put(_Fields.DOCTOR_DIAGNOSTICS, new org.apache.thrift.meta_data.FieldMetaData("doctorDiagnostics", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "DoctorDiagnostic"))));
    tmpMap.put(_Fields.VALID, new org.apache.thrift.meta_data.FieldMetaData("valid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MedicalRecord.class, metaDataMap);
  }

  public MedicalRecord() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MedicalRecord(MedicalRecord other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.medicalRecordNo = other.medicalRecordNo;
    this.doctorId = other.doctorId;
    this.time = other.time;
    if (other.isSetComplain()) {
      this.complain = other.complain;
    }
    if (other.isSetCurrentMedicalHistory()) {
      this.currentMedicalHistory = other.currentMedicalHistory;
    }
    if (other.isSetCurrentMedicalTreatment()) {
      this.currentMedicalTreatment = other.currentMedicalTreatment;
    }
    if (other.isSetAllergyHistory()) {
      this.allergyHistory = other.allergyHistory;
    }
    if (other.isSetPastMedicalHistory()) {
      this.pastMedicalHistory = other.pastMedicalHistory;
    }
    if (other.isSetPhysicalCheckUp()) {
      this.physicalCheckUp = other.physicalCheckUp;
    }
    if (other.isSetPreliminaryDiagnosisWestern()) {
      this.preliminaryDiagnosisWestern = other.preliminaryDiagnosisWestern;
    }
    if (other.isSetPreliminaryDiagnosisChinese()) {
      this.preliminaryDiagnosisChinese = other.preliminaryDiagnosisChinese;
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetDoctorDiagnostics()) {
      List<DoctorDiagnostic> __this__doctorDiagnostics = new ArrayList<DoctorDiagnostic>(other.doctorDiagnostics.size());
      for (DoctorDiagnostic other_element : other.doctorDiagnostics) {
        __this__doctorDiagnostics.add(other_element);
      }
      this.doctorDiagnostics = __this__doctorDiagnostics;
    }
    this.valid = other.valid;
  }

  public MedicalRecord deepCopy() {
    return new MedicalRecord(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setMedicalRecordNoIsSet(false);
    this.medicalRecordNo = 0;
    setDoctorIdIsSet(false);
    this.doctorId = 0;
    setTimeIsSet(false);
    this.time = 0;
    this.complain = null;
    this.currentMedicalHistory = null;
    this.currentMedicalTreatment = null;
    this.allergyHistory = null;
    this.pastMedicalHistory = null;
    this.physicalCheckUp = null;
    this.preliminaryDiagnosisWestern = null;
    this.preliminaryDiagnosisChinese = null;
    this.status = null;
    this.doctorDiagnostics = null;
    setValidIsSet(false);
    this.valid = 0;
  }

  public long getId() {
    return this.id;
  }

  public MedicalRecord setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public long getMedicalRecordNo() {
    return this.medicalRecordNo;
  }

  public MedicalRecord setMedicalRecordNo(long medicalRecordNo) {
    this.medicalRecordNo = medicalRecordNo;
    setMedicalRecordNoIsSet(true);
    return this;
  }

  public void unsetMedicalRecordNo() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEDICALRECORDNO_ISSET_ID);
  }

  /** Returns true if field medicalRecordNo is set (has been assigned a value) and false otherwise */
  public boolean isSetMedicalRecordNo() {
    return EncodingUtils.testBit(__isset_bitfield, __MEDICALRECORDNO_ISSET_ID);
  }

  public void setMedicalRecordNoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEDICALRECORDNO_ISSET_ID, value);
  }

  public long getDoctorId() {
    return this.doctorId;
  }

  public MedicalRecord setDoctorId(long doctorId) {
    this.doctorId = doctorId;
    setDoctorIdIsSet(true);
    return this;
  }

  public void unsetDoctorId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DOCTORID_ISSET_ID);
  }

  /** Returns true if field doctorId is set (has been assigned a value) and false otherwise */
  public boolean isSetDoctorId() {
    return EncodingUtils.testBit(__isset_bitfield, __DOCTORID_ISSET_ID);
  }

  public void setDoctorIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DOCTORID_ISSET_ID, value);
  }

  public long getTime() {
    return this.time;
  }

  public MedicalRecord setTime(long time) {
    this.time = time;
    setTimeIsSet(true);
    return this;
  }

  public void unsetTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIME_ISSET_ID);
  }

  /** Returns true if field time is set (has been assigned a value) and false otherwise */
  public boolean isSetTime() {
    return EncodingUtils.testBit(__isset_bitfield, __TIME_ISSET_ID);
  }

  public void setTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIME_ISSET_ID, value);
  }

  public String getComplain() {
    return this.complain;
  }

  public MedicalRecord setComplain(String complain) {
    this.complain = complain;
    return this;
  }

  public void unsetComplain() {
    this.complain = null;
  }

  /** Returns true if field complain is set (has been assigned a value) and false otherwise */
  public boolean isSetComplain() {
    return this.complain != null;
  }

  public void setComplainIsSet(boolean value) {
    if (!value) {
      this.complain = null;
    }
  }

  public String getCurrentMedicalHistory() {
    return this.currentMedicalHistory;
  }

  public MedicalRecord setCurrentMedicalHistory(String currentMedicalHistory) {
    this.currentMedicalHistory = currentMedicalHistory;
    return this;
  }

  public void unsetCurrentMedicalHistory() {
    this.currentMedicalHistory = null;
  }

  /** Returns true if field currentMedicalHistory is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrentMedicalHistory() {
    return this.currentMedicalHistory != null;
  }

  public void setCurrentMedicalHistoryIsSet(boolean value) {
    if (!value) {
      this.currentMedicalHistory = null;
    }
  }

  public String getCurrentMedicalTreatment() {
    return this.currentMedicalTreatment;
  }

  public MedicalRecord setCurrentMedicalTreatment(String currentMedicalTreatment) {
    this.currentMedicalTreatment = currentMedicalTreatment;
    return this;
  }

  public void unsetCurrentMedicalTreatment() {
    this.currentMedicalTreatment = null;
  }

  /** Returns true if field currentMedicalTreatment is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrentMedicalTreatment() {
    return this.currentMedicalTreatment != null;
  }

  public void setCurrentMedicalTreatmentIsSet(boolean value) {
    if (!value) {
      this.currentMedicalTreatment = null;
    }
  }

  public String getAllergyHistory() {
    return this.allergyHistory;
  }

  public MedicalRecord setAllergyHistory(String allergyHistory) {
    this.allergyHistory = allergyHistory;
    return this;
  }

  public void unsetAllergyHistory() {
    this.allergyHistory = null;
  }

  /** Returns true if field allergyHistory is set (has been assigned a value) and false otherwise */
  public boolean isSetAllergyHistory() {
    return this.allergyHistory != null;
  }

  public void setAllergyHistoryIsSet(boolean value) {
    if (!value) {
      this.allergyHistory = null;
    }
  }

  public String getPastMedicalHistory() {
    return this.pastMedicalHistory;
  }

  public MedicalRecord setPastMedicalHistory(String pastMedicalHistory) {
    this.pastMedicalHistory = pastMedicalHistory;
    return this;
  }

  public void unsetPastMedicalHistory() {
    this.pastMedicalHistory = null;
  }

  /** Returns true if field pastMedicalHistory is set (has been assigned a value) and false otherwise */
  public boolean isSetPastMedicalHistory() {
    return this.pastMedicalHistory != null;
  }

  public void setPastMedicalHistoryIsSet(boolean value) {
    if (!value) {
      this.pastMedicalHistory = null;
    }
  }

  public String getPhysicalCheckUp() {
    return this.physicalCheckUp;
  }

  public MedicalRecord setPhysicalCheckUp(String physicalCheckUp) {
    this.physicalCheckUp = physicalCheckUp;
    return this;
  }

  public void unsetPhysicalCheckUp() {
    this.physicalCheckUp = null;
  }

  /** Returns true if field physicalCheckUp is set (has been assigned a value) and false otherwise */
  public boolean isSetPhysicalCheckUp() {
    return this.physicalCheckUp != null;
  }

  public void setPhysicalCheckUpIsSet(boolean value) {
    if (!value) {
      this.physicalCheckUp = null;
    }
  }

  public String getPreliminaryDiagnosisWestern() {
    return this.preliminaryDiagnosisWestern;
  }

  public MedicalRecord setPreliminaryDiagnosisWestern(String preliminaryDiagnosisWestern) {
    this.preliminaryDiagnosisWestern = preliminaryDiagnosisWestern;
    return this;
  }

  public void unsetPreliminaryDiagnosisWestern() {
    this.preliminaryDiagnosisWestern = null;
  }

  /** Returns true if field preliminaryDiagnosisWestern is set (has been assigned a value) and false otherwise */
  public boolean isSetPreliminaryDiagnosisWestern() {
    return this.preliminaryDiagnosisWestern != null;
  }

  public void setPreliminaryDiagnosisWesternIsSet(boolean value) {
    if (!value) {
      this.preliminaryDiagnosisWestern = null;
    }
  }

  public String getPreliminaryDiagnosisChinese() {
    return this.preliminaryDiagnosisChinese;
  }

  public MedicalRecord setPreliminaryDiagnosisChinese(String preliminaryDiagnosisChinese) {
    this.preliminaryDiagnosisChinese = preliminaryDiagnosisChinese;
    return this;
  }

  public void unsetPreliminaryDiagnosisChinese() {
    this.preliminaryDiagnosisChinese = null;
  }

  /** Returns true if field preliminaryDiagnosisChinese is set (has been assigned a value) and false otherwise */
  public boolean isSetPreliminaryDiagnosisChinese() {
    return this.preliminaryDiagnosisChinese != null;
  }

  public void setPreliminaryDiagnosisChineseIsSet(boolean value) {
    if (!value) {
      this.preliminaryDiagnosisChinese = null;
    }
  }

  /**
   * 
   * @see MedicalRecordStatusEnum
   */
  public MedicalRecordStatusEnum getStatus() {
    return this.status;
  }

  /**
   * 
   * @see MedicalRecordStatusEnum
   */
  public MedicalRecord setStatus(MedicalRecordStatusEnum status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public int getDoctorDiagnosticsSize() {
    return (this.doctorDiagnostics == null) ? 0 : this.doctorDiagnostics.size();
  }

  public java.util.Iterator<DoctorDiagnostic> getDoctorDiagnosticsIterator() {
    return (this.doctorDiagnostics == null) ? null : this.doctorDiagnostics.iterator();
  }

  public void addToDoctorDiagnostics(DoctorDiagnostic elem) {
    if (this.doctorDiagnostics == null) {
      this.doctorDiagnostics = new ArrayList<DoctorDiagnostic>();
    }
    this.doctorDiagnostics.add(elem);
  }

  public List<DoctorDiagnostic> getDoctorDiagnostics() {
    return this.doctorDiagnostics;
  }

  public MedicalRecord setDoctorDiagnostics(List<DoctorDiagnostic> doctorDiagnostics) {
    this.doctorDiagnostics = doctorDiagnostics;
    return this;
  }

  public void unsetDoctorDiagnostics() {
    this.doctorDiagnostics = null;
  }

  /** Returns true if field doctorDiagnostics is set (has been assigned a value) and false otherwise */
  public boolean isSetDoctorDiagnostics() {
    return this.doctorDiagnostics != null;
  }

  public void setDoctorDiagnosticsIsSet(boolean value) {
    if (!value) {
      this.doctorDiagnostics = null;
    }
  }

  public int getValid() {
    return this.valid;
  }

  public MedicalRecord setValid(int valid) {
    this.valid = valid;
    setValidIsSet(true);
    return this;
  }

  public void unsetValid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VALID_ISSET_ID);
  }

  /** Returns true if field valid is set (has been assigned a value) and false otherwise */
  public boolean isSetValid() {
    return EncodingUtils.testBit(__isset_bitfield, __VALID_ISSET_ID);
  }

  public void setValidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VALID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case MEDICAL_RECORD_NO:
      if (value == null) {
        unsetMedicalRecordNo();
      } else {
        setMedicalRecordNo((Long)value);
      }
      break;

    case DOCTOR_ID:
      if (value == null) {
        unsetDoctorId();
      } else {
        setDoctorId((Long)value);
      }
      break;

    case TIME:
      if (value == null) {
        unsetTime();
      } else {
        setTime((Long)value);
      }
      break;

    case COMPLAIN:
      if (value == null) {
        unsetComplain();
      } else {
        setComplain((String)value);
      }
      break;

    case CURRENT_MEDICAL_HISTORY:
      if (value == null) {
        unsetCurrentMedicalHistory();
      } else {
        setCurrentMedicalHistory((String)value);
      }
      break;

    case CURRENT_MEDICAL_TREATMENT:
      if (value == null) {
        unsetCurrentMedicalTreatment();
      } else {
        setCurrentMedicalTreatment((String)value);
      }
      break;

    case ALLERGY_HISTORY:
      if (value == null) {
        unsetAllergyHistory();
      } else {
        setAllergyHistory((String)value);
      }
      break;

    case PAST_MEDICAL_HISTORY:
      if (value == null) {
        unsetPastMedicalHistory();
      } else {
        setPastMedicalHistory((String)value);
      }
      break;

    case PHYSICAL_CHECK_UP:
      if (value == null) {
        unsetPhysicalCheckUp();
      } else {
        setPhysicalCheckUp((String)value);
      }
      break;

    case PRELIMINARY_DIAGNOSIS_WESTERN:
      if (value == null) {
        unsetPreliminaryDiagnosisWestern();
      } else {
        setPreliminaryDiagnosisWestern((String)value);
      }
      break;

    case PRELIMINARY_DIAGNOSIS_CHINESE:
      if (value == null) {
        unsetPreliminaryDiagnosisChinese();
      } else {
        setPreliminaryDiagnosisChinese((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((MedicalRecordStatusEnum)value);
      }
      break;

    case DOCTOR_DIAGNOSTICS:
      if (value == null) {
        unsetDoctorDiagnostics();
      } else {
        setDoctorDiagnostics((List<DoctorDiagnostic>)value);
      }
      break;

    case VALID:
      if (value == null) {
        unsetValid();
      } else {
        setValid((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case MEDICAL_RECORD_NO:
      return Long.valueOf(getMedicalRecordNo());

    case DOCTOR_ID:
      return Long.valueOf(getDoctorId());

    case TIME:
      return Long.valueOf(getTime());

    case COMPLAIN:
      return getComplain();

    case CURRENT_MEDICAL_HISTORY:
      return getCurrentMedicalHistory();

    case CURRENT_MEDICAL_TREATMENT:
      return getCurrentMedicalTreatment();

    case ALLERGY_HISTORY:
      return getAllergyHistory();

    case PAST_MEDICAL_HISTORY:
      return getPastMedicalHistory();

    case PHYSICAL_CHECK_UP:
      return getPhysicalCheckUp();

    case PRELIMINARY_DIAGNOSIS_WESTERN:
      return getPreliminaryDiagnosisWestern();

    case PRELIMINARY_DIAGNOSIS_CHINESE:
      return getPreliminaryDiagnosisChinese();

    case STATUS:
      return getStatus();

    case DOCTOR_DIAGNOSTICS:
      return getDoctorDiagnostics();

    case VALID:
      return Integer.valueOf(getValid());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case MEDICAL_RECORD_NO:
      return isSetMedicalRecordNo();
    case DOCTOR_ID:
      return isSetDoctorId();
    case TIME:
      return isSetTime();
    case COMPLAIN:
      return isSetComplain();
    case CURRENT_MEDICAL_HISTORY:
      return isSetCurrentMedicalHistory();
    case CURRENT_MEDICAL_TREATMENT:
      return isSetCurrentMedicalTreatment();
    case ALLERGY_HISTORY:
      return isSetAllergyHistory();
    case PAST_MEDICAL_HISTORY:
      return isSetPastMedicalHistory();
    case PHYSICAL_CHECK_UP:
      return isSetPhysicalCheckUp();
    case PRELIMINARY_DIAGNOSIS_WESTERN:
      return isSetPreliminaryDiagnosisWestern();
    case PRELIMINARY_DIAGNOSIS_CHINESE:
      return isSetPreliminaryDiagnosisChinese();
    case STATUS:
      return isSetStatus();
    case DOCTOR_DIAGNOSTICS:
      return isSetDoctorDiagnostics();
    case VALID:
      return isSetValid();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MedicalRecord)
      return this.equals((MedicalRecord)that);
    return false;
  }

  public boolean equals(MedicalRecord that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_medicalRecordNo = true && this.isSetMedicalRecordNo();
    boolean that_present_medicalRecordNo = true && that.isSetMedicalRecordNo();
    if (this_present_medicalRecordNo || that_present_medicalRecordNo) {
      if (!(this_present_medicalRecordNo && that_present_medicalRecordNo))
        return false;
      if (this.medicalRecordNo != that.medicalRecordNo)
        return false;
    }

    boolean this_present_doctorId = true && this.isSetDoctorId();
    boolean that_present_doctorId = true && that.isSetDoctorId();
    if (this_present_doctorId || that_present_doctorId) {
      if (!(this_present_doctorId && that_present_doctorId))
        return false;
      if (this.doctorId != that.doctorId)
        return false;
    }

    boolean this_present_time = true && this.isSetTime();
    boolean that_present_time = true && that.isSetTime();
    if (this_present_time || that_present_time) {
      if (!(this_present_time && that_present_time))
        return false;
      if (this.time != that.time)
        return false;
    }

    boolean this_present_complain = true && this.isSetComplain();
    boolean that_present_complain = true && that.isSetComplain();
    if (this_present_complain || that_present_complain) {
      if (!(this_present_complain && that_present_complain))
        return false;
      if (!this.complain.equals(that.complain))
        return false;
    }

    boolean this_present_currentMedicalHistory = true && this.isSetCurrentMedicalHistory();
    boolean that_present_currentMedicalHistory = true && that.isSetCurrentMedicalHistory();
    if (this_present_currentMedicalHistory || that_present_currentMedicalHistory) {
      if (!(this_present_currentMedicalHistory && that_present_currentMedicalHistory))
        return false;
      if (!this.currentMedicalHistory.equals(that.currentMedicalHistory))
        return false;
    }

    boolean this_present_currentMedicalTreatment = true && this.isSetCurrentMedicalTreatment();
    boolean that_present_currentMedicalTreatment = true && that.isSetCurrentMedicalTreatment();
    if (this_present_currentMedicalTreatment || that_present_currentMedicalTreatment) {
      if (!(this_present_currentMedicalTreatment && that_present_currentMedicalTreatment))
        return false;
      if (!this.currentMedicalTreatment.equals(that.currentMedicalTreatment))
        return false;
    }

    boolean this_present_allergyHistory = true && this.isSetAllergyHistory();
    boolean that_present_allergyHistory = true && that.isSetAllergyHistory();
    if (this_present_allergyHistory || that_present_allergyHistory) {
      if (!(this_present_allergyHistory && that_present_allergyHistory))
        return false;
      if (!this.allergyHistory.equals(that.allergyHistory))
        return false;
    }

    boolean this_present_pastMedicalHistory = true && this.isSetPastMedicalHistory();
    boolean that_present_pastMedicalHistory = true && that.isSetPastMedicalHistory();
    if (this_present_pastMedicalHistory || that_present_pastMedicalHistory) {
      if (!(this_present_pastMedicalHistory && that_present_pastMedicalHistory))
        return false;
      if (!this.pastMedicalHistory.equals(that.pastMedicalHistory))
        return false;
    }

    boolean this_present_physicalCheckUp = true && this.isSetPhysicalCheckUp();
    boolean that_present_physicalCheckUp = true && that.isSetPhysicalCheckUp();
    if (this_present_physicalCheckUp || that_present_physicalCheckUp) {
      if (!(this_present_physicalCheckUp && that_present_physicalCheckUp))
        return false;
      if (!this.physicalCheckUp.equals(that.physicalCheckUp))
        return false;
    }

    boolean this_present_preliminaryDiagnosisWestern = true && this.isSetPreliminaryDiagnosisWestern();
    boolean that_present_preliminaryDiagnosisWestern = true && that.isSetPreliminaryDiagnosisWestern();
    if (this_present_preliminaryDiagnosisWestern || that_present_preliminaryDiagnosisWestern) {
      if (!(this_present_preliminaryDiagnosisWestern && that_present_preliminaryDiagnosisWestern))
        return false;
      if (!this.preliminaryDiagnosisWestern.equals(that.preliminaryDiagnosisWestern))
        return false;
    }

    boolean this_present_preliminaryDiagnosisChinese = true && this.isSetPreliminaryDiagnosisChinese();
    boolean that_present_preliminaryDiagnosisChinese = true && that.isSetPreliminaryDiagnosisChinese();
    if (this_present_preliminaryDiagnosisChinese || that_present_preliminaryDiagnosisChinese) {
      if (!(this_present_preliminaryDiagnosisChinese && that_present_preliminaryDiagnosisChinese))
        return false;
      if (!this.preliminaryDiagnosisChinese.equals(that.preliminaryDiagnosisChinese))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_doctorDiagnostics = true && this.isSetDoctorDiagnostics();
    boolean that_present_doctorDiagnostics = true && that.isSetDoctorDiagnostics();
    if (this_present_doctorDiagnostics || that_present_doctorDiagnostics) {
      if (!(this_present_doctorDiagnostics && that_present_doctorDiagnostics))
        return false;
      if (!this.doctorDiagnostics.equals(that.doctorDiagnostics))
        return false;
    }

    boolean this_present_valid = true && this.isSetValid();
    boolean that_present_valid = true && that.isSetValid();
    if (this_present_valid || that_present_valid) {
      if (!(this_present_valid && that_present_valid))
        return false;
      if (this.valid != that.valid)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_medicalRecordNo = true && (isSetMedicalRecordNo());
    list.add(present_medicalRecordNo);
    if (present_medicalRecordNo)
      list.add(medicalRecordNo);

    boolean present_doctorId = true && (isSetDoctorId());
    list.add(present_doctorId);
    if (present_doctorId)
      list.add(doctorId);

    boolean present_time = true && (isSetTime());
    list.add(present_time);
    if (present_time)
      list.add(time);

    boolean present_complain = true && (isSetComplain());
    list.add(present_complain);
    if (present_complain)
      list.add(complain);

    boolean present_currentMedicalHistory = true && (isSetCurrentMedicalHistory());
    list.add(present_currentMedicalHistory);
    if (present_currentMedicalHistory)
      list.add(currentMedicalHistory);

    boolean present_currentMedicalTreatment = true && (isSetCurrentMedicalTreatment());
    list.add(present_currentMedicalTreatment);
    if (present_currentMedicalTreatment)
      list.add(currentMedicalTreatment);

    boolean present_allergyHistory = true && (isSetAllergyHistory());
    list.add(present_allergyHistory);
    if (present_allergyHistory)
      list.add(allergyHistory);

    boolean present_pastMedicalHistory = true && (isSetPastMedicalHistory());
    list.add(present_pastMedicalHistory);
    if (present_pastMedicalHistory)
      list.add(pastMedicalHistory);

    boolean present_physicalCheckUp = true && (isSetPhysicalCheckUp());
    list.add(present_physicalCheckUp);
    if (present_physicalCheckUp)
      list.add(physicalCheckUp);

    boolean present_preliminaryDiagnosisWestern = true && (isSetPreliminaryDiagnosisWestern());
    list.add(present_preliminaryDiagnosisWestern);
    if (present_preliminaryDiagnosisWestern)
      list.add(preliminaryDiagnosisWestern);

    boolean present_preliminaryDiagnosisChinese = true && (isSetPreliminaryDiagnosisChinese());
    list.add(present_preliminaryDiagnosisChinese);
    if (present_preliminaryDiagnosisChinese)
      list.add(preliminaryDiagnosisChinese);

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status.getValue());

    boolean present_doctorDiagnostics = true && (isSetDoctorDiagnostics());
    list.add(present_doctorDiagnostics);
    if (present_doctorDiagnostics)
      list.add(doctorDiagnostics);

    boolean present_valid = true && (isSetValid());
    list.add(present_valid);
    if (present_valid)
      list.add(valid);

    return list.hashCode();
  }

  @Override
  public int compareTo(MedicalRecord other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMedicalRecordNo()).compareTo(other.isSetMedicalRecordNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMedicalRecordNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.medicalRecordNo, other.medicalRecordNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDoctorId()).compareTo(other.isSetDoctorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDoctorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doctorId, other.doctorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComplain()).compareTo(other.isSetComplain());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComplain()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.complain, other.complain);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrentMedicalHistory()).compareTo(other.isSetCurrentMedicalHistory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentMedicalHistory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentMedicalHistory, other.currentMedicalHistory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrentMedicalTreatment()).compareTo(other.isSetCurrentMedicalTreatment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentMedicalTreatment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentMedicalTreatment, other.currentMedicalTreatment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAllergyHistory()).compareTo(other.isSetAllergyHistory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllergyHistory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allergyHistory, other.allergyHistory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPastMedicalHistory()).compareTo(other.isSetPastMedicalHistory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPastMedicalHistory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pastMedicalHistory, other.pastMedicalHistory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhysicalCheckUp()).compareTo(other.isSetPhysicalCheckUp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhysicalCheckUp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.physicalCheckUp, other.physicalCheckUp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreliminaryDiagnosisWestern()).compareTo(other.isSetPreliminaryDiagnosisWestern());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreliminaryDiagnosisWestern()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preliminaryDiagnosisWestern, other.preliminaryDiagnosisWestern);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreliminaryDiagnosisChinese()).compareTo(other.isSetPreliminaryDiagnosisChinese());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreliminaryDiagnosisChinese()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preliminaryDiagnosisChinese, other.preliminaryDiagnosisChinese);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDoctorDiagnostics()).compareTo(other.isSetDoctorDiagnostics());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDoctorDiagnostics()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doctorDiagnostics, other.doctorDiagnostics);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValid()).compareTo(other.isSetValid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.valid, other.valid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MedicalRecord(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetMedicalRecordNo()) {
      if (!first) sb.append(", ");
      sb.append("medicalRecordNo:");
      sb.append(this.medicalRecordNo);
      first = false;
    }
    if (isSetDoctorId()) {
      if (!first) sb.append(", ");
      sb.append("doctorId:");
      sb.append(this.doctorId);
      first = false;
    }
    if (isSetTime()) {
      if (!first) sb.append(", ");
      sb.append("time:");
      sb.append(this.time);
      first = false;
    }
    if (isSetComplain()) {
      if (!first) sb.append(", ");
      sb.append("complain:");
      if (this.complain == null) {
        sb.append("null");
      } else {
        sb.append(this.complain);
      }
      first = false;
    }
    if (isSetCurrentMedicalHistory()) {
      if (!first) sb.append(", ");
      sb.append("currentMedicalHistory:");
      if (this.currentMedicalHistory == null) {
        sb.append("null");
      } else {
        sb.append(this.currentMedicalHistory);
      }
      first = false;
    }
    if (isSetCurrentMedicalTreatment()) {
      if (!first) sb.append(", ");
      sb.append("currentMedicalTreatment:");
      if (this.currentMedicalTreatment == null) {
        sb.append("null");
      } else {
        sb.append(this.currentMedicalTreatment);
      }
      first = false;
    }
    if (isSetAllergyHistory()) {
      if (!first) sb.append(", ");
      sb.append("allergyHistory:");
      if (this.allergyHistory == null) {
        sb.append("null");
      } else {
        sb.append(this.allergyHistory);
      }
      first = false;
    }
    if (isSetPastMedicalHistory()) {
      if (!first) sb.append(", ");
      sb.append("pastMedicalHistory:");
      if (this.pastMedicalHistory == null) {
        sb.append("null");
      } else {
        sb.append(this.pastMedicalHistory);
      }
      first = false;
    }
    if (isSetPhysicalCheckUp()) {
      if (!first) sb.append(", ");
      sb.append("physicalCheckUp:");
      if (this.physicalCheckUp == null) {
        sb.append("null");
      } else {
        sb.append(this.physicalCheckUp);
      }
      first = false;
    }
    if (isSetPreliminaryDiagnosisWestern()) {
      if (!first) sb.append(", ");
      sb.append("preliminaryDiagnosisWestern:");
      if (this.preliminaryDiagnosisWestern == null) {
        sb.append("null");
      } else {
        sb.append(this.preliminaryDiagnosisWestern);
      }
      first = false;
    }
    if (isSetPreliminaryDiagnosisChinese()) {
      if (!first) sb.append(", ");
      sb.append("preliminaryDiagnosisChinese:");
      if (this.preliminaryDiagnosisChinese == null) {
        sb.append("null");
      } else {
        sb.append(this.preliminaryDiagnosisChinese);
      }
      first = false;
    }
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
    }
    if (isSetDoctorDiagnostics()) {
      if (!first) sb.append(", ");
      sb.append("doctorDiagnostics:");
      if (this.doctorDiagnostics == null) {
        sb.append("null");
      } else {
        sb.append(this.doctorDiagnostics);
      }
      first = false;
    }
    if (isSetValid()) {
      if (!first) sb.append(", ");
      sb.append("valid:");
      sb.append(this.valid);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MedicalRecordStandardSchemeFactory implements SchemeFactory {
    public MedicalRecordStandardScheme getScheme() {
      return new MedicalRecordStandardScheme();
    }
  }

  private static class MedicalRecordStandardScheme extends StandardScheme<MedicalRecord> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MedicalRecord struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MEDICAL_RECORD_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.medicalRecordNo = iprot.readI64();
              struct.setMedicalRecordNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DOCTOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.doctorId = iprot.readI64();
              struct.setDoctorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.time = iprot.readI64();
              struct.setTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COMPLAIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.complain = iprot.readString();
              struct.setComplainIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CURRENT_MEDICAL_HISTORY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currentMedicalHistory = iprot.readString();
              struct.setCurrentMedicalHistoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CURRENT_MEDICAL_TREATMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currentMedicalTreatment = iprot.readString();
              struct.setCurrentMedicalTreatmentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ALLERGY_HISTORY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.allergyHistory = iprot.readString();
              struct.setAllergyHistoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PAST_MEDICAL_HISTORY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pastMedicalHistory = iprot.readString();
              struct.setPastMedicalHistoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PHYSICAL_CHECK_UP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.physicalCheckUp = iprot.readString();
              struct.setPhysicalCheckUpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PRELIMINARY_DIAGNOSIS_WESTERN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.preliminaryDiagnosisWestern = iprot.readString();
              struct.setPreliminaryDiagnosisWesternIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PRELIMINARY_DIAGNOSIS_CHINESE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.preliminaryDiagnosisChinese = iprot.readString();
              struct.setPreliminaryDiagnosisChineseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = top.itcat.rpc.service.model.MedicalRecordStatusEnum.findByValue(iprot.readI32());
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // DOCTOR_DIAGNOSTICS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.doctorDiagnostics = new ArrayList<DoctorDiagnostic>(_list0.size);
                DoctorDiagnostic _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new DoctorDiagnostic();
                  _elem1.read(iprot);
                  struct.doctorDiagnostics.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setDoctorDiagnosticsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 255: // VALID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.valid = iprot.readI32();
              struct.setValidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MedicalRecord struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMedicalRecordNo()) {
        oprot.writeFieldBegin(MEDICAL_RECORD_NO_FIELD_DESC);
        oprot.writeI64(struct.medicalRecordNo);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDoctorId()) {
        oprot.writeFieldBegin(DOCTOR_ID_FIELD_DESC);
        oprot.writeI64(struct.doctorId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTime()) {
        oprot.writeFieldBegin(TIME_FIELD_DESC);
        oprot.writeI64(struct.time);
        oprot.writeFieldEnd();
      }
      if (struct.complain != null) {
        if (struct.isSetComplain()) {
          oprot.writeFieldBegin(COMPLAIN_FIELD_DESC);
          oprot.writeString(struct.complain);
          oprot.writeFieldEnd();
        }
      }
      if (struct.currentMedicalHistory != null) {
        if (struct.isSetCurrentMedicalHistory()) {
          oprot.writeFieldBegin(CURRENT_MEDICAL_HISTORY_FIELD_DESC);
          oprot.writeString(struct.currentMedicalHistory);
          oprot.writeFieldEnd();
        }
      }
      if (struct.currentMedicalTreatment != null) {
        if (struct.isSetCurrentMedicalTreatment()) {
          oprot.writeFieldBegin(CURRENT_MEDICAL_TREATMENT_FIELD_DESC);
          oprot.writeString(struct.currentMedicalTreatment);
          oprot.writeFieldEnd();
        }
      }
      if (struct.allergyHistory != null) {
        if (struct.isSetAllergyHistory()) {
          oprot.writeFieldBegin(ALLERGY_HISTORY_FIELD_DESC);
          oprot.writeString(struct.allergyHistory);
          oprot.writeFieldEnd();
        }
      }
      if (struct.pastMedicalHistory != null) {
        if (struct.isSetPastMedicalHistory()) {
          oprot.writeFieldBegin(PAST_MEDICAL_HISTORY_FIELD_DESC);
          oprot.writeString(struct.pastMedicalHistory);
          oprot.writeFieldEnd();
        }
      }
      if (struct.physicalCheckUp != null) {
        if (struct.isSetPhysicalCheckUp()) {
          oprot.writeFieldBegin(PHYSICAL_CHECK_UP_FIELD_DESC);
          oprot.writeString(struct.physicalCheckUp);
          oprot.writeFieldEnd();
        }
      }
      if (struct.preliminaryDiagnosisWestern != null) {
        if (struct.isSetPreliminaryDiagnosisWestern()) {
          oprot.writeFieldBegin(PRELIMINARY_DIAGNOSIS_WESTERN_FIELD_DESC);
          oprot.writeString(struct.preliminaryDiagnosisWestern);
          oprot.writeFieldEnd();
        }
      }
      if (struct.preliminaryDiagnosisChinese != null) {
        if (struct.isSetPreliminaryDiagnosisChinese()) {
          oprot.writeFieldBegin(PRELIMINARY_DIAGNOSIS_CHINESE_FIELD_DESC);
          oprot.writeString(struct.preliminaryDiagnosisChinese);
          oprot.writeFieldEnd();
        }
      }
      if (struct.status != null) {
        if (struct.isSetStatus()) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          oprot.writeI32(struct.status.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.doctorDiagnostics != null) {
        if (struct.isSetDoctorDiagnostics()) {
          oprot.writeFieldBegin(DOCTOR_DIAGNOSTICS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.doctorDiagnostics.size()));
            for (DoctorDiagnostic _iter3 : struct.doctorDiagnostics)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetValid()) {
        oprot.writeFieldBegin(VALID_FIELD_DESC);
        oprot.writeI32(struct.valid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MedicalRecordTupleSchemeFactory implements SchemeFactory {
    public MedicalRecordTupleScheme getScheme() {
      return new MedicalRecordTupleScheme();
    }
  }

  private static class MedicalRecordTupleScheme extends TupleScheme<MedicalRecord> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MedicalRecord struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetMedicalRecordNo()) {
        optionals.set(1);
      }
      if (struct.isSetDoctorId()) {
        optionals.set(2);
      }
      if (struct.isSetTime()) {
        optionals.set(3);
      }
      if (struct.isSetComplain()) {
        optionals.set(4);
      }
      if (struct.isSetCurrentMedicalHistory()) {
        optionals.set(5);
      }
      if (struct.isSetCurrentMedicalTreatment()) {
        optionals.set(6);
      }
      if (struct.isSetAllergyHistory()) {
        optionals.set(7);
      }
      if (struct.isSetPastMedicalHistory()) {
        optionals.set(8);
      }
      if (struct.isSetPhysicalCheckUp()) {
        optionals.set(9);
      }
      if (struct.isSetPreliminaryDiagnosisWestern()) {
        optionals.set(10);
      }
      if (struct.isSetPreliminaryDiagnosisChinese()) {
        optionals.set(11);
      }
      if (struct.isSetStatus()) {
        optionals.set(12);
      }
      if (struct.isSetDoctorDiagnostics()) {
        optionals.set(13);
      }
      if (struct.isSetValid()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetMedicalRecordNo()) {
        oprot.writeI64(struct.medicalRecordNo);
      }
      if (struct.isSetDoctorId()) {
        oprot.writeI64(struct.doctorId);
      }
      if (struct.isSetTime()) {
        oprot.writeI64(struct.time);
      }
      if (struct.isSetComplain()) {
        oprot.writeString(struct.complain);
      }
      if (struct.isSetCurrentMedicalHistory()) {
        oprot.writeString(struct.currentMedicalHistory);
      }
      if (struct.isSetCurrentMedicalTreatment()) {
        oprot.writeString(struct.currentMedicalTreatment);
      }
      if (struct.isSetAllergyHistory()) {
        oprot.writeString(struct.allergyHistory);
      }
      if (struct.isSetPastMedicalHistory()) {
        oprot.writeString(struct.pastMedicalHistory);
      }
      if (struct.isSetPhysicalCheckUp()) {
        oprot.writeString(struct.physicalCheckUp);
      }
      if (struct.isSetPreliminaryDiagnosisWestern()) {
        oprot.writeString(struct.preliminaryDiagnosisWestern);
      }
      if (struct.isSetPreliminaryDiagnosisChinese()) {
        oprot.writeString(struct.preliminaryDiagnosisChinese);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status.getValue());
      }
      if (struct.isSetDoctorDiagnostics()) {
        {
          oprot.writeI32(struct.doctorDiagnostics.size());
          for (DoctorDiagnostic _iter4 : struct.doctorDiagnostics)
          {
            _iter4.write(oprot);
          }
        }
      }
      if (struct.isSetValid()) {
        oprot.writeI32(struct.valid);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MedicalRecord struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.medicalRecordNo = iprot.readI64();
        struct.setMedicalRecordNoIsSet(true);
      }
      if (incoming.get(2)) {
        struct.doctorId = iprot.readI64();
        struct.setDoctorIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.time = iprot.readI64();
        struct.setTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.complain = iprot.readString();
        struct.setComplainIsSet(true);
      }
      if (incoming.get(5)) {
        struct.currentMedicalHistory = iprot.readString();
        struct.setCurrentMedicalHistoryIsSet(true);
      }
      if (incoming.get(6)) {
        struct.currentMedicalTreatment = iprot.readString();
        struct.setCurrentMedicalTreatmentIsSet(true);
      }
      if (incoming.get(7)) {
        struct.allergyHistory = iprot.readString();
        struct.setAllergyHistoryIsSet(true);
      }
      if (incoming.get(8)) {
        struct.pastMedicalHistory = iprot.readString();
        struct.setPastMedicalHistoryIsSet(true);
      }
      if (incoming.get(9)) {
        struct.physicalCheckUp = iprot.readString();
        struct.setPhysicalCheckUpIsSet(true);
      }
      if (incoming.get(10)) {
        struct.preliminaryDiagnosisWestern = iprot.readString();
        struct.setPreliminaryDiagnosisWesternIsSet(true);
      }
      if (incoming.get(11)) {
        struct.preliminaryDiagnosisChinese = iprot.readString();
        struct.setPreliminaryDiagnosisChineseIsSet(true);
      }
      if (incoming.get(12)) {
        struct.status = top.itcat.rpc.service.model.MedicalRecordStatusEnum.findByValue(iprot.readI32());
        struct.setStatusIsSet(true);
      }
      if (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.doctorDiagnostics = new ArrayList<DoctorDiagnostic>(_list5.size);
          DoctorDiagnostic _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new DoctorDiagnostic();
            _elem6.read(iprot);
            struct.doctorDiagnostics.add(_elem6);
          }
        }
        struct.setDoctorDiagnosticsIsSet(true);
      }
      if (incoming.get(14)) {
        struct.valid = iprot.readI32();
        struct.setValidIsSet(true);
      }
    }
  }

}

