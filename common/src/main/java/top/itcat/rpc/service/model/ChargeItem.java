/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package top.itcat.rpc.service.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2019-7-3")
public class ChargeItem implements org.apache.thrift.TBase<ChargeItem, ChargeItem._Fields>, java.io.Serializable, Cloneable, Comparable<ChargeItem> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ChargeItem");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SPECIFICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("specification", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField UNIT_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("unitPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("amount", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField MEASURE_WORD_FIELD_DESC = new org.apache.thrift.protocol.TField("measureWord", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PAYABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("payable", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField ACTUALLY_PAID_FIELD_DESC = new org.apache.thrift.protocol.TField("actuallyPaid", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField MEDICAL_RECORD_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("medicalRecordNo", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField BILLING_CATEGORY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("billingCategoryId", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField OPERATOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("operatorId", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField OPERATION_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("operationTime", org.apache.thrift.protocol.TType.I64, (short)13);
  private static final org.apache.thrift.protocol.TField DAILY_KNOT_FIELD_DESC = new org.apache.thrift.protocol.TField("dailyKnot", org.apache.thrift.protocol.TType.BOOL, (short)14);
  private static final org.apache.thrift.protocol.TField CHARGE_SUBJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("chargeSubjectId", org.apache.thrift.protocol.TType.I64, (short)15);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I64, (short)16);
  private static final org.apache.thrift.protocol.TField DEPARTMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("departmentId", org.apache.thrift.protocol.TType.I64, (short)17);
  private static final org.apache.thrift.protocol.TField CREATOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("creatorId", org.apache.thrift.protocol.TType.I64, (short)18);
  private static final org.apache.thrift.protocol.TField CREATE_DEPARTMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("createDepartmentId", org.apache.thrift.protocol.TType.I64, (short)19);
  private static final org.apache.thrift.protocol.TField VALID_FIELD_DESC = new org.apache.thrift.protocol.TField("valid", org.apache.thrift.protocol.TType.I32, (short)255);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ChargeItemStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ChargeItemTupleSchemeFactory());
  }

  public long id; // optional
  public String name; // optional
  public String specification; // optional
  public double unitPrice; // optional
  public double amount; // optional
  public String measureWord; // optional
  public double payable; // optional
  public double actuallyPaid; // optional
  public long medicalRecordNo; // optional
  /**
   * 
   * @see ChargeItemStatusEnum
   */
  public ChargeItemStatusEnum status; // optional
  public long billingCategoryId; // optional
  public long operatorId; // optional
  public long operationTime; // optional
  public boolean dailyKnot; // optional
  public long chargeSubjectId; // optional
  public long projectId; // optional
  public long departmentId; // optional
  public long creatorId; // optional
  public long createDepartmentId; // optional
  public int valid; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    SPECIFICATION((short)3, "specification"),
    UNIT_PRICE((short)4, "unitPrice"),
    AMOUNT((short)5, "amount"),
    MEASURE_WORD((short)6, "measureWord"),
    PAYABLE((short)7, "payable"),
    ACTUALLY_PAID((short)8, "actuallyPaid"),
    MEDICAL_RECORD_NO((short)9, "medicalRecordNo"),
    /**
     * 
     * @see ChargeItemStatusEnum
     */
    STATUS((short)10, "status"),
    BILLING_CATEGORY_ID((short)11, "billingCategoryId"),
    OPERATOR_ID((short)12, "operatorId"),
    OPERATION_TIME((short)13, "operationTime"),
    DAILY_KNOT((short)14, "dailyKnot"),
    CHARGE_SUBJECT_ID((short)15, "chargeSubjectId"),
    PROJECT_ID((short)16, "projectId"),
    DEPARTMENT_ID((short)17, "departmentId"),
    CREATOR_ID((short)18, "creatorId"),
    CREATE_DEPARTMENT_ID((short)19, "createDepartmentId"),
    VALID((short)255, "valid");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // SPECIFICATION
          return SPECIFICATION;
        case 4: // UNIT_PRICE
          return UNIT_PRICE;
        case 5: // AMOUNT
          return AMOUNT;
        case 6: // MEASURE_WORD
          return MEASURE_WORD;
        case 7: // PAYABLE
          return PAYABLE;
        case 8: // ACTUALLY_PAID
          return ACTUALLY_PAID;
        case 9: // MEDICAL_RECORD_NO
          return MEDICAL_RECORD_NO;
        case 10: // STATUS
          return STATUS;
        case 11: // BILLING_CATEGORY_ID
          return BILLING_CATEGORY_ID;
        case 12: // OPERATOR_ID
          return OPERATOR_ID;
        case 13: // OPERATION_TIME
          return OPERATION_TIME;
        case 14: // DAILY_KNOT
          return DAILY_KNOT;
        case 15: // CHARGE_SUBJECT_ID
          return CHARGE_SUBJECT_ID;
        case 16: // PROJECT_ID
          return PROJECT_ID;
        case 17: // DEPARTMENT_ID
          return DEPARTMENT_ID;
        case 18: // CREATOR_ID
          return CREATOR_ID;
        case 19: // CREATE_DEPARTMENT_ID
          return CREATE_DEPARTMENT_ID;
        case 255: // VALID
          return VALID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __UNITPRICE_ISSET_ID = 1;
  private static final int __AMOUNT_ISSET_ID = 2;
  private static final int __PAYABLE_ISSET_ID = 3;
  private static final int __ACTUALLYPAID_ISSET_ID = 4;
  private static final int __MEDICALRECORDNO_ISSET_ID = 5;
  private static final int __BILLINGCATEGORYID_ISSET_ID = 6;
  private static final int __OPERATORID_ISSET_ID = 7;
  private static final int __OPERATIONTIME_ISSET_ID = 8;
  private static final int __DAILYKNOT_ISSET_ID = 9;
  private static final int __CHARGESUBJECTID_ISSET_ID = 10;
  private static final int __PROJECTID_ISSET_ID = 11;
  private static final int __DEPARTMENTID_ISSET_ID = 12;
  private static final int __CREATORID_ISSET_ID = 13;
  private static final int __CREATEDEPARTMENTID_ISSET_ID = 14;
  private static final int __VALID_ISSET_ID = 15;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.NAME,_Fields.SPECIFICATION,_Fields.UNIT_PRICE,_Fields.AMOUNT,_Fields.MEASURE_WORD,_Fields.PAYABLE,_Fields.ACTUALLY_PAID,_Fields.MEDICAL_RECORD_NO,_Fields.STATUS,_Fields.BILLING_CATEGORY_ID,_Fields.OPERATOR_ID,_Fields.OPERATION_TIME,_Fields.DAILY_KNOT,_Fields.CHARGE_SUBJECT_ID,_Fields.PROJECT_ID,_Fields.DEPARTMENT_ID,_Fields.CREATOR_ID,_Fields.CREATE_DEPARTMENT_ID,_Fields.VALID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SPECIFICATION, new org.apache.thrift.meta_data.FieldMetaData("specification", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UNIT_PRICE, new org.apache.thrift.meta_data.FieldMetaData("unitPrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("amount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MEASURE_WORD, new org.apache.thrift.meta_data.FieldMetaData("measureWord", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAYABLE, new org.apache.thrift.meta_data.FieldMetaData("payable", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ACTUALLY_PAID, new org.apache.thrift.meta_data.FieldMetaData("actuallyPaid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MEDICAL_RECORD_NO, new org.apache.thrift.meta_data.FieldMetaData("medicalRecordNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ChargeItemStatusEnum.class)));
    tmpMap.put(_Fields.BILLING_CATEGORY_ID, new org.apache.thrift.meta_data.FieldMetaData("billingCategoryId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OPERATOR_ID, new org.apache.thrift.meta_data.FieldMetaData("operatorId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OPERATION_TIME, new org.apache.thrift.meta_data.FieldMetaData("operationTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DAILY_KNOT, new org.apache.thrift.meta_data.FieldMetaData("dailyKnot", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CHARGE_SUBJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("chargeSubjectId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DEPARTMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("departmentId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATOR_ID, new org.apache.thrift.meta_data.FieldMetaData("creatorId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATE_DEPARTMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("createDepartmentId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VALID, new org.apache.thrift.meta_data.FieldMetaData("valid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ChargeItem.class, metaDataMap);
  }

  public ChargeItem() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ChargeItem(ChargeItem other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetSpecification()) {
      this.specification = other.specification;
    }
    this.unitPrice = other.unitPrice;
    this.amount = other.amount;
    if (other.isSetMeasureWord()) {
      this.measureWord = other.measureWord;
    }
    this.payable = other.payable;
    this.actuallyPaid = other.actuallyPaid;
    this.medicalRecordNo = other.medicalRecordNo;
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    this.billingCategoryId = other.billingCategoryId;
    this.operatorId = other.operatorId;
    this.operationTime = other.operationTime;
    this.dailyKnot = other.dailyKnot;
    this.chargeSubjectId = other.chargeSubjectId;
    this.projectId = other.projectId;
    this.departmentId = other.departmentId;
    this.creatorId = other.creatorId;
    this.createDepartmentId = other.createDepartmentId;
    this.valid = other.valid;
  }

  public ChargeItem deepCopy() {
    return new ChargeItem(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.name = null;
    this.specification = null;
    setUnitPriceIsSet(false);
    this.unitPrice = 0.0;
    setAmountIsSet(false);
    this.amount = 0.0;
    this.measureWord = null;
    setPayableIsSet(false);
    this.payable = 0.0;
    setActuallyPaidIsSet(false);
    this.actuallyPaid = 0.0;
    setMedicalRecordNoIsSet(false);
    this.medicalRecordNo = 0;
    this.status = null;
    setBillingCategoryIdIsSet(false);
    this.billingCategoryId = 0;
    setOperatorIdIsSet(false);
    this.operatorId = 0;
    setOperationTimeIsSet(false);
    this.operationTime = 0;
    setDailyKnotIsSet(false);
    this.dailyKnot = false;
    setChargeSubjectIdIsSet(false);
    this.chargeSubjectId = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    setDepartmentIdIsSet(false);
    this.departmentId = 0;
    setCreatorIdIsSet(false);
    this.creatorId = 0;
    setCreateDepartmentIdIsSet(false);
    this.createDepartmentId = 0;
    setValidIsSet(false);
    this.valid = 0;
  }

  public long getId() {
    return this.id;
  }

  public ChargeItem setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public ChargeItem setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getSpecification() {
    return this.specification;
  }

  public ChargeItem setSpecification(String specification) {
    this.specification = specification;
    return this;
  }

  public void unsetSpecification() {
    this.specification = null;
  }

  /** Returns true if field specification is set (has been assigned a value) and false otherwise */
  public boolean isSetSpecification() {
    return this.specification != null;
  }

  public void setSpecificationIsSet(boolean value) {
    if (!value) {
      this.specification = null;
    }
  }

  public double getUnitPrice() {
    return this.unitPrice;
  }

  public ChargeItem setUnitPrice(double unitPrice) {
    this.unitPrice = unitPrice;
    setUnitPriceIsSet(true);
    return this;
  }

  public void unsetUnitPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UNITPRICE_ISSET_ID);
  }

  /** Returns true if field unitPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetUnitPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __UNITPRICE_ISSET_ID);
  }

  public void setUnitPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UNITPRICE_ISSET_ID, value);
  }

  public double getAmount() {
    return this.amount;
  }

  public ChargeItem setAmount(double amount) {
    this.amount = amount;
    setAmountIsSet(true);
    return this;
  }

  public void unsetAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AMOUNT_ISSET_ID);
  }

  /** Returns true if field amount is set (has been assigned a value) and false otherwise */
  public boolean isSetAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __AMOUNT_ISSET_ID);
  }

  public void setAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AMOUNT_ISSET_ID, value);
  }

  public String getMeasureWord() {
    return this.measureWord;
  }

  public ChargeItem setMeasureWord(String measureWord) {
    this.measureWord = measureWord;
    return this;
  }

  public void unsetMeasureWord() {
    this.measureWord = null;
  }

  /** Returns true if field measureWord is set (has been assigned a value) and false otherwise */
  public boolean isSetMeasureWord() {
    return this.measureWord != null;
  }

  public void setMeasureWordIsSet(boolean value) {
    if (!value) {
      this.measureWord = null;
    }
  }

  public double getPayable() {
    return this.payable;
  }

  public ChargeItem setPayable(double payable) {
    this.payable = payable;
    setPayableIsSet(true);
    return this;
  }

  public void unsetPayable() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAYABLE_ISSET_ID);
  }

  /** Returns true if field payable is set (has been assigned a value) and false otherwise */
  public boolean isSetPayable() {
    return EncodingUtils.testBit(__isset_bitfield, __PAYABLE_ISSET_ID);
  }

  public void setPayableIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAYABLE_ISSET_ID, value);
  }

  public double getActuallyPaid() {
    return this.actuallyPaid;
  }

  public ChargeItem setActuallyPaid(double actuallyPaid) {
    this.actuallyPaid = actuallyPaid;
    setActuallyPaidIsSet(true);
    return this;
  }

  public void unsetActuallyPaid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTUALLYPAID_ISSET_ID);
  }

  /** Returns true if field actuallyPaid is set (has been assigned a value) and false otherwise */
  public boolean isSetActuallyPaid() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTUALLYPAID_ISSET_ID);
  }

  public void setActuallyPaidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTUALLYPAID_ISSET_ID, value);
  }

  public long getMedicalRecordNo() {
    return this.medicalRecordNo;
  }

  public ChargeItem setMedicalRecordNo(long medicalRecordNo) {
    this.medicalRecordNo = medicalRecordNo;
    setMedicalRecordNoIsSet(true);
    return this;
  }

  public void unsetMedicalRecordNo() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEDICALRECORDNO_ISSET_ID);
  }

  /** Returns true if field medicalRecordNo is set (has been assigned a value) and false otherwise */
  public boolean isSetMedicalRecordNo() {
    return EncodingUtils.testBit(__isset_bitfield, __MEDICALRECORDNO_ISSET_ID);
  }

  public void setMedicalRecordNoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEDICALRECORDNO_ISSET_ID, value);
  }

  /**
   * 
   * @see ChargeItemStatusEnum
   */
  public ChargeItemStatusEnum getStatus() {
    return this.status;
  }

  /**
   * 
   * @see ChargeItemStatusEnum
   */
  public ChargeItem setStatus(ChargeItemStatusEnum status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public long getBillingCategoryId() {
    return this.billingCategoryId;
  }

  public ChargeItem setBillingCategoryId(long billingCategoryId) {
    this.billingCategoryId = billingCategoryId;
    setBillingCategoryIdIsSet(true);
    return this;
  }

  public void unsetBillingCategoryId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BILLINGCATEGORYID_ISSET_ID);
  }

  /** Returns true if field billingCategoryId is set (has been assigned a value) and false otherwise */
  public boolean isSetBillingCategoryId() {
    return EncodingUtils.testBit(__isset_bitfield, __BILLINGCATEGORYID_ISSET_ID);
  }

  public void setBillingCategoryIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BILLINGCATEGORYID_ISSET_ID, value);
  }

  public long getOperatorId() {
    return this.operatorId;
  }

  public ChargeItem setOperatorId(long operatorId) {
    this.operatorId = operatorId;
    setOperatorIdIsSet(true);
    return this;
  }

  public void unsetOperatorId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPERATORID_ISSET_ID);
  }

  /** Returns true if field operatorId is set (has been assigned a value) and false otherwise */
  public boolean isSetOperatorId() {
    return EncodingUtils.testBit(__isset_bitfield, __OPERATORID_ISSET_ID);
  }

  public void setOperatorIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPERATORID_ISSET_ID, value);
  }

  public long getOperationTime() {
    return this.operationTime;
  }

  public ChargeItem setOperationTime(long operationTime) {
    this.operationTime = operationTime;
    setOperationTimeIsSet(true);
    return this;
  }

  public void unsetOperationTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPERATIONTIME_ISSET_ID);
  }

  /** Returns true if field operationTime is set (has been assigned a value) and false otherwise */
  public boolean isSetOperationTime() {
    return EncodingUtils.testBit(__isset_bitfield, __OPERATIONTIME_ISSET_ID);
  }

  public void setOperationTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPERATIONTIME_ISSET_ID, value);
  }

  public boolean isDailyKnot() {
    return this.dailyKnot;
  }

  public ChargeItem setDailyKnot(boolean dailyKnot) {
    this.dailyKnot = dailyKnot;
    setDailyKnotIsSet(true);
    return this;
  }

  public void unsetDailyKnot() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DAILYKNOT_ISSET_ID);
  }

  /** Returns true if field dailyKnot is set (has been assigned a value) and false otherwise */
  public boolean isSetDailyKnot() {
    return EncodingUtils.testBit(__isset_bitfield, __DAILYKNOT_ISSET_ID);
  }

  public void setDailyKnotIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DAILYKNOT_ISSET_ID, value);
  }

  public long getChargeSubjectId() {
    return this.chargeSubjectId;
  }

  public ChargeItem setChargeSubjectId(long chargeSubjectId) {
    this.chargeSubjectId = chargeSubjectId;
    setChargeSubjectIdIsSet(true);
    return this;
  }

  public void unsetChargeSubjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHARGESUBJECTID_ISSET_ID);
  }

  /** Returns true if field chargeSubjectId is set (has been assigned a value) and false otherwise */
  public boolean isSetChargeSubjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __CHARGESUBJECTID_ISSET_ID);
  }

  public void setChargeSubjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHARGESUBJECTID_ISSET_ID, value);
  }

  public long getProjectId() {
    return this.projectId;
  }

  public ChargeItem setProjectId(long projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public long getDepartmentId() {
    return this.departmentId;
  }

  public ChargeItem setDepartmentId(long departmentId) {
    this.departmentId = departmentId;
    setDepartmentIdIsSet(true);
    return this;
  }

  public void unsetDepartmentId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEPARTMENTID_ISSET_ID);
  }

  /** Returns true if field departmentId is set (has been assigned a value) and false otherwise */
  public boolean isSetDepartmentId() {
    return EncodingUtils.testBit(__isset_bitfield, __DEPARTMENTID_ISSET_ID);
  }

  public void setDepartmentIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEPARTMENTID_ISSET_ID, value);
  }

  public long getCreatorId() {
    return this.creatorId;
  }

  public ChargeItem setCreatorId(long creatorId) {
    this.creatorId = creatorId;
    setCreatorIdIsSet(true);
    return this;
  }

  public void unsetCreatorId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATORID_ISSET_ID);
  }

  /** Returns true if field creatorId is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatorId() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATORID_ISSET_ID);
  }

  public void setCreatorIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATORID_ISSET_ID, value);
  }

  public long getCreateDepartmentId() {
    return this.createDepartmentId;
  }

  public ChargeItem setCreateDepartmentId(long createDepartmentId) {
    this.createDepartmentId = createDepartmentId;
    setCreateDepartmentIdIsSet(true);
    return this;
  }

  public void unsetCreateDepartmentId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATEDEPARTMENTID_ISSET_ID);
  }

  /** Returns true if field createDepartmentId is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateDepartmentId() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATEDEPARTMENTID_ISSET_ID);
  }

  public void setCreateDepartmentIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATEDEPARTMENTID_ISSET_ID, value);
  }

  public int getValid() {
    return this.valid;
  }

  public ChargeItem setValid(int valid) {
    this.valid = valid;
    setValidIsSet(true);
    return this;
  }

  public void unsetValid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VALID_ISSET_ID);
  }

  /** Returns true if field valid is set (has been assigned a value) and false otherwise */
  public boolean isSetValid() {
    return EncodingUtils.testBit(__isset_bitfield, __VALID_ISSET_ID);
  }

  public void setValidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VALID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case SPECIFICATION:
      if (value == null) {
        unsetSpecification();
      } else {
        setSpecification((String)value);
      }
      break;

    case UNIT_PRICE:
      if (value == null) {
        unsetUnitPrice();
      } else {
        setUnitPrice((Double)value);
      }
      break;

    case AMOUNT:
      if (value == null) {
        unsetAmount();
      } else {
        setAmount((Double)value);
      }
      break;

    case MEASURE_WORD:
      if (value == null) {
        unsetMeasureWord();
      } else {
        setMeasureWord((String)value);
      }
      break;

    case PAYABLE:
      if (value == null) {
        unsetPayable();
      } else {
        setPayable((Double)value);
      }
      break;

    case ACTUALLY_PAID:
      if (value == null) {
        unsetActuallyPaid();
      } else {
        setActuallyPaid((Double)value);
      }
      break;

    case MEDICAL_RECORD_NO:
      if (value == null) {
        unsetMedicalRecordNo();
      } else {
        setMedicalRecordNo((Long)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((ChargeItemStatusEnum)value);
      }
      break;

    case BILLING_CATEGORY_ID:
      if (value == null) {
        unsetBillingCategoryId();
      } else {
        setBillingCategoryId((Long)value);
      }
      break;

    case OPERATOR_ID:
      if (value == null) {
        unsetOperatorId();
      } else {
        setOperatorId((Long)value);
      }
      break;

    case OPERATION_TIME:
      if (value == null) {
        unsetOperationTime();
      } else {
        setOperationTime((Long)value);
      }
      break;

    case DAILY_KNOT:
      if (value == null) {
        unsetDailyKnot();
      } else {
        setDailyKnot((Boolean)value);
      }
      break;

    case CHARGE_SUBJECT_ID:
      if (value == null) {
        unsetChargeSubjectId();
      } else {
        setChargeSubjectId((Long)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Long)value);
      }
      break;

    case DEPARTMENT_ID:
      if (value == null) {
        unsetDepartmentId();
      } else {
        setDepartmentId((Long)value);
      }
      break;

    case CREATOR_ID:
      if (value == null) {
        unsetCreatorId();
      } else {
        setCreatorId((Long)value);
      }
      break;

    case CREATE_DEPARTMENT_ID:
      if (value == null) {
        unsetCreateDepartmentId();
      } else {
        setCreateDepartmentId((Long)value);
      }
      break;

    case VALID:
      if (value == null) {
        unsetValid();
      } else {
        setValid((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case NAME:
      return getName();

    case SPECIFICATION:
      return getSpecification();

    case UNIT_PRICE:
      return Double.valueOf(getUnitPrice());

    case AMOUNT:
      return Double.valueOf(getAmount());

    case MEASURE_WORD:
      return getMeasureWord();

    case PAYABLE:
      return Double.valueOf(getPayable());

    case ACTUALLY_PAID:
      return Double.valueOf(getActuallyPaid());

    case MEDICAL_RECORD_NO:
      return Long.valueOf(getMedicalRecordNo());

    case STATUS:
      return getStatus();

    case BILLING_CATEGORY_ID:
      return Long.valueOf(getBillingCategoryId());

    case OPERATOR_ID:
      return Long.valueOf(getOperatorId());

    case OPERATION_TIME:
      return Long.valueOf(getOperationTime());

    case DAILY_KNOT:
      return Boolean.valueOf(isDailyKnot());

    case CHARGE_SUBJECT_ID:
      return Long.valueOf(getChargeSubjectId());

    case PROJECT_ID:
      return Long.valueOf(getProjectId());

    case DEPARTMENT_ID:
      return Long.valueOf(getDepartmentId());

    case CREATOR_ID:
      return Long.valueOf(getCreatorId());

    case CREATE_DEPARTMENT_ID:
      return Long.valueOf(getCreateDepartmentId());

    case VALID:
      return Integer.valueOf(getValid());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case SPECIFICATION:
      return isSetSpecification();
    case UNIT_PRICE:
      return isSetUnitPrice();
    case AMOUNT:
      return isSetAmount();
    case MEASURE_WORD:
      return isSetMeasureWord();
    case PAYABLE:
      return isSetPayable();
    case ACTUALLY_PAID:
      return isSetActuallyPaid();
    case MEDICAL_RECORD_NO:
      return isSetMedicalRecordNo();
    case STATUS:
      return isSetStatus();
    case BILLING_CATEGORY_ID:
      return isSetBillingCategoryId();
    case OPERATOR_ID:
      return isSetOperatorId();
    case OPERATION_TIME:
      return isSetOperationTime();
    case DAILY_KNOT:
      return isSetDailyKnot();
    case CHARGE_SUBJECT_ID:
      return isSetChargeSubjectId();
    case PROJECT_ID:
      return isSetProjectId();
    case DEPARTMENT_ID:
      return isSetDepartmentId();
    case CREATOR_ID:
      return isSetCreatorId();
    case CREATE_DEPARTMENT_ID:
      return isSetCreateDepartmentId();
    case VALID:
      return isSetValid();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ChargeItem)
      return this.equals((ChargeItem)that);
    return false;
  }

  public boolean equals(ChargeItem that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_specification = true && this.isSetSpecification();
    boolean that_present_specification = true && that.isSetSpecification();
    if (this_present_specification || that_present_specification) {
      if (!(this_present_specification && that_present_specification))
        return false;
      if (!this.specification.equals(that.specification))
        return false;
    }

    boolean this_present_unitPrice = true && this.isSetUnitPrice();
    boolean that_present_unitPrice = true && that.isSetUnitPrice();
    if (this_present_unitPrice || that_present_unitPrice) {
      if (!(this_present_unitPrice && that_present_unitPrice))
        return false;
      if (this.unitPrice != that.unitPrice)
        return false;
    }

    boolean this_present_amount = true && this.isSetAmount();
    boolean that_present_amount = true && that.isSetAmount();
    if (this_present_amount || that_present_amount) {
      if (!(this_present_amount && that_present_amount))
        return false;
      if (this.amount != that.amount)
        return false;
    }

    boolean this_present_measureWord = true && this.isSetMeasureWord();
    boolean that_present_measureWord = true && that.isSetMeasureWord();
    if (this_present_measureWord || that_present_measureWord) {
      if (!(this_present_measureWord && that_present_measureWord))
        return false;
      if (!this.measureWord.equals(that.measureWord))
        return false;
    }

    boolean this_present_payable = true && this.isSetPayable();
    boolean that_present_payable = true && that.isSetPayable();
    if (this_present_payable || that_present_payable) {
      if (!(this_present_payable && that_present_payable))
        return false;
      if (this.payable != that.payable)
        return false;
    }

    boolean this_present_actuallyPaid = true && this.isSetActuallyPaid();
    boolean that_present_actuallyPaid = true && that.isSetActuallyPaid();
    if (this_present_actuallyPaid || that_present_actuallyPaid) {
      if (!(this_present_actuallyPaid && that_present_actuallyPaid))
        return false;
      if (this.actuallyPaid != that.actuallyPaid)
        return false;
    }

    boolean this_present_medicalRecordNo = true && this.isSetMedicalRecordNo();
    boolean that_present_medicalRecordNo = true && that.isSetMedicalRecordNo();
    if (this_present_medicalRecordNo || that_present_medicalRecordNo) {
      if (!(this_present_medicalRecordNo && that_present_medicalRecordNo))
        return false;
      if (this.medicalRecordNo != that.medicalRecordNo)
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_billingCategoryId = true && this.isSetBillingCategoryId();
    boolean that_present_billingCategoryId = true && that.isSetBillingCategoryId();
    if (this_present_billingCategoryId || that_present_billingCategoryId) {
      if (!(this_present_billingCategoryId && that_present_billingCategoryId))
        return false;
      if (this.billingCategoryId != that.billingCategoryId)
        return false;
    }

    boolean this_present_operatorId = true && this.isSetOperatorId();
    boolean that_present_operatorId = true && that.isSetOperatorId();
    if (this_present_operatorId || that_present_operatorId) {
      if (!(this_present_operatorId && that_present_operatorId))
        return false;
      if (this.operatorId != that.operatorId)
        return false;
    }

    boolean this_present_operationTime = true && this.isSetOperationTime();
    boolean that_present_operationTime = true && that.isSetOperationTime();
    if (this_present_operationTime || that_present_operationTime) {
      if (!(this_present_operationTime && that_present_operationTime))
        return false;
      if (this.operationTime != that.operationTime)
        return false;
    }

    boolean this_present_dailyKnot = true && this.isSetDailyKnot();
    boolean that_present_dailyKnot = true && that.isSetDailyKnot();
    if (this_present_dailyKnot || that_present_dailyKnot) {
      if (!(this_present_dailyKnot && that_present_dailyKnot))
        return false;
      if (this.dailyKnot != that.dailyKnot)
        return false;
    }

    boolean this_present_chargeSubjectId = true && this.isSetChargeSubjectId();
    boolean that_present_chargeSubjectId = true && that.isSetChargeSubjectId();
    if (this_present_chargeSubjectId || that_present_chargeSubjectId) {
      if (!(this_present_chargeSubjectId && that_present_chargeSubjectId))
        return false;
      if (this.chargeSubjectId != that.chargeSubjectId)
        return false;
    }

    boolean this_present_projectId = true && this.isSetProjectId();
    boolean that_present_projectId = true && that.isSetProjectId();
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_departmentId = true && this.isSetDepartmentId();
    boolean that_present_departmentId = true && that.isSetDepartmentId();
    if (this_present_departmentId || that_present_departmentId) {
      if (!(this_present_departmentId && that_present_departmentId))
        return false;
      if (this.departmentId != that.departmentId)
        return false;
    }

    boolean this_present_creatorId = true && this.isSetCreatorId();
    boolean that_present_creatorId = true && that.isSetCreatorId();
    if (this_present_creatorId || that_present_creatorId) {
      if (!(this_present_creatorId && that_present_creatorId))
        return false;
      if (this.creatorId != that.creatorId)
        return false;
    }

    boolean this_present_createDepartmentId = true && this.isSetCreateDepartmentId();
    boolean that_present_createDepartmentId = true && that.isSetCreateDepartmentId();
    if (this_present_createDepartmentId || that_present_createDepartmentId) {
      if (!(this_present_createDepartmentId && that_present_createDepartmentId))
        return false;
      if (this.createDepartmentId != that.createDepartmentId)
        return false;
    }

    boolean this_present_valid = true && this.isSetValid();
    boolean that_present_valid = true && that.isSetValid();
    if (this_present_valid || that_present_valid) {
      if (!(this_present_valid && that_present_valid))
        return false;
      if (this.valid != that.valid)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_specification = true && (isSetSpecification());
    list.add(present_specification);
    if (present_specification)
      list.add(specification);

    boolean present_unitPrice = true && (isSetUnitPrice());
    list.add(present_unitPrice);
    if (present_unitPrice)
      list.add(unitPrice);

    boolean present_amount = true && (isSetAmount());
    list.add(present_amount);
    if (present_amount)
      list.add(amount);

    boolean present_measureWord = true && (isSetMeasureWord());
    list.add(present_measureWord);
    if (present_measureWord)
      list.add(measureWord);

    boolean present_payable = true && (isSetPayable());
    list.add(present_payable);
    if (present_payable)
      list.add(payable);

    boolean present_actuallyPaid = true && (isSetActuallyPaid());
    list.add(present_actuallyPaid);
    if (present_actuallyPaid)
      list.add(actuallyPaid);

    boolean present_medicalRecordNo = true && (isSetMedicalRecordNo());
    list.add(present_medicalRecordNo);
    if (present_medicalRecordNo)
      list.add(medicalRecordNo);

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status.getValue());

    boolean present_billingCategoryId = true && (isSetBillingCategoryId());
    list.add(present_billingCategoryId);
    if (present_billingCategoryId)
      list.add(billingCategoryId);

    boolean present_operatorId = true && (isSetOperatorId());
    list.add(present_operatorId);
    if (present_operatorId)
      list.add(operatorId);

    boolean present_operationTime = true && (isSetOperationTime());
    list.add(present_operationTime);
    if (present_operationTime)
      list.add(operationTime);

    boolean present_dailyKnot = true && (isSetDailyKnot());
    list.add(present_dailyKnot);
    if (present_dailyKnot)
      list.add(dailyKnot);

    boolean present_chargeSubjectId = true && (isSetChargeSubjectId());
    list.add(present_chargeSubjectId);
    if (present_chargeSubjectId)
      list.add(chargeSubjectId);

    boolean present_projectId = true && (isSetProjectId());
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_departmentId = true && (isSetDepartmentId());
    list.add(present_departmentId);
    if (present_departmentId)
      list.add(departmentId);

    boolean present_creatorId = true && (isSetCreatorId());
    list.add(present_creatorId);
    if (present_creatorId)
      list.add(creatorId);

    boolean present_createDepartmentId = true && (isSetCreateDepartmentId());
    list.add(present_createDepartmentId);
    if (present_createDepartmentId)
      list.add(createDepartmentId);

    boolean present_valid = true && (isSetValid());
    list.add(present_valid);
    if (present_valid)
      list.add(valid);

    return list.hashCode();
  }

  @Override
  public int compareTo(ChargeItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpecification()).compareTo(other.isSetSpecification());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpecification()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.specification, other.specification);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnitPrice()).compareTo(other.isSetUnitPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnitPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unitPrice, other.unitPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAmount()).compareTo(other.isSetAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amount, other.amount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMeasureWord()).compareTo(other.isSetMeasureWord());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMeasureWord()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.measureWord, other.measureWord);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayable()).compareTo(other.isSetPayable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payable, other.payable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActuallyPaid()).compareTo(other.isSetActuallyPaid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActuallyPaid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actuallyPaid, other.actuallyPaid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMedicalRecordNo()).compareTo(other.isSetMedicalRecordNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMedicalRecordNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.medicalRecordNo, other.medicalRecordNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBillingCategoryId()).compareTo(other.isSetBillingCategoryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBillingCategoryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.billingCategoryId, other.billingCategoryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperatorId()).compareTo(other.isSetOperatorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperatorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operatorId, other.operatorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperationTime()).compareTo(other.isSetOperationTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperationTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operationTime, other.operationTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDailyKnot()).compareTo(other.isSetDailyKnot());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDailyKnot()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dailyKnot, other.dailyKnot);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChargeSubjectId()).compareTo(other.isSetChargeSubjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChargeSubjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chargeSubjectId, other.chargeSubjectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDepartmentId()).compareTo(other.isSetDepartmentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepartmentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.departmentId, other.departmentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreatorId()).compareTo(other.isSetCreatorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creatorId, other.creatorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateDepartmentId()).compareTo(other.isSetCreateDepartmentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateDepartmentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createDepartmentId, other.createDepartmentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValid()).compareTo(other.isSetValid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.valid, other.valid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ChargeItem(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetSpecification()) {
      if (!first) sb.append(", ");
      sb.append("specification:");
      if (this.specification == null) {
        sb.append("null");
      } else {
        sb.append(this.specification);
      }
      first = false;
    }
    if (isSetUnitPrice()) {
      if (!first) sb.append(", ");
      sb.append("unitPrice:");
      sb.append(this.unitPrice);
      first = false;
    }
    if (isSetAmount()) {
      if (!first) sb.append(", ");
      sb.append("amount:");
      sb.append(this.amount);
      first = false;
    }
    if (isSetMeasureWord()) {
      if (!first) sb.append(", ");
      sb.append("measureWord:");
      if (this.measureWord == null) {
        sb.append("null");
      } else {
        sb.append(this.measureWord);
      }
      first = false;
    }
    if (isSetPayable()) {
      if (!first) sb.append(", ");
      sb.append("payable:");
      sb.append(this.payable);
      first = false;
    }
    if (isSetActuallyPaid()) {
      if (!first) sb.append(", ");
      sb.append("actuallyPaid:");
      sb.append(this.actuallyPaid);
      first = false;
    }
    if (isSetMedicalRecordNo()) {
      if (!first) sb.append(", ");
      sb.append("medicalRecordNo:");
      sb.append(this.medicalRecordNo);
      first = false;
    }
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
    }
    if (isSetBillingCategoryId()) {
      if (!first) sb.append(", ");
      sb.append("billingCategoryId:");
      sb.append(this.billingCategoryId);
      first = false;
    }
    if (isSetOperatorId()) {
      if (!first) sb.append(", ");
      sb.append("operatorId:");
      sb.append(this.operatorId);
      first = false;
    }
    if (isSetOperationTime()) {
      if (!first) sb.append(", ");
      sb.append("operationTime:");
      sb.append(this.operationTime);
      first = false;
    }
    if (isSetDailyKnot()) {
      if (!first) sb.append(", ");
      sb.append("dailyKnot:");
      sb.append(this.dailyKnot);
      first = false;
    }
    if (isSetChargeSubjectId()) {
      if (!first) sb.append(", ");
      sb.append("chargeSubjectId:");
      sb.append(this.chargeSubjectId);
      first = false;
    }
    if (isSetProjectId()) {
      if (!first) sb.append(", ");
      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
    }
    if (isSetDepartmentId()) {
      if (!first) sb.append(", ");
      sb.append("departmentId:");
      sb.append(this.departmentId);
      first = false;
    }
    if (isSetCreatorId()) {
      if (!first) sb.append(", ");
      sb.append("creatorId:");
      sb.append(this.creatorId);
      first = false;
    }
    if (isSetCreateDepartmentId()) {
      if (!first) sb.append(", ");
      sb.append("createDepartmentId:");
      sb.append(this.createDepartmentId);
      first = false;
    }
    if (isSetValid()) {
      if (!first) sb.append(", ");
      sb.append("valid:");
      sb.append(this.valid);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ChargeItemStandardSchemeFactory implements SchemeFactory {
    public ChargeItemStandardScheme getScheme() {
      return new ChargeItemStandardScheme();
    }
  }

  private static class ChargeItemStandardScheme extends StandardScheme<ChargeItem> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ChargeItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SPECIFICATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.specification = iprot.readString();
              struct.setSpecificationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // UNIT_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.unitPrice = iprot.readDouble();
              struct.setUnitPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.amount = iprot.readDouble();
              struct.setAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MEASURE_WORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.measureWord = iprot.readString();
              struct.setMeasureWordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PAYABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.payable = iprot.readDouble();
              struct.setPayableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ACTUALLY_PAID
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.actuallyPaid = iprot.readDouble();
              struct.setActuallyPaidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MEDICAL_RECORD_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.medicalRecordNo = iprot.readI64();
              struct.setMedicalRecordNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = top.itcat.rpc.service.model.ChargeItemStatusEnum.findByValue(iprot.readI32());
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // BILLING_CATEGORY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.billingCategoryId = iprot.readI64();
              struct.setBillingCategoryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // OPERATOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.operatorId = iprot.readI64();
              struct.setOperatorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // OPERATION_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.operationTime = iprot.readI64();
              struct.setOperationTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // DAILY_KNOT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.dailyKnot = iprot.readBool();
              struct.setDailyKnotIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CHARGE_SUBJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.chargeSubjectId = iprot.readI64();
              struct.setChargeSubjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.projectId = iprot.readI64();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // DEPARTMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.departmentId = iprot.readI64();
              struct.setDepartmentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // CREATOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.creatorId = iprot.readI64();
              struct.setCreatorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // CREATE_DEPARTMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createDepartmentId = iprot.readI64();
              struct.setCreateDepartmentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 255: // VALID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.valid = iprot.readI32();
              struct.setValidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ChargeItem struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.specification != null) {
        if (struct.isSetSpecification()) {
          oprot.writeFieldBegin(SPECIFICATION_FIELD_DESC);
          oprot.writeString(struct.specification);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetUnitPrice()) {
        oprot.writeFieldBegin(UNIT_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.unitPrice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAmount()) {
        oprot.writeFieldBegin(AMOUNT_FIELD_DESC);
        oprot.writeDouble(struct.amount);
        oprot.writeFieldEnd();
      }
      if (struct.measureWord != null) {
        if (struct.isSetMeasureWord()) {
          oprot.writeFieldBegin(MEASURE_WORD_FIELD_DESC);
          oprot.writeString(struct.measureWord);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPayable()) {
        oprot.writeFieldBegin(PAYABLE_FIELD_DESC);
        oprot.writeDouble(struct.payable);
        oprot.writeFieldEnd();
      }
      if (struct.isSetActuallyPaid()) {
        oprot.writeFieldBegin(ACTUALLY_PAID_FIELD_DESC);
        oprot.writeDouble(struct.actuallyPaid);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMedicalRecordNo()) {
        oprot.writeFieldBegin(MEDICAL_RECORD_NO_FIELD_DESC);
        oprot.writeI64(struct.medicalRecordNo);
        oprot.writeFieldEnd();
      }
      if (struct.status != null) {
        if (struct.isSetStatus()) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          oprot.writeI32(struct.status.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetBillingCategoryId()) {
        oprot.writeFieldBegin(BILLING_CATEGORY_ID_FIELD_DESC);
        oprot.writeI64(struct.billingCategoryId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOperatorId()) {
        oprot.writeFieldBegin(OPERATOR_ID_FIELD_DESC);
        oprot.writeI64(struct.operatorId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOperationTime()) {
        oprot.writeFieldBegin(OPERATION_TIME_FIELD_DESC);
        oprot.writeI64(struct.operationTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDailyKnot()) {
        oprot.writeFieldBegin(DAILY_KNOT_FIELD_DESC);
        oprot.writeBool(struct.dailyKnot);
        oprot.writeFieldEnd();
      }
      if (struct.isSetChargeSubjectId()) {
        oprot.writeFieldBegin(CHARGE_SUBJECT_ID_FIELD_DESC);
        oprot.writeI64(struct.chargeSubjectId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetProjectId()) {
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI64(struct.projectId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDepartmentId()) {
        oprot.writeFieldBegin(DEPARTMENT_ID_FIELD_DESC);
        oprot.writeI64(struct.departmentId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCreatorId()) {
        oprot.writeFieldBegin(CREATOR_ID_FIELD_DESC);
        oprot.writeI64(struct.creatorId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCreateDepartmentId()) {
        oprot.writeFieldBegin(CREATE_DEPARTMENT_ID_FIELD_DESC);
        oprot.writeI64(struct.createDepartmentId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetValid()) {
        oprot.writeFieldBegin(VALID_FIELD_DESC);
        oprot.writeI32(struct.valid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ChargeItemTupleSchemeFactory implements SchemeFactory {
    public ChargeItemTupleScheme getScheme() {
      return new ChargeItemTupleScheme();
    }
  }

  private static class ChargeItemTupleScheme extends TupleScheme<ChargeItem> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ChargeItem struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetSpecification()) {
        optionals.set(2);
      }
      if (struct.isSetUnitPrice()) {
        optionals.set(3);
      }
      if (struct.isSetAmount()) {
        optionals.set(4);
      }
      if (struct.isSetMeasureWord()) {
        optionals.set(5);
      }
      if (struct.isSetPayable()) {
        optionals.set(6);
      }
      if (struct.isSetActuallyPaid()) {
        optionals.set(7);
      }
      if (struct.isSetMedicalRecordNo()) {
        optionals.set(8);
      }
      if (struct.isSetStatus()) {
        optionals.set(9);
      }
      if (struct.isSetBillingCategoryId()) {
        optionals.set(10);
      }
      if (struct.isSetOperatorId()) {
        optionals.set(11);
      }
      if (struct.isSetOperationTime()) {
        optionals.set(12);
      }
      if (struct.isSetDailyKnot()) {
        optionals.set(13);
      }
      if (struct.isSetChargeSubjectId()) {
        optionals.set(14);
      }
      if (struct.isSetProjectId()) {
        optionals.set(15);
      }
      if (struct.isSetDepartmentId()) {
        optionals.set(16);
      }
      if (struct.isSetCreatorId()) {
        optionals.set(17);
      }
      if (struct.isSetCreateDepartmentId()) {
        optionals.set(18);
      }
      if (struct.isSetValid()) {
        optionals.set(19);
      }
      oprot.writeBitSet(optionals, 20);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetSpecification()) {
        oprot.writeString(struct.specification);
      }
      if (struct.isSetUnitPrice()) {
        oprot.writeDouble(struct.unitPrice);
      }
      if (struct.isSetAmount()) {
        oprot.writeDouble(struct.amount);
      }
      if (struct.isSetMeasureWord()) {
        oprot.writeString(struct.measureWord);
      }
      if (struct.isSetPayable()) {
        oprot.writeDouble(struct.payable);
      }
      if (struct.isSetActuallyPaid()) {
        oprot.writeDouble(struct.actuallyPaid);
      }
      if (struct.isSetMedicalRecordNo()) {
        oprot.writeI64(struct.medicalRecordNo);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status.getValue());
      }
      if (struct.isSetBillingCategoryId()) {
        oprot.writeI64(struct.billingCategoryId);
      }
      if (struct.isSetOperatorId()) {
        oprot.writeI64(struct.operatorId);
      }
      if (struct.isSetOperationTime()) {
        oprot.writeI64(struct.operationTime);
      }
      if (struct.isSetDailyKnot()) {
        oprot.writeBool(struct.dailyKnot);
      }
      if (struct.isSetChargeSubjectId()) {
        oprot.writeI64(struct.chargeSubjectId);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI64(struct.projectId);
      }
      if (struct.isSetDepartmentId()) {
        oprot.writeI64(struct.departmentId);
      }
      if (struct.isSetCreatorId()) {
        oprot.writeI64(struct.creatorId);
      }
      if (struct.isSetCreateDepartmentId()) {
        oprot.writeI64(struct.createDepartmentId);
      }
      if (struct.isSetValid()) {
        oprot.writeI32(struct.valid);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ChargeItem struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(20);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.specification = iprot.readString();
        struct.setSpecificationIsSet(true);
      }
      if (incoming.get(3)) {
        struct.unitPrice = iprot.readDouble();
        struct.setUnitPriceIsSet(true);
      }
      if (incoming.get(4)) {
        struct.amount = iprot.readDouble();
        struct.setAmountIsSet(true);
      }
      if (incoming.get(5)) {
        struct.measureWord = iprot.readString();
        struct.setMeasureWordIsSet(true);
      }
      if (incoming.get(6)) {
        struct.payable = iprot.readDouble();
        struct.setPayableIsSet(true);
      }
      if (incoming.get(7)) {
        struct.actuallyPaid = iprot.readDouble();
        struct.setActuallyPaidIsSet(true);
      }
      if (incoming.get(8)) {
        struct.medicalRecordNo = iprot.readI64();
        struct.setMedicalRecordNoIsSet(true);
      }
      if (incoming.get(9)) {
        struct.status = top.itcat.rpc.service.model.ChargeItemStatusEnum.findByValue(iprot.readI32());
        struct.setStatusIsSet(true);
      }
      if (incoming.get(10)) {
        struct.billingCategoryId = iprot.readI64();
        struct.setBillingCategoryIdIsSet(true);
      }
      if (incoming.get(11)) {
        struct.operatorId = iprot.readI64();
        struct.setOperatorIdIsSet(true);
      }
      if (incoming.get(12)) {
        struct.operationTime = iprot.readI64();
        struct.setOperationTimeIsSet(true);
      }
      if (incoming.get(13)) {
        struct.dailyKnot = iprot.readBool();
        struct.setDailyKnotIsSet(true);
      }
      if (incoming.get(14)) {
        struct.chargeSubjectId = iprot.readI64();
        struct.setChargeSubjectIdIsSet(true);
      }
      if (incoming.get(15)) {
        struct.projectId = iprot.readI64();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(16)) {
        struct.departmentId = iprot.readI64();
        struct.setDepartmentIdIsSet(true);
      }
      if (incoming.get(17)) {
        struct.creatorId = iprot.readI64();
        struct.setCreatorIdIsSet(true);
      }
      if (incoming.get(18)) {
        struct.createDepartmentId = iprot.readI64();
        struct.setCreateDepartmentIdIsSet(true);
      }
      if (incoming.get(19)) {
        struct.valid = iprot.readI32();
        struct.setValidIsSet(true);
      }
    }
  }

}

