/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package top.itcat.rpc.service.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2019-7-3")
public class PrescriptionHerb implements org.apache.thrift.TBase<PrescriptionHerb, PrescriptionHerb._Fields>, java.io.Serializable, Cloneable, Comparable<PrescriptionHerb> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PrescriptionHerb");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField MEDICAL_RECORD_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("medicalRecordNo", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("num", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField FREQUENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("frequency", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField USAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("usage", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField TREATMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("treatment", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField TREATMENT_DETAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("treatmentDetail", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ADVICE_FIELD_DESC = new org.apache.thrift.protocol.TField("advice", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("price", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("items", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField DOCTOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("doctorId", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("number", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField VALID_FIELD_DESC = new org.apache.thrift.protocol.TField("valid", org.apache.thrift.protocol.TType.I32, (short)255);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PrescriptionHerbStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PrescriptionHerbTupleSchemeFactory());
  }

  public long id; // optional
  public long medicalRecordNo; // optional
  /**
   * 
   * @see PrescriptionType
   */
  public PrescriptionType type; // optional
  public int num; // optional
  public int frequency; // optional
  public int usage; // optional
  public String treatment; // optional
  public String treatmentDetail; // optional
  public String advice; // optional
  public double price; // optional
  public List<PrescriptionHerbItem> items; // optional
  public long doctorId; // optional
  public int number; // optional
  /**
   * 
   * @see PrescriptionItemStatusEnum
   */
  public PrescriptionItemStatusEnum status; // optional
  public int valid; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    MEDICAL_RECORD_NO((short)2, "medicalRecordNo"),
    /**
     * 
     * @see PrescriptionType
     */
    TYPE((short)3, "type"),
    NUM((short)4, "num"),
    FREQUENCY((short)5, "frequency"),
    USAGE((short)6, "usage"),
    TREATMENT((short)7, "treatment"),
    TREATMENT_DETAIL((short)8, "treatmentDetail"),
    ADVICE((short)9, "advice"),
    PRICE((short)10, "price"),
    ITEMS((short)11, "items"),
    DOCTOR_ID((short)12, "doctorId"),
    NUMBER((short)13, "number"),
    /**
     * 
     * @see PrescriptionItemStatusEnum
     */
    STATUS((short)14, "status"),
    VALID((short)255, "valid");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // MEDICAL_RECORD_NO
          return MEDICAL_RECORD_NO;
        case 3: // TYPE
          return TYPE;
        case 4: // NUM
          return NUM;
        case 5: // FREQUENCY
          return FREQUENCY;
        case 6: // USAGE
          return USAGE;
        case 7: // TREATMENT
          return TREATMENT;
        case 8: // TREATMENT_DETAIL
          return TREATMENT_DETAIL;
        case 9: // ADVICE
          return ADVICE;
        case 10: // PRICE
          return PRICE;
        case 11: // ITEMS
          return ITEMS;
        case 12: // DOCTOR_ID
          return DOCTOR_ID;
        case 13: // NUMBER
          return NUMBER;
        case 14: // STATUS
          return STATUS;
        case 255: // VALID
          return VALID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __MEDICALRECORDNO_ISSET_ID = 1;
  private static final int __NUM_ISSET_ID = 2;
  private static final int __FREQUENCY_ISSET_ID = 3;
  private static final int __USAGE_ISSET_ID = 4;
  private static final int __PRICE_ISSET_ID = 5;
  private static final int __DOCTORID_ISSET_ID = 6;
  private static final int __NUMBER_ISSET_ID = 7;
  private static final int __VALID_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.MEDICAL_RECORD_NO,_Fields.TYPE,_Fields.NUM,_Fields.FREQUENCY,_Fields.USAGE,_Fields.TREATMENT,_Fields.TREATMENT_DETAIL,_Fields.ADVICE,_Fields.PRICE,_Fields.ITEMS,_Fields.DOCTOR_ID,_Fields.NUMBER,_Fields.STATUS,_Fields.VALID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MEDICAL_RECORD_NO, new org.apache.thrift.meta_data.FieldMetaData("medicalRecordNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PrescriptionType.class)));
    tmpMap.put(_Fields.NUM, new org.apache.thrift.meta_data.FieldMetaData("num", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FREQUENCY, new org.apache.thrift.meta_data.FieldMetaData("frequency", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USAGE, new org.apache.thrift.meta_data.FieldMetaData("usage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TREATMENT, new org.apache.thrift.meta_data.FieldMetaData("treatment", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TREATMENT_DETAIL, new org.apache.thrift.meta_data.FieldMetaData("treatmentDetail", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADVICE, new org.apache.thrift.meta_data.FieldMetaData("advice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRICE, new org.apache.thrift.meta_data.FieldMetaData("price", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ITEMS, new org.apache.thrift.meta_data.FieldMetaData("items", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "PrescriptionHerbItem"))));
    tmpMap.put(_Fields.DOCTOR_ID, new org.apache.thrift.meta_data.FieldMetaData("doctorId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NUMBER, new org.apache.thrift.meta_data.FieldMetaData("number", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PrescriptionItemStatusEnum.class)));
    tmpMap.put(_Fields.VALID, new org.apache.thrift.meta_data.FieldMetaData("valid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PrescriptionHerb.class, metaDataMap);
  }

  public PrescriptionHerb() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PrescriptionHerb(PrescriptionHerb other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.medicalRecordNo = other.medicalRecordNo;
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.num = other.num;
    this.frequency = other.frequency;
    this.usage = other.usage;
    if (other.isSetTreatment()) {
      this.treatment = other.treatment;
    }
    if (other.isSetTreatmentDetail()) {
      this.treatmentDetail = other.treatmentDetail;
    }
    if (other.isSetAdvice()) {
      this.advice = other.advice;
    }
    this.price = other.price;
    if (other.isSetItems()) {
      List<PrescriptionHerbItem> __this__items = new ArrayList<PrescriptionHerbItem>(other.items.size());
      for (PrescriptionHerbItem other_element : other.items) {
        __this__items.add(other_element);
      }
      this.items = __this__items;
    }
    this.doctorId = other.doctorId;
    this.number = other.number;
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    this.valid = other.valid;
  }

  public PrescriptionHerb deepCopy() {
    return new PrescriptionHerb(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setMedicalRecordNoIsSet(false);
    this.medicalRecordNo = 0;
    this.type = null;
    setNumIsSet(false);
    this.num = 0;
    setFrequencyIsSet(false);
    this.frequency = 0;
    setUsageIsSet(false);
    this.usage = 0;
    this.treatment = null;
    this.treatmentDetail = null;
    this.advice = null;
    setPriceIsSet(false);
    this.price = 0.0;
    this.items = null;
    setDoctorIdIsSet(false);
    this.doctorId = 0;
    setNumberIsSet(false);
    this.number = 0;
    this.status = null;
    setValidIsSet(false);
    this.valid = 0;
  }

  public long getId() {
    return this.id;
  }

  public PrescriptionHerb setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public long getMedicalRecordNo() {
    return this.medicalRecordNo;
  }

  public PrescriptionHerb setMedicalRecordNo(long medicalRecordNo) {
    this.medicalRecordNo = medicalRecordNo;
    setMedicalRecordNoIsSet(true);
    return this;
  }

  public void unsetMedicalRecordNo() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEDICALRECORDNO_ISSET_ID);
  }

  /** Returns true if field medicalRecordNo is set (has been assigned a value) and false otherwise */
  public boolean isSetMedicalRecordNo() {
    return EncodingUtils.testBit(__isset_bitfield, __MEDICALRECORDNO_ISSET_ID);
  }

  public void setMedicalRecordNoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEDICALRECORDNO_ISSET_ID, value);
  }

  /**
   * 
   * @see PrescriptionType
   */
  public PrescriptionType getType() {
    return this.type;
  }

  /**
   * 
   * @see PrescriptionType
   */
  public PrescriptionHerb setType(PrescriptionType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public int getNum() {
    return this.num;
  }

  public PrescriptionHerb setNum(int num) {
    this.num = num;
    setNumIsSet(true);
    return this;
  }

  public void unsetNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_ISSET_ID);
  }

  /** Returns true if field num is set (has been assigned a value) and false otherwise */
  public boolean isSetNum() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_ISSET_ID);
  }

  public void setNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_ISSET_ID, value);
  }

  public int getFrequency() {
    return this.frequency;
  }

  public PrescriptionHerb setFrequency(int frequency) {
    this.frequency = frequency;
    setFrequencyIsSet(true);
    return this;
  }

  public void unsetFrequency() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FREQUENCY_ISSET_ID);
  }

  /** Returns true if field frequency is set (has been assigned a value) and false otherwise */
  public boolean isSetFrequency() {
    return EncodingUtils.testBit(__isset_bitfield, __FREQUENCY_ISSET_ID);
  }

  public void setFrequencyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FREQUENCY_ISSET_ID, value);
  }

  public int getUsage() {
    return this.usage;
  }

  public PrescriptionHerb setUsage(int usage) {
    this.usage = usage;
    setUsageIsSet(true);
    return this;
  }

  public void unsetUsage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USAGE_ISSET_ID);
  }

  /** Returns true if field usage is set (has been assigned a value) and false otherwise */
  public boolean isSetUsage() {
    return EncodingUtils.testBit(__isset_bitfield, __USAGE_ISSET_ID);
  }

  public void setUsageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USAGE_ISSET_ID, value);
  }

  public String getTreatment() {
    return this.treatment;
  }

  public PrescriptionHerb setTreatment(String treatment) {
    this.treatment = treatment;
    return this;
  }

  public void unsetTreatment() {
    this.treatment = null;
  }

  /** Returns true if field treatment is set (has been assigned a value) and false otherwise */
  public boolean isSetTreatment() {
    return this.treatment != null;
  }

  public void setTreatmentIsSet(boolean value) {
    if (!value) {
      this.treatment = null;
    }
  }

  public String getTreatmentDetail() {
    return this.treatmentDetail;
  }

  public PrescriptionHerb setTreatmentDetail(String treatmentDetail) {
    this.treatmentDetail = treatmentDetail;
    return this;
  }

  public void unsetTreatmentDetail() {
    this.treatmentDetail = null;
  }

  /** Returns true if field treatmentDetail is set (has been assigned a value) and false otherwise */
  public boolean isSetTreatmentDetail() {
    return this.treatmentDetail != null;
  }

  public void setTreatmentDetailIsSet(boolean value) {
    if (!value) {
      this.treatmentDetail = null;
    }
  }

  public String getAdvice() {
    return this.advice;
  }

  public PrescriptionHerb setAdvice(String advice) {
    this.advice = advice;
    return this;
  }

  public void unsetAdvice() {
    this.advice = null;
  }

  /** Returns true if field advice is set (has been assigned a value) and false otherwise */
  public boolean isSetAdvice() {
    return this.advice != null;
  }

  public void setAdviceIsSet(boolean value) {
    if (!value) {
      this.advice = null;
    }
  }

  public double getPrice() {
    return this.price;
  }

  public PrescriptionHerb setPrice(double price) {
    this.price = price;
    setPriceIsSet(true);
    return this;
  }

  public void unsetPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  /** Returns true if field price is set (has been assigned a value) and false otherwise */
  public boolean isSetPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  public void setPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRICE_ISSET_ID, value);
  }

  public int getItemsSize() {
    return (this.items == null) ? 0 : this.items.size();
  }

  public java.util.Iterator<PrescriptionHerbItem> getItemsIterator() {
    return (this.items == null) ? null : this.items.iterator();
  }

  public void addToItems(PrescriptionHerbItem elem) {
    if (this.items == null) {
      this.items = new ArrayList<PrescriptionHerbItem>();
    }
    this.items.add(elem);
  }

  public List<PrescriptionHerbItem> getItems() {
    return this.items;
  }

  public PrescriptionHerb setItems(List<PrescriptionHerbItem> items) {
    this.items = items;
    return this;
  }

  public void unsetItems() {
    this.items = null;
  }

  /** Returns true if field items is set (has been assigned a value) and false otherwise */
  public boolean isSetItems() {
    return this.items != null;
  }

  public void setItemsIsSet(boolean value) {
    if (!value) {
      this.items = null;
    }
  }

  public long getDoctorId() {
    return this.doctorId;
  }

  public PrescriptionHerb setDoctorId(long doctorId) {
    this.doctorId = doctorId;
    setDoctorIdIsSet(true);
    return this;
  }

  public void unsetDoctorId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DOCTORID_ISSET_ID);
  }

  /** Returns true if field doctorId is set (has been assigned a value) and false otherwise */
  public boolean isSetDoctorId() {
    return EncodingUtils.testBit(__isset_bitfield, __DOCTORID_ISSET_ID);
  }

  public void setDoctorIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DOCTORID_ISSET_ID, value);
  }

  public int getNumber() {
    return this.number;
  }

  public PrescriptionHerb setNumber(int number) {
    this.number = number;
    setNumberIsSet(true);
    return this;
  }

  public void unsetNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMBER_ISSET_ID);
  }

  /** Returns true if field number is set (has been assigned a value) and false otherwise */
  public boolean isSetNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMBER_ISSET_ID);
  }

  public void setNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMBER_ISSET_ID, value);
  }

  /**
   * 
   * @see PrescriptionItemStatusEnum
   */
  public PrescriptionItemStatusEnum getStatus() {
    return this.status;
  }

  /**
   * 
   * @see PrescriptionItemStatusEnum
   */
  public PrescriptionHerb setStatus(PrescriptionItemStatusEnum status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public int getValid() {
    return this.valid;
  }

  public PrescriptionHerb setValid(int valid) {
    this.valid = valid;
    setValidIsSet(true);
    return this;
  }

  public void unsetValid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VALID_ISSET_ID);
  }

  /** Returns true if field valid is set (has been assigned a value) and false otherwise */
  public boolean isSetValid() {
    return EncodingUtils.testBit(__isset_bitfield, __VALID_ISSET_ID);
  }

  public void setValidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VALID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case MEDICAL_RECORD_NO:
      if (value == null) {
        unsetMedicalRecordNo();
      } else {
        setMedicalRecordNo((Long)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((PrescriptionType)value);
      }
      break;

    case NUM:
      if (value == null) {
        unsetNum();
      } else {
        setNum((Integer)value);
      }
      break;

    case FREQUENCY:
      if (value == null) {
        unsetFrequency();
      } else {
        setFrequency((Integer)value);
      }
      break;

    case USAGE:
      if (value == null) {
        unsetUsage();
      } else {
        setUsage((Integer)value);
      }
      break;

    case TREATMENT:
      if (value == null) {
        unsetTreatment();
      } else {
        setTreatment((String)value);
      }
      break;

    case TREATMENT_DETAIL:
      if (value == null) {
        unsetTreatmentDetail();
      } else {
        setTreatmentDetail((String)value);
      }
      break;

    case ADVICE:
      if (value == null) {
        unsetAdvice();
      } else {
        setAdvice((String)value);
      }
      break;

    case PRICE:
      if (value == null) {
        unsetPrice();
      } else {
        setPrice((Double)value);
      }
      break;

    case ITEMS:
      if (value == null) {
        unsetItems();
      } else {
        setItems((List<PrescriptionHerbItem>)value);
      }
      break;

    case DOCTOR_ID:
      if (value == null) {
        unsetDoctorId();
      } else {
        setDoctorId((Long)value);
      }
      break;

    case NUMBER:
      if (value == null) {
        unsetNumber();
      } else {
        setNumber((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((PrescriptionItemStatusEnum)value);
      }
      break;

    case VALID:
      if (value == null) {
        unsetValid();
      } else {
        setValid((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case MEDICAL_RECORD_NO:
      return Long.valueOf(getMedicalRecordNo());

    case TYPE:
      return getType();

    case NUM:
      return Integer.valueOf(getNum());

    case FREQUENCY:
      return Integer.valueOf(getFrequency());

    case USAGE:
      return Integer.valueOf(getUsage());

    case TREATMENT:
      return getTreatment();

    case TREATMENT_DETAIL:
      return getTreatmentDetail();

    case ADVICE:
      return getAdvice();

    case PRICE:
      return Double.valueOf(getPrice());

    case ITEMS:
      return getItems();

    case DOCTOR_ID:
      return Long.valueOf(getDoctorId());

    case NUMBER:
      return Integer.valueOf(getNumber());

    case STATUS:
      return getStatus();

    case VALID:
      return Integer.valueOf(getValid());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case MEDICAL_RECORD_NO:
      return isSetMedicalRecordNo();
    case TYPE:
      return isSetType();
    case NUM:
      return isSetNum();
    case FREQUENCY:
      return isSetFrequency();
    case USAGE:
      return isSetUsage();
    case TREATMENT:
      return isSetTreatment();
    case TREATMENT_DETAIL:
      return isSetTreatmentDetail();
    case ADVICE:
      return isSetAdvice();
    case PRICE:
      return isSetPrice();
    case ITEMS:
      return isSetItems();
    case DOCTOR_ID:
      return isSetDoctorId();
    case NUMBER:
      return isSetNumber();
    case STATUS:
      return isSetStatus();
    case VALID:
      return isSetValid();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PrescriptionHerb)
      return this.equals((PrescriptionHerb)that);
    return false;
  }

  public boolean equals(PrescriptionHerb that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_medicalRecordNo = true && this.isSetMedicalRecordNo();
    boolean that_present_medicalRecordNo = true && that.isSetMedicalRecordNo();
    if (this_present_medicalRecordNo || that_present_medicalRecordNo) {
      if (!(this_present_medicalRecordNo && that_present_medicalRecordNo))
        return false;
      if (this.medicalRecordNo != that.medicalRecordNo)
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_num = true && this.isSetNum();
    boolean that_present_num = true && that.isSetNum();
    if (this_present_num || that_present_num) {
      if (!(this_present_num && that_present_num))
        return false;
      if (this.num != that.num)
        return false;
    }

    boolean this_present_frequency = true && this.isSetFrequency();
    boolean that_present_frequency = true && that.isSetFrequency();
    if (this_present_frequency || that_present_frequency) {
      if (!(this_present_frequency && that_present_frequency))
        return false;
      if (this.frequency != that.frequency)
        return false;
    }

    boolean this_present_usage = true && this.isSetUsage();
    boolean that_present_usage = true && that.isSetUsage();
    if (this_present_usage || that_present_usage) {
      if (!(this_present_usage && that_present_usage))
        return false;
      if (this.usage != that.usage)
        return false;
    }

    boolean this_present_treatment = true && this.isSetTreatment();
    boolean that_present_treatment = true && that.isSetTreatment();
    if (this_present_treatment || that_present_treatment) {
      if (!(this_present_treatment && that_present_treatment))
        return false;
      if (!this.treatment.equals(that.treatment))
        return false;
    }

    boolean this_present_treatmentDetail = true && this.isSetTreatmentDetail();
    boolean that_present_treatmentDetail = true && that.isSetTreatmentDetail();
    if (this_present_treatmentDetail || that_present_treatmentDetail) {
      if (!(this_present_treatmentDetail && that_present_treatmentDetail))
        return false;
      if (!this.treatmentDetail.equals(that.treatmentDetail))
        return false;
    }

    boolean this_present_advice = true && this.isSetAdvice();
    boolean that_present_advice = true && that.isSetAdvice();
    if (this_present_advice || that_present_advice) {
      if (!(this_present_advice && that_present_advice))
        return false;
      if (!this.advice.equals(that.advice))
        return false;
    }

    boolean this_present_price = true && this.isSetPrice();
    boolean that_present_price = true && that.isSetPrice();
    if (this_present_price || that_present_price) {
      if (!(this_present_price && that_present_price))
        return false;
      if (this.price != that.price)
        return false;
    }

    boolean this_present_items = true && this.isSetItems();
    boolean that_present_items = true && that.isSetItems();
    if (this_present_items || that_present_items) {
      if (!(this_present_items && that_present_items))
        return false;
      if (!this.items.equals(that.items))
        return false;
    }

    boolean this_present_doctorId = true && this.isSetDoctorId();
    boolean that_present_doctorId = true && that.isSetDoctorId();
    if (this_present_doctorId || that_present_doctorId) {
      if (!(this_present_doctorId && that_present_doctorId))
        return false;
      if (this.doctorId != that.doctorId)
        return false;
    }

    boolean this_present_number = true && this.isSetNumber();
    boolean that_present_number = true && that.isSetNumber();
    if (this_present_number || that_present_number) {
      if (!(this_present_number && that_present_number))
        return false;
      if (this.number != that.number)
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_valid = true && this.isSetValid();
    boolean that_present_valid = true && that.isSetValid();
    if (this_present_valid || that_present_valid) {
      if (!(this_present_valid && that_present_valid))
        return false;
      if (this.valid != that.valid)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_medicalRecordNo = true && (isSetMedicalRecordNo());
    list.add(present_medicalRecordNo);
    if (present_medicalRecordNo)
      list.add(medicalRecordNo);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type.getValue());

    boolean present_num = true && (isSetNum());
    list.add(present_num);
    if (present_num)
      list.add(num);

    boolean present_frequency = true && (isSetFrequency());
    list.add(present_frequency);
    if (present_frequency)
      list.add(frequency);

    boolean present_usage = true && (isSetUsage());
    list.add(present_usage);
    if (present_usage)
      list.add(usage);

    boolean present_treatment = true && (isSetTreatment());
    list.add(present_treatment);
    if (present_treatment)
      list.add(treatment);

    boolean present_treatmentDetail = true && (isSetTreatmentDetail());
    list.add(present_treatmentDetail);
    if (present_treatmentDetail)
      list.add(treatmentDetail);

    boolean present_advice = true && (isSetAdvice());
    list.add(present_advice);
    if (present_advice)
      list.add(advice);

    boolean present_price = true && (isSetPrice());
    list.add(present_price);
    if (present_price)
      list.add(price);

    boolean present_items = true && (isSetItems());
    list.add(present_items);
    if (present_items)
      list.add(items);

    boolean present_doctorId = true && (isSetDoctorId());
    list.add(present_doctorId);
    if (present_doctorId)
      list.add(doctorId);

    boolean present_number = true && (isSetNumber());
    list.add(present_number);
    if (present_number)
      list.add(number);

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status.getValue());

    boolean present_valid = true && (isSetValid());
    list.add(present_valid);
    if (present_valid)
      list.add(valid);

    return list.hashCode();
  }

  @Override
  public int compareTo(PrescriptionHerb other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMedicalRecordNo()).compareTo(other.isSetMedicalRecordNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMedicalRecordNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.medicalRecordNo, other.medicalRecordNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum()).compareTo(other.isSetNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num, other.num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrequency()).compareTo(other.isSetFrequency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrequency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frequency, other.frequency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsage()).compareTo(other.isSetUsage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.usage, other.usage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTreatment()).compareTo(other.isSetTreatment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTreatment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.treatment, other.treatment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTreatmentDetail()).compareTo(other.isSetTreatmentDetail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTreatmentDetail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.treatmentDetail, other.treatmentDetail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdvice()).compareTo(other.isSetAdvice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdvice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.advice, other.advice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrice()).compareTo(other.isSetPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.price, other.price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItems()).compareTo(other.isSetItems());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItems()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.items, other.items);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDoctorId()).compareTo(other.isSetDoctorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDoctorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doctorId, other.doctorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumber()).compareTo(other.isSetNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number, other.number);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValid()).compareTo(other.isSetValid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.valid, other.valid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PrescriptionHerb(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetMedicalRecordNo()) {
      if (!first) sb.append(", ");
      sb.append("medicalRecordNo:");
      sb.append(this.medicalRecordNo);
      first = false;
    }
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    if (isSetNum()) {
      if (!first) sb.append(", ");
      sb.append("num:");
      sb.append(this.num);
      first = false;
    }
    if (isSetFrequency()) {
      if (!first) sb.append(", ");
      sb.append("frequency:");
      sb.append(this.frequency);
      first = false;
    }
    if (isSetUsage()) {
      if (!first) sb.append(", ");
      sb.append("usage:");
      sb.append(this.usage);
      first = false;
    }
    if (isSetTreatment()) {
      if (!first) sb.append(", ");
      sb.append("treatment:");
      if (this.treatment == null) {
        sb.append("null");
      } else {
        sb.append(this.treatment);
      }
      first = false;
    }
    if (isSetTreatmentDetail()) {
      if (!first) sb.append(", ");
      sb.append("treatmentDetail:");
      if (this.treatmentDetail == null) {
        sb.append("null");
      } else {
        sb.append(this.treatmentDetail);
      }
      first = false;
    }
    if (isSetAdvice()) {
      if (!first) sb.append(", ");
      sb.append("advice:");
      if (this.advice == null) {
        sb.append("null");
      } else {
        sb.append(this.advice);
      }
      first = false;
    }
    if (isSetPrice()) {
      if (!first) sb.append(", ");
      sb.append("price:");
      sb.append(this.price);
      first = false;
    }
    if (isSetItems()) {
      if (!first) sb.append(", ");
      sb.append("items:");
      if (this.items == null) {
        sb.append("null");
      } else {
        sb.append(this.items);
      }
      first = false;
    }
    if (isSetDoctorId()) {
      if (!first) sb.append(", ");
      sb.append("doctorId:");
      sb.append(this.doctorId);
      first = false;
    }
    if (isSetNumber()) {
      if (!first) sb.append(", ");
      sb.append("number:");
      sb.append(this.number);
      first = false;
    }
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
    }
    if (isSetValid()) {
      if (!first) sb.append(", ");
      sb.append("valid:");
      sb.append(this.valid);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PrescriptionHerbStandardSchemeFactory implements SchemeFactory {
    public PrescriptionHerbStandardScheme getScheme() {
      return new PrescriptionHerbStandardScheme();
    }
  }

  private static class PrescriptionHerbStandardScheme extends StandardScheme<PrescriptionHerb> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PrescriptionHerb struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MEDICAL_RECORD_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.medicalRecordNo = iprot.readI64();
              struct.setMedicalRecordNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = top.itcat.rpc.service.model.PrescriptionType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num = iprot.readI32();
              struct.setNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FREQUENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.frequency = iprot.readI32();
              struct.setFrequencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // USAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.usage = iprot.readI32();
              struct.setUsageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TREATMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.treatment = iprot.readString();
              struct.setTreatmentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TREATMENT_DETAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.treatmentDetail = iprot.readString();
              struct.setTreatmentDetailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ADVICE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.advice = iprot.readString();
              struct.setAdviceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.price = iprot.readDouble();
              struct.setPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ITEMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.items = new ArrayList<PrescriptionHerbItem>(_list8.size);
                PrescriptionHerbItem _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new PrescriptionHerbItem();
                  _elem9.read(iprot);
                  struct.items.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setItemsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // DOCTOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.doctorId = iprot.readI64();
              struct.setDoctorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.number = iprot.readI32();
              struct.setNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = top.itcat.rpc.service.model.PrescriptionItemStatusEnum.findByValue(iprot.readI32());
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 255: // VALID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.valid = iprot.readI32();
              struct.setValidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PrescriptionHerb struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMedicalRecordNo()) {
        oprot.writeFieldBegin(MEDICAL_RECORD_NO_FIELD_DESC);
        oprot.writeI64(struct.medicalRecordNo);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeI32(struct.type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetNum()) {
        oprot.writeFieldBegin(NUM_FIELD_DESC);
        oprot.writeI32(struct.num);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFrequency()) {
        oprot.writeFieldBegin(FREQUENCY_FIELD_DESC);
        oprot.writeI32(struct.frequency);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUsage()) {
        oprot.writeFieldBegin(USAGE_FIELD_DESC);
        oprot.writeI32(struct.usage);
        oprot.writeFieldEnd();
      }
      if (struct.treatment != null) {
        if (struct.isSetTreatment()) {
          oprot.writeFieldBegin(TREATMENT_FIELD_DESC);
          oprot.writeString(struct.treatment);
          oprot.writeFieldEnd();
        }
      }
      if (struct.treatmentDetail != null) {
        if (struct.isSetTreatmentDetail()) {
          oprot.writeFieldBegin(TREATMENT_DETAIL_FIELD_DESC);
          oprot.writeString(struct.treatmentDetail);
          oprot.writeFieldEnd();
        }
      }
      if (struct.advice != null) {
        if (struct.isSetAdvice()) {
          oprot.writeFieldBegin(ADVICE_FIELD_DESC);
          oprot.writeString(struct.advice);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPrice()) {
        oprot.writeFieldBegin(PRICE_FIELD_DESC);
        oprot.writeDouble(struct.price);
        oprot.writeFieldEnd();
      }
      if (struct.items != null) {
        if (struct.isSetItems()) {
          oprot.writeFieldBegin(ITEMS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.items.size()));
            for (PrescriptionHerbItem _iter11 : struct.items)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDoctorId()) {
        oprot.writeFieldBegin(DOCTOR_ID_FIELD_DESC);
        oprot.writeI64(struct.doctorId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNumber()) {
        oprot.writeFieldBegin(NUMBER_FIELD_DESC);
        oprot.writeI32(struct.number);
        oprot.writeFieldEnd();
      }
      if (struct.status != null) {
        if (struct.isSetStatus()) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          oprot.writeI32(struct.status.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetValid()) {
        oprot.writeFieldBegin(VALID_FIELD_DESC);
        oprot.writeI32(struct.valid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PrescriptionHerbTupleSchemeFactory implements SchemeFactory {
    public PrescriptionHerbTupleScheme getScheme() {
      return new PrescriptionHerbTupleScheme();
    }
  }

  private static class PrescriptionHerbTupleScheme extends TupleScheme<PrescriptionHerb> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PrescriptionHerb struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetMedicalRecordNo()) {
        optionals.set(1);
      }
      if (struct.isSetType()) {
        optionals.set(2);
      }
      if (struct.isSetNum()) {
        optionals.set(3);
      }
      if (struct.isSetFrequency()) {
        optionals.set(4);
      }
      if (struct.isSetUsage()) {
        optionals.set(5);
      }
      if (struct.isSetTreatment()) {
        optionals.set(6);
      }
      if (struct.isSetTreatmentDetail()) {
        optionals.set(7);
      }
      if (struct.isSetAdvice()) {
        optionals.set(8);
      }
      if (struct.isSetPrice()) {
        optionals.set(9);
      }
      if (struct.isSetItems()) {
        optionals.set(10);
      }
      if (struct.isSetDoctorId()) {
        optionals.set(11);
      }
      if (struct.isSetNumber()) {
        optionals.set(12);
      }
      if (struct.isSetStatus()) {
        optionals.set(13);
      }
      if (struct.isSetValid()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetMedicalRecordNo()) {
        oprot.writeI64(struct.medicalRecordNo);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetNum()) {
        oprot.writeI32(struct.num);
      }
      if (struct.isSetFrequency()) {
        oprot.writeI32(struct.frequency);
      }
      if (struct.isSetUsage()) {
        oprot.writeI32(struct.usage);
      }
      if (struct.isSetTreatment()) {
        oprot.writeString(struct.treatment);
      }
      if (struct.isSetTreatmentDetail()) {
        oprot.writeString(struct.treatmentDetail);
      }
      if (struct.isSetAdvice()) {
        oprot.writeString(struct.advice);
      }
      if (struct.isSetPrice()) {
        oprot.writeDouble(struct.price);
      }
      if (struct.isSetItems()) {
        {
          oprot.writeI32(struct.items.size());
          for (PrescriptionHerbItem _iter12 : struct.items)
          {
            _iter12.write(oprot);
          }
        }
      }
      if (struct.isSetDoctorId()) {
        oprot.writeI64(struct.doctorId);
      }
      if (struct.isSetNumber()) {
        oprot.writeI32(struct.number);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status.getValue());
      }
      if (struct.isSetValid()) {
        oprot.writeI32(struct.valid);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PrescriptionHerb struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.medicalRecordNo = iprot.readI64();
        struct.setMedicalRecordNoIsSet(true);
      }
      if (incoming.get(2)) {
        struct.type = top.itcat.rpc.service.model.PrescriptionType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.num = iprot.readI32();
        struct.setNumIsSet(true);
      }
      if (incoming.get(4)) {
        struct.frequency = iprot.readI32();
        struct.setFrequencyIsSet(true);
      }
      if (incoming.get(5)) {
        struct.usage = iprot.readI32();
        struct.setUsageIsSet(true);
      }
      if (incoming.get(6)) {
        struct.treatment = iprot.readString();
        struct.setTreatmentIsSet(true);
      }
      if (incoming.get(7)) {
        struct.treatmentDetail = iprot.readString();
        struct.setTreatmentDetailIsSet(true);
      }
      if (incoming.get(8)) {
        struct.advice = iprot.readString();
        struct.setAdviceIsSet(true);
      }
      if (incoming.get(9)) {
        struct.price = iprot.readDouble();
        struct.setPriceIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.items = new ArrayList<PrescriptionHerbItem>(_list13.size);
          PrescriptionHerbItem _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = new PrescriptionHerbItem();
            _elem14.read(iprot);
            struct.items.add(_elem14);
          }
        }
        struct.setItemsIsSet(true);
      }
      if (incoming.get(11)) {
        struct.doctorId = iprot.readI64();
        struct.setDoctorIdIsSet(true);
      }
      if (incoming.get(12)) {
        struct.number = iprot.readI32();
        struct.setNumberIsSet(true);
      }
      if (incoming.get(13)) {
        struct.status = top.itcat.rpc.service.model.PrescriptionItemStatusEnum.findByValue(iprot.readI32());
        struct.setStatusIsSet(true);
      }
      if (incoming.get(14)) {
        struct.valid = iprot.readI32();
        struct.setValidIsSet(true);
      }
    }
  }

}

