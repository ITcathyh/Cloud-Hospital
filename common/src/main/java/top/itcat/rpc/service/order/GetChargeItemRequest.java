/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package top.itcat.rpc.service.order;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2019-7-3")
public class GetChargeItemRequest implements org.apache.thrift.TBase<GetChargeItemRequest, GetChargeItemRequest._Fields>, java.io.Serializable, Cloneable, Comparable<GetChargeItemRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetChargeItemRequest");

  private static final org.apache.thrift.protocol.TField IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ids", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField OPERATOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("operatorId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField MEDICAL_RECORD_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("medicalRecordNo", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField DEPARTMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("departmentId", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField PROJECT_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("projectIds", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField CHARGE_SUBJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("chargeSubjectId", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField CAN_DAY_KNOT_FIELD_DESC = new org.apache.thrift.protocol.TField("canDayKnot", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I32, (short)254);
  private static final org.apache.thrift.protocol.TField LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("limit", org.apache.thrift.protocol.TType.I32, (short)255);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GetChargeItemRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GetChargeItemRequestTupleSchemeFactory());
  }

  public List<Long> ids; // optional
  public long operatorId; // optional
  public long endTime; // optional
  public long medicalRecordNo; // optional
  public long departmentId; // optional
  public List<Long> projectIds; // optional
  public long chargeSubjectId; // optional
  public boolean canDayKnot; // optional
  public int offset; // optional
  public int limit; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    IDS((short)1, "ids"),
    OPERATOR_ID((short)2, "operatorId"),
    END_TIME((short)3, "endTime"),
    MEDICAL_RECORD_NO((short)4, "medicalRecordNo"),
    DEPARTMENT_ID((short)5, "departmentId"),
    PROJECT_IDS((short)6, "projectIds"),
    CHARGE_SUBJECT_ID((short)7, "chargeSubjectId"),
    CAN_DAY_KNOT((short)8, "canDayKnot"),
    OFFSET((short)254, "offset"),
    LIMIT((short)255, "limit");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IDS
          return IDS;
        case 2: // OPERATOR_ID
          return OPERATOR_ID;
        case 3: // END_TIME
          return END_TIME;
        case 4: // MEDICAL_RECORD_NO
          return MEDICAL_RECORD_NO;
        case 5: // DEPARTMENT_ID
          return DEPARTMENT_ID;
        case 6: // PROJECT_IDS
          return PROJECT_IDS;
        case 7: // CHARGE_SUBJECT_ID
          return CHARGE_SUBJECT_ID;
        case 8: // CAN_DAY_KNOT
          return CAN_DAY_KNOT;
        case 254: // OFFSET
          return OFFSET;
        case 255: // LIMIT
          return LIMIT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __OPERATORID_ISSET_ID = 0;
  private static final int __ENDTIME_ISSET_ID = 1;
  private static final int __MEDICALRECORDNO_ISSET_ID = 2;
  private static final int __DEPARTMENTID_ISSET_ID = 3;
  private static final int __CHARGESUBJECTID_ISSET_ID = 4;
  private static final int __CANDAYKNOT_ISSET_ID = 5;
  private static final int __OFFSET_ISSET_ID = 6;
  private static final int __LIMIT_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.IDS,_Fields.OPERATOR_ID,_Fields.END_TIME,_Fields.MEDICAL_RECORD_NO,_Fields.DEPARTMENT_ID,_Fields.PROJECT_IDS,_Fields.CHARGE_SUBJECT_ID,_Fields.CAN_DAY_KNOT,_Fields.OFFSET,_Fields.LIMIT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IDS, new org.apache.thrift.meta_data.FieldMetaData("ids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.OPERATOR_ID, new org.apache.thrift.meta_data.FieldMetaData("operatorId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MEDICAL_RECORD_NO, new org.apache.thrift.meta_data.FieldMetaData("medicalRecordNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DEPARTMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("departmentId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PROJECT_IDS, new org.apache.thrift.meta_data.FieldMetaData("projectIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.CHARGE_SUBJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("chargeSubjectId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CAN_DAY_KNOT, new org.apache.thrift.meta_data.FieldMetaData("canDayKnot", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LIMIT, new org.apache.thrift.meta_data.FieldMetaData("limit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetChargeItemRequest.class, metaDataMap);
  }

  public GetChargeItemRequest() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GetChargeItemRequest(GetChargeItemRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetIds()) {
      List<Long> __this__ids = new ArrayList<Long>(other.ids);
      this.ids = __this__ids;
    }
    this.operatorId = other.operatorId;
    this.endTime = other.endTime;
    this.medicalRecordNo = other.medicalRecordNo;
    this.departmentId = other.departmentId;
    if (other.isSetProjectIds()) {
      List<Long> __this__projectIds = new ArrayList<Long>(other.projectIds);
      this.projectIds = __this__projectIds;
    }
    this.chargeSubjectId = other.chargeSubjectId;
    this.canDayKnot = other.canDayKnot;
    this.offset = other.offset;
    this.limit = other.limit;
  }

  public GetChargeItemRequest deepCopy() {
    return new GetChargeItemRequest(this);
  }

  @Override
  public void clear() {
    this.ids = null;
    setOperatorIdIsSet(false);
    this.operatorId = 0;
    setEndTimeIsSet(false);
    this.endTime = 0;
    setMedicalRecordNoIsSet(false);
    this.medicalRecordNo = 0;
    setDepartmentIdIsSet(false);
    this.departmentId = 0;
    this.projectIds = null;
    setChargeSubjectIdIsSet(false);
    this.chargeSubjectId = 0;
    setCanDayKnotIsSet(false);
    this.canDayKnot = false;
    setOffsetIsSet(false);
    this.offset = 0;
    setLimitIsSet(false);
    this.limit = 0;
  }

  public int getIdsSize() {
    return (this.ids == null) ? 0 : this.ids.size();
  }

  public java.util.Iterator<Long> getIdsIterator() {
    return (this.ids == null) ? null : this.ids.iterator();
  }

  public void addToIds(long elem) {
    if (this.ids == null) {
      this.ids = new ArrayList<Long>();
    }
    this.ids.add(elem);
  }

  public List<Long> getIds() {
    return this.ids;
  }

  public GetChargeItemRequest setIds(List<Long> ids) {
    this.ids = ids;
    return this;
  }

  public void unsetIds() {
    this.ids = null;
  }

  /** Returns true if field ids is set (has been assigned a value) and false otherwise */
  public boolean isSetIds() {
    return this.ids != null;
  }

  public void setIdsIsSet(boolean value) {
    if (!value) {
      this.ids = null;
    }
  }

  public long getOperatorId() {
    return this.operatorId;
  }

  public GetChargeItemRequest setOperatorId(long operatorId) {
    this.operatorId = operatorId;
    setOperatorIdIsSet(true);
    return this;
  }

  public void unsetOperatorId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPERATORID_ISSET_ID);
  }

  /** Returns true if field operatorId is set (has been assigned a value) and false otherwise */
  public boolean isSetOperatorId() {
    return EncodingUtils.testBit(__isset_bitfield, __OPERATORID_ISSET_ID);
  }

  public void setOperatorIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPERATORID_ISSET_ID, value);
  }

  public long getEndTime() {
    return this.endTime;
  }

  public GetChargeItemRequest setEndTime(long endTime) {
    this.endTime = endTime;
    setEndTimeIsSet(true);
    return this;
  }

  public void unsetEndTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  public void setEndTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
  }

  public long getMedicalRecordNo() {
    return this.medicalRecordNo;
  }

  public GetChargeItemRequest setMedicalRecordNo(long medicalRecordNo) {
    this.medicalRecordNo = medicalRecordNo;
    setMedicalRecordNoIsSet(true);
    return this;
  }

  public void unsetMedicalRecordNo() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEDICALRECORDNO_ISSET_ID);
  }

  /** Returns true if field medicalRecordNo is set (has been assigned a value) and false otherwise */
  public boolean isSetMedicalRecordNo() {
    return EncodingUtils.testBit(__isset_bitfield, __MEDICALRECORDNO_ISSET_ID);
  }

  public void setMedicalRecordNoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEDICALRECORDNO_ISSET_ID, value);
  }

  public long getDepartmentId() {
    return this.departmentId;
  }

  public GetChargeItemRequest setDepartmentId(long departmentId) {
    this.departmentId = departmentId;
    setDepartmentIdIsSet(true);
    return this;
  }

  public void unsetDepartmentId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEPARTMENTID_ISSET_ID);
  }

  /** Returns true if field departmentId is set (has been assigned a value) and false otherwise */
  public boolean isSetDepartmentId() {
    return EncodingUtils.testBit(__isset_bitfield, __DEPARTMENTID_ISSET_ID);
  }

  public void setDepartmentIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEPARTMENTID_ISSET_ID, value);
  }

  public int getProjectIdsSize() {
    return (this.projectIds == null) ? 0 : this.projectIds.size();
  }

  public java.util.Iterator<Long> getProjectIdsIterator() {
    return (this.projectIds == null) ? null : this.projectIds.iterator();
  }

  public void addToProjectIds(long elem) {
    if (this.projectIds == null) {
      this.projectIds = new ArrayList<Long>();
    }
    this.projectIds.add(elem);
  }

  public List<Long> getProjectIds() {
    return this.projectIds;
  }

  public GetChargeItemRequest setProjectIds(List<Long> projectIds) {
    this.projectIds = projectIds;
    return this;
  }

  public void unsetProjectIds() {
    this.projectIds = null;
  }

  /** Returns true if field projectIds is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectIds() {
    return this.projectIds != null;
  }

  public void setProjectIdsIsSet(boolean value) {
    if (!value) {
      this.projectIds = null;
    }
  }

  public long getChargeSubjectId() {
    return this.chargeSubjectId;
  }

  public GetChargeItemRequest setChargeSubjectId(long chargeSubjectId) {
    this.chargeSubjectId = chargeSubjectId;
    setChargeSubjectIdIsSet(true);
    return this;
  }

  public void unsetChargeSubjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHARGESUBJECTID_ISSET_ID);
  }

  /** Returns true if field chargeSubjectId is set (has been assigned a value) and false otherwise */
  public boolean isSetChargeSubjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __CHARGESUBJECTID_ISSET_ID);
  }

  public void setChargeSubjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHARGESUBJECTID_ISSET_ID, value);
  }

  public boolean isCanDayKnot() {
    return this.canDayKnot;
  }

  public GetChargeItemRequest setCanDayKnot(boolean canDayKnot) {
    this.canDayKnot = canDayKnot;
    setCanDayKnotIsSet(true);
    return this;
  }

  public void unsetCanDayKnot() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CANDAYKNOT_ISSET_ID);
  }

  /** Returns true if field canDayKnot is set (has been assigned a value) and false otherwise */
  public boolean isSetCanDayKnot() {
    return EncodingUtils.testBit(__isset_bitfield, __CANDAYKNOT_ISSET_ID);
  }

  public void setCanDayKnotIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CANDAYKNOT_ISSET_ID, value);
  }

  public int getOffset() {
    return this.offset;
  }

  public GetChargeItemRequest setOffset(int offset) {
    this.offset = offset;
    setOffsetIsSet(true);
    return this;
  }

  public void unsetOffset() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OFFSET_ISSET_ID);
  }

  /** Returns true if field offset is set (has been assigned a value) and false otherwise */
  public boolean isSetOffset() {
    return EncodingUtils.testBit(__isset_bitfield, __OFFSET_ISSET_ID);
  }

  public void setOffsetIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OFFSET_ISSET_ID, value);
  }

  public int getLimit() {
    return this.limit;
  }

  public GetChargeItemRequest setLimit(int limit) {
    this.limit = limit;
    setLimitIsSet(true);
    return this;
  }

  public void unsetLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMIT_ISSET_ID);
  }

  /** Returns true if field limit is set (has been assigned a value) and false otherwise */
  public boolean isSetLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __LIMIT_ISSET_ID);
  }

  public void setLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMIT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case IDS:
      if (value == null) {
        unsetIds();
      } else {
        setIds((List<Long>)value);
      }
      break;

    case OPERATOR_ID:
      if (value == null) {
        unsetOperatorId();
      } else {
        setOperatorId((Long)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((Long)value);
      }
      break;

    case MEDICAL_RECORD_NO:
      if (value == null) {
        unsetMedicalRecordNo();
      } else {
        setMedicalRecordNo((Long)value);
      }
      break;

    case DEPARTMENT_ID:
      if (value == null) {
        unsetDepartmentId();
      } else {
        setDepartmentId((Long)value);
      }
      break;

    case PROJECT_IDS:
      if (value == null) {
        unsetProjectIds();
      } else {
        setProjectIds((List<Long>)value);
      }
      break;

    case CHARGE_SUBJECT_ID:
      if (value == null) {
        unsetChargeSubjectId();
      } else {
        setChargeSubjectId((Long)value);
      }
      break;

    case CAN_DAY_KNOT:
      if (value == null) {
        unsetCanDayKnot();
      } else {
        setCanDayKnot((Boolean)value);
      }
      break;

    case OFFSET:
      if (value == null) {
        unsetOffset();
      } else {
        setOffset((Integer)value);
      }
      break;

    case LIMIT:
      if (value == null) {
        unsetLimit();
      } else {
        setLimit((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case IDS:
      return getIds();

    case OPERATOR_ID:
      return Long.valueOf(getOperatorId());

    case END_TIME:
      return Long.valueOf(getEndTime());

    case MEDICAL_RECORD_NO:
      return Long.valueOf(getMedicalRecordNo());

    case DEPARTMENT_ID:
      return Long.valueOf(getDepartmentId());

    case PROJECT_IDS:
      return getProjectIds();

    case CHARGE_SUBJECT_ID:
      return Long.valueOf(getChargeSubjectId());

    case CAN_DAY_KNOT:
      return Boolean.valueOf(isCanDayKnot());

    case OFFSET:
      return Integer.valueOf(getOffset());

    case LIMIT:
      return Integer.valueOf(getLimit());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case IDS:
      return isSetIds();
    case OPERATOR_ID:
      return isSetOperatorId();
    case END_TIME:
      return isSetEndTime();
    case MEDICAL_RECORD_NO:
      return isSetMedicalRecordNo();
    case DEPARTMENT_ID:
      return isSetDepartmentId();
    case PROJECT_IDS:
      return isSetProjectIds();
    case CHARGE_SUBJECT_ID:
      return isSetChargeSubjectId();
    case CAN_DAY_KNOT:
      return isSetCanDayKnot();
    case OFFSET:
      return isSetOffset();
    case LIMIT:
      return isSetLimit();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GetChargeItemRequest)
      return this.equals((GetChargeItemRequest)that);
    return false;
  }

  public boolean equals(GetChargeItemRequest that) {
    if (that == null)
      return false;

    boolean this_present_ids = true && this.isSetIds();
    boolean that_present_ids = true && that.isSetIds();
    if (this_present_ids || that_present_ids) {
      if (!(this_present_ids && that_present_ids))
        return false;
      if (!this.ids.equals(that.ids))
        return false;
    }

    boolean this_present_operatorId = true && this.isSetOperatorId();
    boolean that_present_operatorId = true && that.isSetOperatorId();
    if (this_present_operatorId || that_present_operatorId) {
      if (!(this_present_operatorId && that_present_operatorId))
        return false;
      if (this.operatorId != that.operatorId)
        return false;
    }

    boolean this_present_endTime = true && this.isSetEndTime();
    boolean that_present_endTime = true && that.isSetEndTime();
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (this.endTime != that.endTime)
        return false;
    }

    boolean this_present_medicalRecordNo = true && this.isSetMedicalRecordNo();
    boolean that_present_medicalRecordNo = true && that.isSetMedicalRecordNo();
    if (this_present_medicalRecordNo || that_present_medicalRecordNo) {
      if (!(this_present_medicalRecordNo && that_present_medicalRecordNo))
        return false;
      if (this.medicalRecordNo != that.medicalRecordNo)
        return false;
    }

    boolean this_present_departmentId = true && this.isSetDepartmentId();
    boolean that_present_departmentId = true && that.isSetDepartmentId();
    if (this_present_departmentId || that_present_departmentId) {
      if (!(this_present_departmentId && that_present_departmentId))
        return false;
      if (this.departmentId != that.departmentId)
        return false;
    }

    boolean this_present_projectIds = true && this.isSetProjectIds();
    boolean that_present_projectIds = true && that.isSetProjectIds();
    if (this_present_projectIds || that_present_projectIds) {
      if (!(this_present_projectIds && that_present_projectIds))
        return false;
      if (!this.projectIds.equals(that.projectIds))
        return false;
    }

    boolean this_present_chargeSubjectId = true && this.isSetChargeSubjectId();
    boolean that_present_chargeSubjectId = true && that.isSetChargeSubjectId();
    if (this_present_chargeSubjectId || that_present_chargeSubjectId) {
      if (!(this_present_chargeSubjectId && that_present_chargeSubjectId))
        return false;
      if (this.chargeSubjectId != that.chargeSubjectId)
        return false;
    }

    boolean this_present_canDayKnot = true && this.isSetCanDayKnot();
    boolean that_present_canDayKnot = true && that.isSetCanDayKnot();
    if (this_present_canDayKnot || that_present_canDayKnot) {
      if (!(this_present_canDayKnot && that_present_canDayKnot))
        return false;
      if (this.canDayKnot != that.canDayKnot)
        return false;
    }

    boolean this_present_offset = true && this.isSetOffset();
    boolean that_present_offset = true && that.isSetOffset();
    if (this_present_offset || that_present_offset) {
      if (!(this_present_offset && that_present_offset))
        return false;
      if (this.offset != that.offset)
        return false;
    }

    boolean this_present_limit = true && this.isSetLimit();
    boolean that_present_limit = true && that.isSetLimit();
    if (this_present_limit || that_present_limit) {
      if (!(this_present_limit && that_present_limit))
        return false;
      if (this.limit != that.limit)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_ids = true && (isSetIds());
    list.add(present_ids);
    if (present_ids)
      list.add(ids);

    boolean present_operatorId = true && (isSetOperatorId());
    list.add(present_operatorId);
    if (present_operatorId)
      list.add(operatorId);

    boolean present_endTime = true && (isSetEndTime());
    list.add(present_endTime);
    if (present_endTime)
      list.add(endTime);

    boolean present_medicalRecordNo = true && (isSetMedicalRecordNo());
    list.add(present_medicalRecordNo);
    if (present_medicalRecordNo)
      list.add(medicalRecordNo);

    boolean present_departmentId = true && (isSetDepartmentId());
    list.add(present_departmentId);
    if (present_departmentId)
      list.add(departmentId);

    boolean present_projectIds = true && (isSetProjectIds());
    list.add(present_projectIds);
    if (present_projectIds)
      list.add(projectIds);

    boolean present_chargeSubjectId = true && (isSetChargeSubjectId());
    list.add(present_chargeSubjectId);
    if (present_chargeSubjectId)
      list.add(chargeSubjectId);

    boolean present_canDayKnot = true && (isSetCanDayKnot());
    list.add(present_canDayKnot);
    if (present_canDayKnot)
      list.add(canDayKnot);

    boolean present_offset = true && (isSetOffset());
    list.add(present_offset);
    if (present_offset)
      list.add(offset);

    boolean present_limit = true && (isSetLimit());
    list.add(present_limit);
    if (present_limit)
      list.add(limit);

    return list.hashCode();
  }

  @Override
  public int compareTo(GetChargeItemRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetIds()).compareTo(other.isSetIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ids, other.ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperatorId()).compareTo(other.isSetOperatorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperatorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operatorId, other.operatorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMedicalRecordNo()).compareTo(other.isSetMedicalRecordNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMedicalRecordNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.medicalRecordNo, other.medicalRecordNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDepartmentId()).compareTo(other.isSetDepartmentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepartmentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.departmentId, other.departmentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectIds()).compareTo(other.isSetProjectIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectIds, other.projectIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChargeSubjectId()).compareTo(other.isSetChargeSubjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChargeSubjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chargeSubjectId, other.chargeSubjectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCanDayKnot()).compareTo(other.isSetCanDayKnot());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCanDayKnot()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.canDayKnot, other.canDayKnot);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOffset()).compareTo(other.isSetOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOffset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, other.offset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLimit()).compareTo(other.isSetLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limit, other.limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GetChargeItemRequest(");
    boolean first = true;

    if (isSetIds()) {
      sb.append("ids:");
      if (this.ids == null) {
        sb.append("null");
      } else {
        sb.append(this.ids);
      }
      first = false;
    }
    if (isSetOperatorId()) {
      if (!first) sb.append(", ");
      sb.append("operatorId:");
      sb.append(this.operatorId);
      first = false;
    }
    if (isSetEndTime()) {
      if (!first) sb.append(", ");
      sb.append("endTime:");
      sb.append(this.endTime);
      first = false;
    }
    if (isSetMedicalRecordNo()) {
      if (!first) sb.append(", ");
      sb.append("medicalRecordNo:");
      sb.append(this.medicalRecordNo);
      first = false;
    }
    if (isSetDepartmentId()) {
      if (!first) sb.append(", ");
      sb.append("departmentId:");
      sb.append(this.departmentId);
      first = false;
    }
    if (isSetProjectIds()) {
      if (!first) sb.append(", ");
      sb.append("projectIds:");
      if (this.projectIds == null) {
        sb.append("null");
      } else {
        sb.append(this.projectIds);
      }
      first = false;
    }
    if (isSetChargeSubjectId()) {
      if (!first) sb.append(", ");
      sb.append("chargeSubjectId:");
      sb.append(this.chargeSubjectId);
      first = false;
    }
    if (isSetCanDayKnot()) {
      if (!first) sb.append(", ");
      sb.append("canDayKnot:");
      sb.append(this.canDayKnot);
      first = false;
    }
    if (isSetOffset()) {
      if (!first) sb.append(", ");
      sb.append("offset:");
      sb.append(this.offset);
      first = false;
    }
    if (isSetLimit()) {
      if (!first) sb.append(", ");
      sb.append("limit:");
      sb.append(this.limit);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GetChargeItemRequestStandardSchemeFactory implements SchemeFactory {
    public GetChargeItemRequestStandardScheme getScheme() {
      return new GetChargeItemRequestStandardScheme();
    }
  }

  private static class GetChargeItemRequestStandardScheme extends StandardScheme<GetChargeItemRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GetChargeItemRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list72 = iprot.readListBegin();
                struct.ids = new ArrayList<Long>(_list72.size);
                long _elem73;
                for (int _i74 = 0; _i74 < _list72.size; ++_i74)
                {
                  _elem73 = iprot.readI64();
                  struct.ids.add(_elem73);
                }
                iprot.readListEnd();
              }
              struct.setIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OPERATOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.operatorId = iprot.readI64();
              struct.setOperatorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.endTime = iprot.readI64();
              struct.setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MEDICAL_RECORD_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.medicalRecordNo = iprot.readI64();
              struct.setMedicalRecordNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DEPARTMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.departmentId = iprot.readI64();
              struct.setDepartmentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PROJECT_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list75 = iprot.readListBegin();
                struct.projectIds = new ArrayList<Long>(_list75.size);
                long _elem76;
                for (int _i77 = 0; _i77 < _list75.size; ++_i77)
                {
                  _elem76 = iprot.readI64();
                  struct.projectIds.add(_elem76);
                }
                iprot.readListEnd();
              }
              struct.setProjectIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CHARGE_SUBJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.chargeSubjectId = iprot.readI64();
              struct.setChargeSubjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CAN_DAY_KNOT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.canDayKnot = iprot.readBool();
              struct.setCanDayKnotIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 254: // OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.offset = iprot.readI32();
              struct.setOffsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 255: // LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.limit = iprot.readI32();
              struct.setLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GetChargeItemRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.ids != null) {
        if (struct.isSetIds()) {
          oprot.writeFieldBegin(IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.ids.size()));
            for (long _iter78 : struct.ids)
            {
              oprot.writeI64(_iter78);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOperatorId()) {
        oprot.writeFieldBegin(OPERATOR_ID_FIELD_DESC);
        oprot.writeI64(struct.operatorId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEndTime()) {
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeI64(struct.endTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMedicalRecordNo()) {
        oprot.writeFieldBegin(MEDICAL_RECORD_NO_FIELD_DESC);
        oprot.writeI64(struct.medicalRecordNo);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDepartmentId()) {
        oprot.writeFieldBegin(DEPARTMENT_ID_FIELD_DESC);
        oprot.writeI64(struct.departmentId);
        oprot.writeFieldEnd();
      }
      if (struct.projectIds != null) {
        if (struct.isSetProjectIds()) {
          oprot.writeFieldBegin(PROJECT_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.projectIds.size()));
            for (long _iter79 : struct.projectIds)
            {
              oprot.writeI64(_iter79);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetChargeSubjectId()) {
        oprot.writeFieldBegin(CHARGE_SUBJECT_ID_FIELD_DESC);
        oprot.writeI64(struct.chargeSubjectId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCanDayKnot()) {
        oprot.writeFieldBegin(CAN_DAY_KNOT_FIELD_DESC);
        oprot.writeBool(struct.canDayKnot);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOffset()) {
        oprot.writeFieldBegin(OFFSET_FIELD_DESC);
        oprot.writeI32(struct.offset);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLimit()) {
        oprot.writeFieldBegin(LIMIT_FIELD_DESC);
        oprot.writeI32(struct.limit);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GetChargeItemRequestTupleSchemeFactory implements SchemeFactory {
    public GetChargeItemRequestTupleScheme getScheme() {
      return new GetChargeItemRequestTupleScheme();
    }
  }

  private static class GetChargeItemRequestTupleScheme extends TupleScheme<GetChargeItemRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GetChargeItemRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetIds()) {
        optionals.set(0);
      }
      if (struct.isSetOperatorId()) {
        optionals.set(1);
      }
      if (struct.isSetEndTime()) {
        optionals.set(2);
      }
      if (struct.isSetMedicalRecordNo()) {
        optionals.set(3);
      }
      if (struct.isSetDepartmentId()) {
        optionals.set(4);
      }
      if (struct.isSetProjectIds()) {
        optionals.set(5);
      }
      if (struct.isSetChargeSubjectId()) {
        optionals.set(6);
      }
      if (struct.isSetCanDayKnot()) {
        optionals.set(7);
      }
      if (struct.isSetOffset()) {
        optionals.set(8);
      }
      if (struct.isSetLimit()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetIds()) {
        {
          oprot.writeI32(struct.ids.size());
          for (long _iter80 : struct.ids)
          {
            oprot.writeI64(_iter80);
          }
        }
      }
      if (struct.isSetOperatorId()) {
        oprot.writeI64(struct.operatorId);
      }
      if (struct.isSetEndTime()) {
        oprot.writeI64(struct.endTime);
      }
      if (struct.isSetMedicalRecordNo()) {
        oprot.writeI64(struct.medicalRecordNo);
      }
      if (struct.isSetDepartmentId()) {
        oprot.writeI64(struct.departmentId);
      }
      if (struct.isSetProjectIds()) {
        {
          oprot.writeI32(struct.projectIds.size());
          for (long _iter81 : struct.projectIds)
          {
            oprot.writeI64(_iter81);
          }
        }
      }
      if (struct.isSetChargeSubjectId()) {
        oprot.writeI64(struct.chargeSubjectId);
      }
      if (struct.isSetCanDayKnot()) {
        oprot.writeBool(struct.canDayKnot);
      }
      if (struct.isSetOffset()) {
        oprot.writeI32(struct.offset);
      }
      if (struct.isSetLimit()) {
        oprot.writeI32(struct.limit);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GetChargeItemRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list82 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.ids = new ArrayList<Long>(_list82.size);
          long _elem83;
          for (int _i84 = 0; _i84 < _list82.size; ++_i84)
          {
            _elem83 = iprot.readI64();
            struct.ids.add(_elem83);
          }
        }
        struct.setIdsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.operatorId = iprot.readI64();
        struct.setOperatorIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.endTime = iprot.readI64();
        struct.setEndTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.medicalRecordNo = iprot.readI64();
        struct.setMedicalRecordNoIsSet(true);
      }
      if (incoming.get(4)) {
        struct.departmentId = iprot.readI64();
        struct.setDepartmentIdIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list85 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.projectIds = new ArrayList<Long>(_list85.size);
          long _elem86;
          for (int _i87 = 0; _i87 < _list85.size; ++_i87)
          {
            _elem86 = iprot.readI64();
            struct.projectIds.add(_elem86);
          }
        }
        struct.setProjectIdsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.chargeSubjectId = iprot.readI64();
        struct.setChargeSubjectIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.canDayKnot = iprot.readBool();
        struct.setCanDayKnotIsSet(true);
      }
      if (incoming.get(8)) {
        struct.offset = iprot.readI32();
        struct.setOffsetIsSet(true);
      }
      if (incoming.get(9)) {
        struct.limit = iprot.readI32();
        struct.setLimitIsSet(true);
      }
    }
  }

}

