/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package top.itcat.rpc.service.diagnose;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2019-7-3")
public class GetRegistrationRequest implements org.apache.thrift.TBase<GetRegistrationRequest, GetRegistrationRequest._Fields>, java.io.Serializable, Cloneable, Comparable<GetRegistrationRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetRegistrationRequest");

  private static final org.apache.thrift.protocol.TField IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ids", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField SEARCH_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("searchKey", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DOCTOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("doctorId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField DEPART_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("departId", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField CUR_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("curTime", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField ID_NUMS_FIELD_DESC = new org.apache.thrift.protocol.TField("idNums", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I32, (short)110);
  private static final org.apache.thrift.protocol.TField LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("limit", org.apache.thrift.protocol.TType.I32, (short)111);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GetRegistrationRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GetRegistrationRequestTupleSchemeFactory());
  }

  public List<Long> ids; // optional
  public String searchKey; // optional
  public long doctorId; // optional
  public long departId; // optional
  public long curTime; // optional
  public List<String> idNums; // optional
  /**
   * 
   * @see top.itcat.rpc.service.model.RegistrationStatusEnum
   */
  public top.itcat.rpc.service.model.RegistrationStatusEnum status; // optional
  public int offset; // optional
  public int limit; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    IDS((short)1, "ids"),
    SEARCH_KEY((short)2, "searchKey"),
    DOCTOR_ID((short)3, "doctorId"),
    DEPART_ID((short)4, "departId"),
    CUR_TIME((short)5, "curTime"),
    ID_NUMS((short)6, "idNums"),
    /**
     * 
     * @see top.itcat.rpc.service.model.RegistrationStatusEnum
     */
    STATUS((short)8, "status"),
    OFFSET((short)110, "offset"),
    LIMIT((short)111, "limit");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IDS
          return IDS;
        case 2: // SEARCH_KEY
          return SEARCH_KEY;
        case 3: // DOCTOR_ID
          return DOCTOR_ID;
        case 4: // DEPART_ID
          return DEPART_ID;
        case 5: // CUR_TIME
          return CUR_TIME;
        case 6: // ID_NUMS
          return ID_NUMS;
        case 8: // STATUS
          return STATUS;
        case 110: // OFFSET
          return OFFSET;
        case 111: // LIMIT
          return LIMIT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DOCTORID_ISSET_ID = 0;
  private static final int __DEPARTID_ISSET_ID = 1;
  private static final int __CURTIME_ISSET_ID = 2;
  private static final int __OFFSET_ISSET_ID = 3;
  private static final int __LIMIT_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.IDS,_Fields.SEARCH_KEY,_Fields.DOCTOR_ID,_Fields.DEPART_ID,_Fields.CUR_TIME,_Fields.ID_NUMS,_Fields.STATUS,_Fields.OFFSET,_Fields.LIMIT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IDS, new org.apache.thrift.meta_data.FieldMetaData("ids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.SEARCH_KEY, new org.apache.thrift.meta_data.FieldMetaData("searchKey", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOCTOR_ID, new org.apache.thrift.meta_data.FieldMetaData("doctorId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DEPART_ID, new org.apache.thrift.meta_data.FieldMetaData("departId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CUR_TIME, new org.apache.thrift.meta_data.FieldMetaData("curTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ID_NUMS, new org.apache.thrift.meta_data.FieldMetaData("idNums", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, top.itcat.rpc.service.model.RegistrationStatusEnum.class)));
    tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LIMIT, new org.apache.thrift.meta_data.FieldMetaData("limit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetRegistrationRequest.class, metaDataMap);
  }

  public GetRegistrationRequest() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GetRegistrationRequest(GetRegistrationRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetIds()) {
      List<Long> __this__ids = new ArrayList<Long>(other.ids);
      this.ids = __this__ids;
    }
    if (other.isSetSearchKey()) {
      this.searchKey = other.searchKey;
    }
    this.doctorId = other.doctorId;
    this.departId = other.departId;
    this.curTime = other.curTime;
    if (other.isSetIdNums()) {
      List<String> __this__idNums = new ArrayList<String>(other.idNums);
      this.idNums = __this__idNums;
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    this.offset = other.offset;
    this.limit = other.limit;
  }

  public GetRegistrationRequest deepCopy() {
    return new GetRegistrationRequest(this);
  }

  @Override
  public void clear() {
    this.ids = null;
    this.searchKey = null;
    setDoctorIdIsSet(false);
    this.doctorId = 0;
    setDepartIdIsSet(false);
    this.departId = 0;
    setCurTimeIsSet(false);
    this.curTime = 0;
    this.idNums = null;
    this.status = null;
    setOffsetIsSet(false);
    this.offset = 0;
    setLimitIsSet(false);
    this.limit = 0;
  }

  public int getIdsSize() {
    return (this.ids == null) ? 0 : this.ids.size();
  }

  public java.util.Iterator<Long> getIdsIterator() {
    return (this.ids == null) ? null : this.ids.iterator();
  }

  public void addToIds(long elem) {
    if (this.ids == null) {
      this.ids = new ArrayList<Long>();
    }
    this.ids.add(elem);
  }

  public List<Long> getIds() {
    return this.ids;
  }

  public GetRegistrationRequest setIds(List<Long> ids) {
    this.ids = ids;
    return this;
  }

  public void unsetIds() {
    this.ids = null;
  }

  /** Returns true if field ids is set (has been assigned a value) and false otherwise */
  public boolean isSetIds() {
    return this.ids != null;
  }

  public void setIdsIsSet(boolean value) {
    if (!value) {
      this.ids = null;
    }
  }

  public String getSearchKey() {
    return this.searchKey;
  }

  public GetRegistrationRequest setSearchKey(String searchKey) {
    this.searchKey = searchKey;
    return this;
  }

  public void unsetSearchKey() {
    this.searchKey = null;
  }

  /** Returns true if field searchKey is set (has been assigned a value) and false otherwise */
  public boolean isSetSearchKey() {
    return this.searchKey != null;
  }

  public void setSearchKeyIsSet(boolean value) {
    if (!value) {
      this.searchKey = null;
    }
  }

  public long getDoctorId() {
    return this.doctorId;
  }

  public GetRegistrationRequest setDoctorId(long doctorId) {
    this.doctorId = doctorId;
    setDoctorIdIsSet(true);
    return this;
  }

  public void unsetDoctorId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DOCTORID_ISSET_ID);
  }

  /** Returns true if field doctorId is set (has been assigned a value) and false otherwise */
  public boolean isSetDoctorId() {
    return EncodingUtils.testBit(__isset_bitfield, __DOCTORID_ISSET_ID);
  }

  public void setDoctorIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DOCTORID_ISSET_ID, value);
  }

  public long getDepartId() {
    return this.departId;
  }

  public GetRegistrationRequest setDepartId(long departId) {
    this.departId = departId;
    setDepartIdIsSet(true);
    return this;
  }

  public void unsetDepartId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEPARTID_ISSET_ID);
  }

  /** Returns true if field departId is set (has been assigned a value) and false otherwise */
  public boolean isSetDepartId() {
    return EncodingUtils.testBit(__isset_bitfield, __DEPARTID_ISSET_ID);
  }

  public void setDepartIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEPARTID_ISSET_ID, value);
  }

  public long getCurTime() {
    return this.curTime;
  }

  public GetRegistrationRequest setCurTime(long curTime) {
    this.curTime = curTime;
    setCurTimeIsSet(true);
    return this;
  }

  public void unsetCurTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURTIME_ISSET_ID);
  }

  /** Returns true if field curTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCurTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CURTIME_ISSET_ID);
  }

  public void setCurTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURTIME_ISSET_ID, value);
  }

  public int getIdNumsSize() {
    return (this.idNums == null) ? 0 : this.idNums.size();
  }

  public java.util.Iterator<String> getIdNumsIterator() {
    return (this.idNums == null) ? null : this.idNums.iterator();
  }

  public void addToIdNums(String elem) {
    if (this.idNums == null) {
      this.idNums = new ArrayList<String>();
    }
    this.idNums.add(elem);
  }

  public List<String> getIdNums() {
    return this.idNums;
  }

  public GetRegistrationRequest setIdNums(List<String> idNums) {
    this.idNums = idNums;
    return this;
  }

  public void unsetIdNums() {
    this.idNums = null;
  }

  /** Returns true if field idNums is set (has been assigned a value) and false otherwise */
  public boolean isSetIdNums() {
    return this.idNums != null;
  }

  public void setIdNumsIsSet(boolean value) {
    if (!value) {
      this.idNums = null;
    }
  }

  /**
   * 
   * @see top.itcat.rpc.service.model.RegistrationStatusEnum
   */
  public top.itcat.rpc.service.model.RegistrationStatusEnum getStatus() {
    return this.status;
  }

  /**
   * 
   * @see top.itcat.rpc.service.model.RegistrationStatusEnum
   */
  public GetRegistrationRequest setStatus(top.itcat.rpc.service.model.RegistrationStatusEnum status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public int getOffset() {
    return this.offset;
  }

  public GetRegistrationRequest setOffset(int offset) {
    this.offset = offset;
    setOffsetIsSet(true);
    return this;
  }

  public void unsetOffset() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OFFSET_ISSET_ID);
  }

  /** Returns true if field offset is set (has been assigned a value) and false otherwise */
  public boolean isSetOffset() {
    return EncodingUtils.testBit(__isset_bitfield, __OFFSET_ISSET_ID);
  }

  public void setOffsetIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OFFSET_ISSET_ID, value);
  }

  public int getLimit() {
    return this.limit;
  }

  public GetRegistrationRequest setLimit(int limit) {
    this.limit = limit;
    setLimitIsSet(true);
    return this;
  }

  public void unsetLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMIT_ISSET_ID);
  }

  /** Returns true if field limit is set (has been assigned a value) and false otherwise */
  public boolean isSetLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __LIMIT_ISSET_ID);
  }

  public void setLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMIT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case IDS:
      if (value == null) {
        unsetIds();
      } else {
        setIds((List<Long>)value);
      }
      break;

    case SEARCH_KEY:
      if (value == null) {
        unsetSearchKey();
      } else {
        setSearchKey((String)value);
      }
      break;

    case DOCTOR_ID:
      if (value == null) {
        unsetDoctorId();
      } else {
        setDoctorId((Long)value);
      }
      break;

    case DEPART_ID:
      if (value == null) {
        unsetDepartId();
      } else {
        setDepartId((Long)value);
      }
      break;

    case CUR_TIME:
      if (value == null) {
        unsetCurTime();
      } else {
        setCurTime((Long)value);
      }
      break;

    case ID_NUMS:
      if (value == null) {
        unsetIdNums();
      } else {
        setIdNums((List<String>)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((top.itcat.rpc.service.model.RegistrationStatusEnum)value);
      }
      break;

    case OFFSET:
      if (value == null) {
        unsetOffset();
      } else {
        setOffset((Integer)value);
      }
      break;

    case LIMIT:
      if (value == null) {
        unsetLimit();
      } else {
        setLimit((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case IDS:
      return getIds();

    case SEARCH_KEY:
      return getSearchKey();

    case DOCTOR_ID:
      return Long.valueOf(getDoctorId());

    case DEPART_ID:
      return Long.valueOf(getDepartId());

    case CUR_TIME:
      return Long.valueOf(getCurTime());

    case ID_NUMS:
      return getIdNums();

    case STATUS:
      return getStatus();

    case OFFSET:
      return Integer.valueOf(getOffset());

    case LIMIT:
      return Integer.valueOf(getLimit());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case IDS:
      return isSetIds();
    case SEARCH_KEY:
      return isSetSearchKey();
    case DOCTOR_ID:
      return isSetDoctorId();
    case DEPART_ID:
      return isSetDepartId();
    case CUR_TIME:
      return isSetCurTime();
    case ID_NUMS:
      return isSetIdNums();
    case STATUS:
      return isSetStatus();
    case OFFSET:
      return isSetOffset();
    case LIMIT:
      return isSetLimit();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GetRegistrationRequest)
      return this.equals((GetRegistrationRequest)that);
    return false;
  }

  public boolean equals(GetRegistrationRequest that) {
    if (that == null)
      return false;

    boolean this_present_ids = true && this.isSetIds();
    boolean that_present_ids = true && that.isSetIds();
    if (this_present_ids || that_present_ids) {
      if (!(this_present_ids && that_present_ids))
        return false;
      if (!this.ids.equals(that.ids))
        return false;
    }

    boolean this_present_searchKey = true && this.isSetSearchKey();
    boolean that_present_searchKey = true && that.isSetSearchKey();
    if (this_present_searchKey || that_present_searchKey) {
      if (!(this_present_searchKey && that_present_searchKey))
        return false;
      if (!this.searchKey.equals(that.searchKey))
        return false;
    }

    boolean this_present_doctorId = true && this.isSetDoctorId();
    boolean that_present_doctorId = true && that.isSetDoctorId();
    if (this_present_doctorId || that_present_doctorId) {
      if (!(this_present_doctorId && that_present_doctorId))
        return false;
      if (this.doctorId != that.doctorId)
        return false;
    }

    boolean this_present_departId = true && this.isSetDepartId();
    boolean that_present_departId = true && that.isSetDepartId();
    if (this_present_departId || that_present_departId) {
      if (!(this_present_departId && that_present_departId))
        return false;
      if (this.departId != that.departId)
        return false;
    }

    boolean this_present_curTime = true && this.isSetCurTime();
    boolean that_present_curTime = true && that.isSetCurTime();
    if (this_present_curTime || that_present_curTime) {
      if (!(this_present_curTime && that_present_curTime))
        return false;
      if (this.curTime != that.curTime)
        return false;
    }

    boolean this_present_idNums = true && this.isSetIdNums();
    boolean that_present_idNums = true && that.isSetIdNums();
    if (this_present_idNums || that_present_idNums) {
      if (!(this_present_idNums && that_present_idNums))
        return false;
      if (!this.idNums.equals(that.idNums))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_offset = true && this.isSetOffset();
    boolean that_present_offset = true && that.isSetOffset();
    if (this_present_offset || that_present_offset) {
      if (!(this_present_offset && that_present_offset))
        return false;
      if (this.offset != that.offset)
        return false;
    }

    boolean this_present_limit = true && this.isSetLimit();
    boolean that_present_limit = true && that.isSetLimit();
    if (this_present_limit || that_present_limit) {
      if (!(this_present_limit && that_present_limit))
        return false;
      if (this.limit != that.limit)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_ids = true && (isSetIds());
    list.add(present_ids);
    if (present_ids)
      list.add(ids);

    boolean present_searchKey = true && (isSetSearchKey());
    list.add(present_searchKey);
    if (present_searchKey)
      list.add(searchKey);

    boolean present_doctorId = true && (isSetDoctorId());
    list.add(present_doctorId);
    if (present_doctorId)
      list.add(doctorId);

    boolean present_departId = true && (isSetDepartId());
    list.add(present_departId);
    if (present_departId)
      list.add(departId);

    boolean present_curTime = true && (isSetCurTime());
    list.add(present_curTime);
    if (present_curTime)
      list.add(curTime);

    boolean present_idNums = true && (isSetIdNums());
    list.add(present_idNums);
    if (present_idNums)
      list.add(idNums);

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status.getValue());

    boolean present_offset = true && (isSetOffset());
    list.add(present_offset);
    if (present_offset)
      list.add(offset);

    boolean present_limit = true && (isSetLimit());
    list.add(present_limit);
    if (present_limit)
      list.add(limit);

    return list.hashCode();
  }

  @Override
  public int compareTo(GetRegistrationRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetIds()).compareTo(other.isSetIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ids, other.ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSearchKey()).compareTo(other.isSetSearchKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSearchKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchKey, other.searchKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDoctorId()).compareTo(other.isSetDoctorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDoctorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doctorId, other.doctorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDepartId()).compareTo(other.isSetDepartId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepartId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.departId, other.departId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurTime()).compareTo(other.isSetCurTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.curTime, other.curTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdNums()).compareTo(other.isSetIdNums());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdNums()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idNums, other.idNums);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOffset()).compareTo(other.isSetOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOffset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, other.offset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLimit()).compareTo(other.isSetLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limit, other.limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GetRegistrationRequest(");
    boolean first = true;

    if (isSetIds()) {
      sb.append("ids:");
      if (this.ids == null) {
        sb.append("null");
      } else {
        sb.append(this.ids);
      }
      first = false;
    }
    if (isSetSearchKey()) {
      if (!first) sb.append(", ");
      sb.append("searchKey:");
      if (this.searchKey == null) {
        sb.append("null");
      } else {
        sb.append(this.searchKey);
      }
      first = false;
    }
    if (isSetDoctorId()) {
      if (!first) sb.append(", ");
      sb.append("doctorId:");
      sb.append(this.doctorId);
      first = false;
    }
    if (isSetDepartId()) {
      if (!first) sb.append(", ");
      sb.append("departId:");
      sb.append(this.departId);
      first = false;
    }
    if (isSetCurTime()) {
      if (!first) sb.append(", ");
      sb.append("curTime:");
      sb.append(this.curTime);
      first = false;
    }
    if (isSetIdNums()) {
      if (!first) sb.append(", ");
      sb.append("idNums:");
      if (this.idNums == null) {
        sb.append("null");
      } else {
        sb.append(this.idNums);
      }
      first = false;
    }
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
    }
    if (isSetOffset()) {
      if (!first) sb.append(", ");
      sb.append("offset:");
      sb.append(this.offset);
      first = false;
    }
    if (isSetLimit()) {
      if (!first) sb.append(", ");
      sb.append("limit:");
      sb.append(this.limit);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GetRegistrationRequestStandardSchemeFactory implements SchemeFactory {
    public GetRegistrationRequestStandardScheme getScheme() {
      return new GetRegistrationRequestStandardScheme();
    }
  }

  private static class GetRegistrationRequestStandardScheme extends StandardScheme<GetRegistrationRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GetRegistrationRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list112 = iprot.readListBegin();
                struct.ids = new ArrayList<Long>(_list112.size);
                long _elem113;
                for (int _i114 = 0; _i114 < _list112.size; ++_i114)
                {
                  _elem113 = iprot.readI64();
                  struct.ids.add(_elem113);
                }
                iprot.readListEnd();
              }
              struct.setIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SEARCH_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.searchKey = iprot.readString();
              struct.setSearchKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DOCTOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.doctorId = iprot.readI64();
              struct.setDoctorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DEPART_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.departId = iprot.readI64();
              struct.setDepartIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CUR_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.curTime = iprot.readI64();
              struct.setCurTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ID_NUMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list115 = iprot.readListBegin();
                struct.idNums = new ArrayList<String>(_list115.size);
                String _elem116;
                for (int _i117 = 0; _i117 < _list115.size; ++_i117)
                {
                  _elem116 = iprot.readString();
                  struct.idNums.add(_elem116);
                }
                iprot.readListEnd();
              }
              struct.setIdNumsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = top.itcat.rpc.service.model.RegistrationStatusEnum.findByValue(iprot.readI32());
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 110: // OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.offset = iprot.readI32();
              struct.setOffsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 111: // LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.limit = iprot.readI32();
              struct.setLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GetRegistrationRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.ids != null) {
        if (struct.isSetIds()) {
          oprot.writeFieldBegin(IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.ids.size()));
            for (long _iter118 : struct.ids)
            {
              oprot.writeI64(_iter118);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.searchKey != null) {
        if (struct.isSetSearchKey()) {
          oprot.writeFieldBegin(SEARCH_KEY_FIELD_DESC);
          oprot.writeString(struct.searchKey);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDoctorId()) {
        oprot.writeFieldBegin(DOCTOR_ID_FIELD_DESC);
        oprot.writeI64(struct.doctorId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDepartId()) {
        oprot.writeFieldBegin(DEPART_ID_FIELD_DESC);
        oprot.writeI64(struct.departId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCurTime()) {
        oprot.writeFieldBegin(CUR_TIME_FIELD_DESC);
        oprot.writeI64(struct.curTime);
        oprot.writeFieldEnd();
      }
      if (struct.idNums != null) {
        if (struct.isSetIdNums()) {
          oprot.writeFieldBegin(ID_NUMS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.idNums.size()));
            for (String _iter119 : struct.idNums)
            {
              oprot.writeString(_iter119);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.status != null) {
        if (struct.isSetStatus()) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          oprot.writeI32(struct.status.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOffset()) {
        oprot.writeFieldBegin(OFFSET_FIELD_DESC);
        oprot.writeI32(struct.offset);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLimit()) {
        oprot.writeFieldBegin(LIMIT_FIELD_DESC);
        oprot.writeI32(struct.limit);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GetRegistrationRequestTupleSchemeFactory implements SchemeFactory {
    public GetRegistrationRequestTupleScheme getScheme() {
      return new GetRegistrationRequestTupleScheme();
    }
  }

  private static class GetRegistrationRequestTupleScheme extends TupleScheme<GetRegistrationRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GetRegistrationRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetIds()) {
        optionals.set(0);
      }
      if (struct.isSetSearchKey()) {
        optionals.set(1);
      }
      if (struct.isSetDoctorId()) {
        optionals.set(2);
      }
      if (struct.isSetDepartId()) {
        optionals.set(3);
      }
      if (struct.isSetCurTime()) {
        optionals.set(4);
      }
      if (struct.isSetIdNums()) {
        optionals.set(5);
      }
      if (struct.isSetStatus()) {
        optionals.set(6);
      }
      if (struct.isSetOffset()) {
        optionals.set(7);
      }
      if (struct.isSetLimit()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetIds()) {
        {
          oprot.writeI32(struct.ids.size());
          for (long _iter120 : struct.ids)
          {
            oprot.writeI64(_iter120);
          }
        }
      }
      if (struct.isSetSearchKey()) {
        oprot.writeString(struct.searchKey);
      }
      if (struct.isSetDoctorId()) {
        oprot.writeI64(struct.doctorId);
      }
      if (struct.isSetDepartId()) {
        oprot.writeI64(struct.departId);
      }
      if (struct.isSetCurTime()) {
        oprot.writeI64(struct.curTime);
      }
      if (struct.isSetIdNums()) {
        {
          oprot.writeI32(struct.idNums.size());
          for (String _iter121 : struct.idNums)
          {
            oprot.writeString(_iter121);
          }
        }
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status.getValue());
      }
      if (struct.isSetOffset()) {
        oprot.writeI32(struct.offset);
      }
      if (struct.isSetLimit()) {
        oprot.writeI32(struct.limit);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GetRegistrationRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list122 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.ids = new ArrayList<Long>(_list122.size);
          long _elem123;
          for (int _i124 = 0; _i124 < _list122.size; ++_i124)
          {
            _elem123 = iprot.readI64();
            struct.ids.add(_elem123);
          }
        }
        struct.setIdsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.searchKey = iprot.readString();
        struct.setSearchKeyIsSet(true);
      }
      if (incoming.get(2)) {
        struct.doctorId = iprot.readI64();
        struct.setDoctorIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.departId = iprot.readI64();
        struct.setDepartIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.curTime = iprot.readI64();
        struct.setCurTimeIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list125 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.idNums = new ArrayList<String>(_list125.size);
          String _elem126;
          for (int _i127 = 0; _i127 < _list125.size; ++_i127)
          {
            _elem126 = iprot.readString();
            struct.idNums.add(_elem126);
          }
        }
        struct.setIdNumsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.status = top.itcat.rpc.service.model.RegistrationStatusEnum.findByValue(iprot.readI32());
        struct.setStatusIsSet(true);
      }
      if (incoming.get(7)) {
        struct.offset = iprot.readI32();
        struct.setOffsetIsSet(true);
      }
      if (incoming.get(8)) {
        struct.limit = iprot.readI32();
        struct.setLimitIsSet(true);
      }
    }
  }

}

