/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package top.itcat.rpc.service.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2019-7-3")
public class PrescriptionHerbItem implements org.apache.thrift.TBase<PrescriptionHerbItem, PrescriptionHerbItem._Fields>, java.io.Serializable, Cloneable, Comparable<PrescriptionHerbItem> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PrescriptionHerbItem");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField PRESCRIPTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("prescriptionId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("itemId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField CHARGE_ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("chargeItemId", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField MEDICAL_DOCTOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("medicalDoctorId", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("price", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("num", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField VALID_FIELD_DESC = new org.apache.thrift.protocol.TField("valid", org.apache.thrift.protocol.TType.I32, (short)255);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PrescriptionHerbItemStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PrescriptionHerbItemTupleSchemeFactory());
  }

  public long id; // optional
  public long prescriptionId; // optional
  public long itemId; // optional
  public long chargeItemId; // optional
  public long medicalDoctorId; // optional
  public double price; // optional
  /**
   * 
   * @see PrescriptionItemStatusEnum
   */
  public PrescriptionItemStatusEnum status; // optional
  public int num; // optional
  public int valid; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    PRESCRIPTION_ID((short)2, "prescriptionId"),
    ITEM_ID((short)3, "itemId"),
    CHARGE_ITEM_ID((short)4, "chargeItemId"),
    MEDICAL_DOCTOR_ID((short)5, "medicalDoctorId"),
    PRICE((short)6, "price"),
    /**
     * 
     * @see PrescriptionItemStatusEnum
     */
    STATUS((short)7, "status"),
    NUM((short)8, "num"),
    VALID((short)255, "valid");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // PRESCRIPTION_ID
          return PRESCRIPTION_ID;
        case 3: // ITEM_ID
          return ITEM_ID;
        case 4: // CHARGE_ITEM_ID
          return CHARGE_ITEM_ID;
        case 5: // MEDICAL_DOCTOR_ID
          return MEDICAL_DOCTOR_ID;
        case 6: // PRICE
          return PRICE;
        case 7: // STATUS
          return STATUS;
        case 8: // NUM
          return NUM;
        case 255: // VALID
          return VALID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __PRESCRIPTIONID_ISSET_ID = 1;
  private static final int __ITEMID_ISSET_ID = 2;
  private static final int __CHARGEITEMID_ISSET_ID = 3;
  private static final int __MEDICALDOCTORID_ISSET_ID = 4;
  private static final int __PRICE_ISSET_ID = 5;
  private static final int __NUM_ISSET_ID = 6;
  private static final int __VALID_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.PRESCRIPTION_ID,_Fields.ITEM_ID,_Fields.CHARGE_ITEM_ID,_Fields.MEDICAL_DOCTOR_ID,_Fields.PRICE,_Fields.STATUS,_Fields.NUM,_Fields.VALID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PRESCRIPTION_ID, new org.apache.thrift.meta_data.FieldMetaData("prescriptionId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("itemId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CHARGE_ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("chargeItemId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MEDICAL_DOCTOR_ID, new org.apache.thrift.meta_data.FieldMetaData("medicalDoctorId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PRICE, new org.apache.thrift.meta_data.FieldMetaData("price", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PrescriptionItemStatusEnum.class)));
    tmpMap.put(_Fields.NUM, new org.apache.thrift.meta_data.FieldMetaData("num", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VALID, new org.apache.thrift.meta_data.FieldMetaData("valid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PrescriptionHerbItem.class, metaDataMap);
  }

  public PrescriptionHerbItem() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PrescriptionHerbItem(PrescriptionHerbItem other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.prescriptionId = other.prescriptionId;
    this.itemId = other.itemId;
    this.chargeItemId = other.chargeItemId;
    this.medicalDoctorId = other.medicalDoctorId;
    this.price = other.price;
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    this.num = other.num;
    this.valid = other.valid;
  }

  public PrescriptionHerbItem deepCopy() {
    return new PrescriptionHerbItem(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setPrescriptionIdIsSet(false);
    this.prescriptionId = 0;
    setItemIdIsSet(false);
    this.itemId = 0;
    setChargeItemIdIsSet(false);
    this.chargeItemId = 0;
    setMedicalDoctorIdIsSet(false);
    this.medicalDoctorId = 0;
    setPriceIsSet(false);
    this.price = 0.0;
    this.status = null;
    setNumIsSet(false);
    this.num = 0;
    setValidIsSet(false);
    this.valid = 0;
  }

  public long getId() {
    return this.id;
  }

  public PrescriptionHerbItem setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public long getPrescriptionId() {
    return this.prescriptionId;
  }

  public PrescriptionHerbItem setPrescriptionId(long prescriptionId) {
    this.prescriptionId = prescriptionId;
    setPrescriptionIdIsSet(true);
    return this;
  }

  public void unsetPrescriptionId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRESCRIPTIONID_ISSET_ID);
  }

  /** Returns true if field prescriptionId is set (has been assigned a value) and false otherwise */
  public boolean isSetPrescriptionId() {
    return EncodingUtils.testBit(__isset_bitfield, __PRESCRIPTIONID_ISSET_ID);
  }

  public void setPrescriptionIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRESCRIPTIONID_ISSET_ID, value);
  }

  public long getItemId() {
    return this.itemId;
  }

  public PrescriptionHerbItem setItemId(long itemId) {
    this.itemId = itemId;
    setItemIdIsSet(true);
    return this;
  }

  public void unsetItemId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ITEMID_ISSET_ID);
  }

  /** Returns true if field itemId is set (has been assigned a value) and false otherwise */
  public boolean isSetItemId() {
    return EncodingUtils.testBit(__isset_bitfield, __ITEMID_ISSET_ID);
  }

  public void setItemIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ITEMID_ISSET_ID, value);
  }

  public long getChargeItemId() {
    return this.chargeItemId;
  }

  public PrescriptionHerbItem setChargeItemId(long chargeItemId) {
    this.chargeItemId = chargeItemId;
    setChargeItemIdIsSet(true);
    return this;
  }

  public void unsetChargeItemId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHARGEITEMID_ISSET_ID);
  }

  /** Returns true if field chargeItemId is set (has been assigned a value) and false otherwise */
  public boolean isSetChargeItemId() {
    return EncodingUtils.testBit(__isset_bitfield, __CHARGEITEMID_ISSET_ID);
  }

  public void setChargeItemIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHARGEITEMID_ISSET_ID, value);
  }

  public long getMedicalDoctorId() {
    return this.medicalDoctorId;
  }

  public PrescriptionHerbItem setMedicalDoctorId(long medicalDoctorId) {
    this.medicalDoctorId = medicalDoctorId;
    setMedicalDoctorIdIsSet(true);
    return this;
  }

  public void unsetMedicalDoctorId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEDICALDOCTORID_ISSET_ID);
  }

  /** Returns true if field medicalDoctorId is set (has been assigned a value) and false otherwise */
  public boolean isSetMedicalDoctorId() {
    return EncodingUtils.testBit(__isset_bitfield, __MEDICALDOCTORID_ISSET_ID);
  }

  public void setMedicalDoctorIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEDICALDOCTORID_ISSET_ID, value);
  }

  public double getPrice() {
    return this.price;
  }

  public PrescriptionHerbItem setPrice(double price) {
    this.price = price;
    setPriceIsSet(true);
    return this;
  }

  public void unsetPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  /** Returns true if field price is set (has been assigned a value) and false otherwise */
  public boolean isSetPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  public void setPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRICE_ISSET_ID, value);
  }

  /**
   * 
   * @see PrescriptionItemStatusEnum
   */
  public PrescriptionItemStatusEnum getStatus() {
    return this.status;
  }

  /**
   * 
   * @see PrescriptionItemStatusEnum
   */
  public PrescriptionHerbItem setStatus(PrescriptionItemStatusEnum status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public int getNum() {
    return this.num;
  }

  public PrescriptionHerbItem setNum(int num) {
    this.num = num;
    setNumIsSet(true);
    return this;
  }

  public void unsetNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_ISSET_ID);
  }

  /** Returns true if field num is set (has been assigned a value) and false otherwise */
  public boolean isSetNum() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_ISSET_ID);
  }

  public void setNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_ISSET_ID, value);
  }

  public int getValid() {
    return this.valid;
  }

  public PrescriptionHerbItem setValid(int valid) {
    this.valid = valid;
    setValidIsSet(true);
    return this;
  }

  public void unsetValid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VALID_ISSET_ID);
  }

  /** Returns true if field valid is set (has been assigned a value) and false otherwise */
  public boolean isSetValid() {
    return EncodingUtils.testBit(__isset_bitfield, __VALID_ISSET_ID);
  }

  public void setValidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VALID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case PRESCRIPTION_ID:
      if (value == null) {
        unsetPrescriptionId();
      } else {
        setPrescriptionId((Long)value);
      }
      break;

    case ITEM_ID:
      if (value == null) {
        unsetItemId();
      } else {
        setItemId((Long)value);
      }
      break;

    case CHARGE_ITEM_ID:
      if (value == null) {
        unsetChargeItemId();
      } else {
        setChargeItemId((Long)value);
      }
      break;

    case MEDICAL_DOCTOR_ID:
      if (value == null) {
        unsetMedicalDoctorId();
      } else {
        setMedicalDoctorId((Long)value);
      }
      break;

    case PRICE:
      if (value == null) {
        unsetPrice();
      } else {
        setPrice((Double)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((PrescriptionItemStatusEnum)value);
      }
      break;

    case NUM:
      if (value == null) {
        unsetNum();
      } else {
        setNum((Integer)value);
      }
      break;

    case VALID:
      if (value == null) {
        unsetValid();
      } else {
        setValid((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case PRESCRIPTION_ID:
      return Long.valueOf(getPrescriptionId());

    case ITEM_ID:
      return Long.valueOf(getItemId());

    case CHARGE_ITEM_ID:
      return Long.valueOf(getChargeItemId());

    case MEDICAL_DOCTOR_ID:
      return Long.valueOf(getMedicalDoctorId());

    case PRICE:
      return Double.valueOf(getPrice());

    case STATUS:
      return getStatus();

    case NUM:
      return Integer.valueOf(getNum());

    case VALID:
      return Integer.valueOf(getValid());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case PRESCRIPTION_ID:
      return isSetPrescriptionId();
    case ITEM_ID:
      return isSetItemId();
    case CHARGE_ITEM_ID:
      return isSetChargeItemId();
    case MEDICAL_DOCTOR_ID:
      return isSetMedicalDoctorId();
    case PRICE:
      return isSetPrice();
    case STATUS:
      return isSetStatus();
    case NUM:
      return isSetNum();
    case VALID:
      return isSetValid();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PrescriptionHerbItem)
      return this.equals((PrescriptionHerbItem)that);
    return false;
  }

  public boolean equals(PrescriptionHerbItem that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_prescriptionId = true && this.isSetPrescriptionId();
    boolean that_present_prescriptionId = true && that.isSetPrescriptionId();
    if (this_present_prescriptionId || that_present_prescriptionId) {
      if (!(this_present_prescriptionId && that_present_prescriptionId))
        return false;
      if (this.prescriptionId != that.prescriptionId)
        return false;
    }

    boolean this_present_itemId = true && this.isSetItemId();
    boolean that_present_itemId = true && that.isSetItemId();
    if (this_present_itemId || that_present_itemId) {
      if (!(this_present_itemId && that_present_itemId))
        return false;
      if (this.itemId != that.itemId)
        return false;
    }

    boolean this_present_chargeItemId = true && this.isSetChargeItemId();
    boolean that_present_chargeItemId = true && that.isSetChargeItemId();
    if (this_present_chargeItemId || that_present_chargeItemId) {
      if (!(this_present_chargeItemId && that_present_chargeItemId))
        return false;
      if (this.chargeItemId != that.chargeItemId)
        return false;
    }

    boolean this_present_medicalDoctorId = true && this.isSetMedicalDoctorId();
    boolean that_present_medicalDoctorId = true && that.isSetMedicalDoctorId();
    if (this_present_medicalDoctorId || that_present_medicalDoctorId) {
      if (!(this_present_medicalDoctorId && that_present_medicalDoctorId))
        return false;
      if (this.medicalDoctorId != that.medicalDoctorId)
        return false;
    }

    boolean this_present_price = true && this.isSetPrice();
    boolean that_present_price = true && that.isSetPrice();
    if (this_present_price || that_present_price) {
      if (!(this_present_price && that_present_price))
        return false;
      if (this.price != that.price)
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_num = true && this.isSetNum();
    boolean that_present_num = true && that.isSetNum();
    if (this_present_num || that_present_num) {
      if (!(this_present_num && that_present_num))
        return false;
      if (this.num != that.num)
        return false;
    }

    boolean this_present_valid = true && this.isSetValid();
    boolean that_present_valid = true && that.isSetValid();
    if (this_present_valid || that_present_valid) {
      if (!(this_present_valid && that_present_valid))
        return false;
      if (this.valid != that.valid)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_prescriptionId = true && (isSetPrescriptionId());
    list.add(present_prescriptionId);
    if (present_prescriptionId)
      list.add(prescriptionId);

    boolean present_itemId = true && (isSetItemId());
    list.add(present_itemId);
    if (present_itemId)
      list.add(itemId);

    boolean present_chargeItemId = true && (isSetChargeItemId());
    list.add(present_chargeItemId);
    if (present_chargeItemId)
      list.add(chargeItemId);

    boolean present_medicalDoctorId = true && (isSetMedicalDoctorId());
    list.add(present_medicalDoctorId);
    if (present_medicalDoctorId)
      list.add(medicalDoctorId);

    boolean present_price = true && (isSetPrice());
    list.add(present_price);
    if (present_price)
      list.add(price);

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status.getValue());

    boolean present_num = true && (isSetNum());
    list.add(present_num);
    if (present_num)
      list.add(num);

    boolean present_valid = true && (isSetValid());
    list.add(present_valid);
    if (present_valid)
      list.add(valid);

    return list.hashCode();
  }

  @Override
  public int compareTo(PrescriptionHerbItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrescriptionId()).compareTo(other.isSetPrescriptionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrescriptionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prescriptionId, other.prescriptionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItemId()).compareTo(other.isSetItemId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemId, other.itemId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChargeItemId()).compareTo(other.isSetChargeItemId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChargeItemId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chargeItemId, other.chargeItemId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMedicalDoctorId()).compareTo(other.isSetMedicalDoctorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMedicalDoctorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.medicalDoctorId, other.medicalDoctorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrice()).compareTo(other.isSetPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.price, other.price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum()).compareTo(other.isSetNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num, other.num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValid()).compareTo(other.isSetValid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.valid, other.valid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PrescriptionHerbItem(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetPrescriptionId()) {
      if (!first) sb.append(", ");
      sb.append("prescriptionId:");
      sb.append(this.prescriptionId);
      first = false;
    }
    if (isSetItemId()) {
      if (!first) sb.append(", ");
      sb.append("itemId:");
      sb.append(this.itemId);
      first = false;
    }
    if (isSetChargeItemId()) {
      if (!first) sb.append(", ");
      sb.append("chargeItemId:");
      sb.append(this.chargeItemId);
      first = false;
    }
    if (isSetMedicalDoctorId()) {
      if (!first) sb.append(", ");
      sb.append("medicalDoctorId:");
      sb.append(this.medicalDoctorId);
      first = false;
    }
    if (isSetPrice()) {
      if (!first) sb.append(", ");
      sb.append("price:");
      sb.append(this.price);
      first = false;
    }
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
    }
    if (isSetNum()) {
      if (!first) sb.append(", ");
      sb.append("num:");
      sb.append(this.num);
      first = false;
    }
    if (isSetValid()) {
      if (!first) sb.append(", ");
      sb.append("valid:");
      sb.append(this.valid);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PrescriptionHerbItemStandardSchemeFactory implements SchemeFactory {
    public PrescriptionHerbItemStandardScheme getScheme() {
      return new PrescriptionHerbItemStandardScheme();
    }
  }

  private static class PrescriptionHerbItemStandardScheme extends StandardScheme<PrescriptionHerbItem> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PrescriptionHerbItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PRESCRIPTION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.prescriptionId = iprot.readI64();
              struct.setPrescriptionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ITEM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.itemId = iprot.readI64();
              struct.setItemIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CHARGE_ITEM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.chargeItemId = iprot.readI64();
              struct.setChargeItemIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MEDICAL_DOCTOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.medicalDoctorId = iprot.readI64();
              struct.setMedicalDoctorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.price = iprot.readDouble();
              struct.setPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = top.itcat.rpc.service.model.PrescriptionItemStatusEnum.findByValue(iprot.readI32());
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num = iprot.readI32();
              struct.setNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 255: // VALID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.valid = iprot.readI32();
              struct.setValidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PrescriptionHerbItem struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPrescriptionId()) {
        oprot.writeFieldBegin(PRESCRIPTION_ID_FIELD_DESC);
        oprot.writeI64(struct.prescriptionId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetItemId()) {
        oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
        oprot.writeI64(struct.itemId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetChargeItemId()) {
        oprot.writeFieldBegin(CHARGE_ITEM_ID_FIELD_DESC);
        oprot.writeI64(struct.chargeItemId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMedicalDoctorId()) {
        oprot.writeFieldBegin(MEDICAL_DOCTOR_ID_FIELD_DESC);
        oprot.writeI64(struct.medicalDoctorId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPrice()) {
        oprot.writeFieldBegin(PRICE_FIELD_DESC);
        oprot.writeDouble(struct.price);
        oprot.writeFieldEnd();
      }
      if (struct.status != null) {
        if (struct.isSetStatus()) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          oprot.writeI32(struct.status.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetNum()) {
        oprot.writeFieldBegin(NUM_FIELD_DESC);
        oprot.writeI32(struct.num);
        oprot.writeFieldEnd();
      }
      if (struct.isSetValid()) {
        oprot.writeFieldBegin(VALID_FIELD_DESC);
        oprot.writeI32(struct.valid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PrescriptionHerbItemTupleSchemeFactory implements SchemeFactory {
    public PrescriptionHerbItemTupleScheme getScheme() {
      return new PrescriptionHerbItemTupleScheme();
    }
  }

  private static class PrescriptionHerbItemTupleScheme extends TupleScheme<PrescriptionHerbItem> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PrescriptionHerbItem struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetPrescriptionId()) {
        optionals.set(1);
      }
      if (struct.isSetItemId()) {
        optionals.set(2);
      }
      if (struct.isSetChargeItemId()) {
        optionals.set(3);
      }
      if (struct.isSetMedicalDoctorId()) {
        optionals.set(4);
      }
      if (struct.isSetPrice()) {
        optionals.set(5);
      }
      if (struct.isSetStatus()) {
        optionals.set(6);
      }
      if (struct.isSetNum()) {
        optionals.set(7);
      }
      if (struct.isSetValid()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetPrescriptionId()) {
        oprot.writeI64(struct.prescriptionId);
      }
      if (struct.isSetItemId()) {
        oprot.writeI64(struct.itemId);
      }
      if (struct.isSetChargeItemId()) {
        oprot.writeI64(struct.chargeItemId);
      }
      if (struct.isSetMedicalDoctorId()) {
        oprot.writeI64(struct.medicalDoctorId);
      }
      if (struct.isSetPrice()) {
        oprot.writeDouble(struct.price);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status.getValue());
      }
      if (struct.isSetNum()) {
        oprot.writeI32(struct.num);
      }
      if (struct.isSetValid()) {
        oprot.writeI32(struct.valid);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PrescriptionHerbItem struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.prescriptionId = iprot.readI64();
        struct.setPrescriptionIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.itemId = iprot.readI64();
        struct.setItemIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.chargeItemId = iprot.readI64();
        struct.setChargeItemIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.medicalDoctorId = iprot.readI64();
        struct.setMedicalDoctorIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.price = iprot.readDouble();
        struct.setPriceIsSet(true);
      }
      if (incoming.get(6)) {
        struct.status = top.itcat.rpc.service.model.PrescriptionItemStatusEnum.findByValue(iprot.readI32());
        struct.setStatusIsSet(true);
      }
      if (incoming.get(7)) {
        struct.num = iprot.readI32();
        struct.setNumIsSet(true);
      }
      if (incoming.get(8)) {
        struct.valid = iprot.readI32();
        struct.setValidIsSet(true);
      }
    }
  }

}

