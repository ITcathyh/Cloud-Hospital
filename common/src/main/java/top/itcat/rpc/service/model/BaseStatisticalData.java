/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package top.itcat.rpc.service.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2019-7-3")
public class BaseStatisticalData implements org.apache.thrift.TBase<BaseStatisticalData, BaseStatisticalData._Fields>, java.io.Serializable, Cloneable, Comparable<BaseStatisticalData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BaseStatisticalData");

  private static final org.apache.thrift.protocol.TField OTHER_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("otherFee", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField PATIENT_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("patientNum", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PRESCRIPTION_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("prescriptionNum", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField WESTERN_MEDICINE_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("westernMedicineFee", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField CHINESE_MEDICINE_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("chineseMedicineFee", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField PATENT_MEDICINE_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("patentMedicineFee", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField REGISTRATION_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("registrationFee", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField EXAMINATION_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("examinationFee", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField VERIFICATION_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("verificationFee", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField INSPECTION_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("inspectionFee", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField TREAT_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("treatFee", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField TREAT_FEE_INCLUDE_MATERIAL_FIELD_DESC = new org.apache.thrift.protocol.TField("treatFeeIncludeMaterial", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField OPERATION_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("operationFee", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField VALID_FIELD_DESC = new org.apache.thrift.protocol.TField("valid", org.apache.thrift.protocol.TType.I32, (short)255);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BaseStatisticalDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BaseStatisticalDataTupleSchemeFactory());
  }

  public double otherFee; // optional
  public int patientNum; // optional
  public int prescriptionNum; // optional
  public double westernMedicineFee; // optional
  public double chineseMedicineFee; // optional
  public double patentMedicineFee; // optional
  public double registrationFee; // optional
  public double examinationFee; // optional
  public double verificationFee; // optional
  public double inspectionFee; // optional
  public double treatFee; // optional
  public double treatFeeIncludeMaterial; // optional
  public double operationFee; // optional
  public int valid; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    OTHER_FEE((short)1, "otherFee"),
    PATIENT_NUM((short)2, "patientNum"),
    PRESCRIPTION_NUM((short)3, "prescriptionNum"),
    WESTERN_MEDICINE_FEE((short)4, "westernMedicineFee"),
    CHINESE_MEDICINE_FEE((short)5, "chineseMedicineFee"),
    PATENT_MEDICINE_FEE((short)6, "patentMedicineFee"),
    REGISTRATION_FEE((short)7, "registrationFee"),
    EXAMINATION_FEE((short)8, "examinationFee"),
    VERIFICATION_FEE((short)9, "verificationFee"),
    INSPECTION_FEE((short)10, "inspectionFee"),
    TREAT_FEE((short)11, "treatFee"),
    TREAT_FEE_INCLUDE_MATERIAL((short)12, "treatFeeIncludeMaterial"),
    OPERATION_FEE((short)13, "operationFee"),
    VALID((short)255, "valid");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OTHER_FEE
          return OTHER_FEE;
        case 2: // PATIENT_NUM
          return PATIENT_NUM;
        case 3: // PRESCRIPTION_NUM
          return PRESCRIPTION_NUM;
        case 4: // WESTERN_MEDICINE_FEE
          return WESTERN_MEDICINE_FEE;
        case 5: // CHINESE_MEDICINE_FEE
          return CHINESE_MEDICINE_FEE;
        case 6: // PATENT_MEDICINE_FEE
          return PATENT_MEDICINE_FEE;
        case 7: // REGISTRATION_FEE
          return REGISTRATION_FEE;
        case 8: // EXAMINATION_FEE
          return EXAMINATION_FEE;
        case 9: // VERIFICATION_FEE
          return VERIFICATION_FEE;
        case 10: // INSPECTION_FEE
          return INSPECTION_FEE;
        case 11: // TREAT_FEE
          return TREAT_FEE;
        case 12: // TREAT_FEE_INCLUDE_MATERIAL
          return TREAT_FEE_INCLUDE_MATERIAL;
        case 13: // OPERATION_FEE
          return OPERATION_FEE;
        case 255: // VALID
          return VALID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __OTHERFEE_ISSET_ID = 0;
  private static final int __PATIENTNUM_ISSET_ID = 1;
  private static final int __PRESCRIPTIONNUM_ISSET_ID = 2;
  private static final int __WESTERNMEDICINEFEE_ISSET_ID = 3;
  private static final int __CHINESEMEDICINEFEE_ISSET_ID = 4;
  private static final int __PATENTMEDICINEFEE_ISSET_ID = 5;
  private static final int __REGISTRATIONFEE_ISSET_ID = 6;
  private static final int __EXAMINATIONFEE_ISSET_ID = 7;
  private static final int __VERIFICATIONFEE_ISSET_ID = 8;
  private static final int __INSPECTIONFEE_ISSET_ID = 9;
  private static final int __TREATFEE_ISSET_ID = 10;
  private static final int __TREATFEEINCLUDEMATERIAL_ISSET_ID = 11;
  private static final int __OPERATIONFEE_ISSET_ID = 12;
  private static final int __VALID_ISSET_ID = 13;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.OTHER_FEE,_Fields.PATIENT_NUM,_Fields.PRESCRIPTION_NUM,_Fields.WESTERN_MEDICINE_FEE,_Fields.CHINESE_MEDICINE_FEE,_Fields.PATENT_MEDICINE_FEE,_Fields.REGISTRATION_FEE,_Fields.EXAMINATION_FEE,_Fields.VERIFICATION_FEE,_Fields.INSPECTION_FEE,_Fields.TREAT_FEE,_Fields.TREAT_FEE_INCLUDE_MATERIAL,_Fields.OPERATION_FEE,_Fields.VALID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OTHER_FEE, new org.apache.thrift.meta_data.FieldMetaData("otherFee", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PATIENT_NUM, new org.apache.thrift.meta_data.FieldMetaData("patientNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRESCRIPTION_NUM, new org.apache.thrift.meta_data.FieldMetaData("prescriptionNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WESTERN_MEDICINE_FEE, new org.apache.thrift.meta_data.FieldMetaData("westernMedicineFee", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CHINESE_MEDICINE_FEE, new org.apache.thrift.meta_data.FieldMetaData("chineseMedicineFee", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PATENT_MEDICINE_FEE, new org.apache.thrift.meta_data.FieldMetaData("patentMedicineFee", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REGISTRATION_FEE, new org.apache.thrift.meta_data.FieldMetaData("registrationFee", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.EXAMINATION_FEE, new org.apache.thrift.meta_data.FieldMetaData("examinationFee", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.VERIFICATION_FEE, new org.apache.thrift.meta_data.FieldMetaData("verificationFee", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.INSPECTION_FEE, new org.apache.thrift.meta_data.FieldMetaData("inspectionFee", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TREAT_FEE, new org.apache.thrift.meta_data.FieldMetaData("treatFee", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TREAT_FEE_INCLUDE_MATERIAL, new org.apache.thrift.meta_data.FieldMetaData("treatFeeIncludeMaterial", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OPERATION_FEE, new org.apache.thrift.meta_data.FieldMetaData("operationFee", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.VALID, new org.apache.thrift.meta_data.FieldMetaData("valid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BaseStatisticalData.class, metaDataMap);
  }

  public BaseStatisticalData() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BaseStatisticalData(BaseStatisticalData other) {
    __isset_bitfield = other.__isset_bitfield;
    this.otherFee = other.otherFee;
    this.patientNum = other.patientNum;
    this.prescriptionNum = other.prescriptionNum;
    this.westernMedicineFee = other.westernMedicineFee;
    this.chineseMedicineFee = other.chineseMedicineFee;
    this.patentMedicineFee = other.patentMedicineFee;
    this.registrationFee = other.registrationFee;
    this.examinationFee = other.examinationFee;
    this.verificationFee = other.verificationFee;
    this.inspectionFee = other.inspectionFee;
    this.treatFee = other.treatFee;
    this.treatFeeIncludeMaterial = other.treatFeeIncludeMaterial;
    this.operationFee = other.operationFee;
    this.valid = other.valid;
  }

  public BaseStatisticalData deepCopy() {
    return new BaseStatisticalData(this);
  }

  @Override
  public void clear() {
    setOtherFeeIsSet(false);
    this.otherFee = 0.0;
    setPatientNumIsSet(false);
    this.patientNum = 0;
    setPrescriptionNumIsSet(false);
    this.prescriptionNum = 0;
    setWesternMedicineFeeIsSet(false);
    this.westernMedicineFee = 0.0;
    setChineseMedicineFeeIsSet(false);
    this.chineseMedicineFee = 0.0;
    setPatentMedicineFeeIsSet(false);
    this.patentMedicineFee = 0.0;
    setRegistrationFeeIsSet(false);
    this.registrationFee = 0.0;
    setExaminationFeeIsSet(false);
    this.examinationFee = 0.0;
    setVerificationFeeIsSet(false);
    this.verificationFee = 0.0;
    setInspectionFeeIsSet(false);
    this.inspectionFee = 0.0;
    setTreatFeeIsSet(false);
    this.treatFee = 0.0;
    setTreatFeeIncludeMaterialIsSet(false);
    this.treatFeeIncludeMaterial = 0.0;
    setOperationFeeIsSet(false);
    this.operationFee = 0.0;
    setValidIsSet(false);
    this.valid = 0;
  }

  public double getOtherFee() {
    return this.otherFee;
  }

  public BaseStatisticalData setOtherFee(double otherFee) {
    this.otherFee = otherFee;
    setOtherFeeIsSet(true);
    return this;
  }

  public void unsetOtherFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OTHERFEE_ISSET_ID);
  }

  /** Returns true if field otherFee is set (has been assigned a value) and false otherwise */
  public boolean isSetOtherFee() {
    return EncodingUtils.testBit(__isset_bitfield, __OTHERFEE_ISSET_ID);
  }

  public void setOtherFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OTHERFEE_ISSET_ID, value);
  }

  public int getPatientNum() {
    return this.patientNum;
  }

  public BaseStatisticalData setPatientNum(int patientNum) {
    this.patientNum = patientNum;
    setPatientNumIsSet(true);
    return this;
  }

  public void unsetPatientNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PATIENTNUM_ISSET_ID);
  }

  /** Returns true if field patientNum is set (has been assigned a value) and false otherwise */
  public boolean isSetPatientNum() {
    return EncodingUtils.testBit(__isset_bitfield, __PATIENTNUM_ISSET_ID);
  }

  public void setPatientNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PATIENTNUM_ISSET_ID, value);
  }

  public int getPrescriptionNum() {
    return this.prescriptionNum;
  }

  public BaseStatisticalData setPrescriptionNum(int prescriptionNum) {
    this.prescriptionNum = prescriptionNum;
    setPrescriptionNumIsSet(true);
    return this;
  }

  public void unsetPrescriptionNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRESCRIPTIONNUM_ISSET_ID);
  }

  /** Returns true if field prescriptionNum is set (has been assigned a value) and false otherwise */
  public boolean isSetPrescriptionNum() {
    return EncodingUtils.testBit(__isset_bitfield, __PRESCRIPTIONNUM_ISSET_ID);
  }

  public void setPrescriptionNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRESCRIPTIONNUM_ISSET_ID, value);
  }

  public double getWesternMedicineFee() {
    return this.westernMedicineFee;
  }

  public BaseStatisticalData setWesternMedicineFee(double westernMedicineFee) {
    this.westernMedicineFee = westernMedicineFee;
    setWesternMedicineFeeIsSet(true);
    return this;
  }

  public void unsetWesternMedicineFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WESTERNMEDICINEFEE_ISSET_ID);
  }

  /** Returns true if field westernMedicineFee is set (has been assigned a value) and false otherwise */
  public boolean isSetWesternMedicineFee() {
    return EncodingUtils.testBit(__isset_bitfield, __WESTERNMEDICINEFEE_ISSET_ID);
  }

  public void setWesternMedicineFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WESTERNMEDICINEFEE_ISSET_ID, value);
  }

  public double getChineseMedicineFee() {
    return this.chineseMedicineFee;
  }

  public BaseStatisticalData setChineseMedicineFee(double chineseMedicineFee) {
    this.chineseMedicineFee = chineseMedicineFee;
    setChineseMedicineFeeIsSet(true);
    return this;
  }

  public void unsetChineseMedicineFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHINESEMEDICINEFEE_ISSET_ID);
  }

  /** Returns true if field chineseMedicineFee is set (has been assigned a value) and false otherwise */
  public boolean isSetChineseMedicineFee() {
    return EncodingUtils.testBit(__isset_bitfield, __CHINESEMEDICINEFEE_ISSET_ID);
  }

  public void setChineseMedicineFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHINESEMEDICINEFEE_ISSET_ID, value);
  }

  public double getPatentMedicineFee() {
    return this.patentMedicineFee;
  }

  public BaseStatisticalData setPatentMedicineFee(double patentMedicineFee) {
    this.patentMedicineFee = patentMedicineFee;
    setPatentMedicineFeeIsSet(true);
    return this;
  }

  public void unsetPatentMedicineFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PATENTMEDICINEFEE_ISSET_ID);
  }

  /** Returns true if field patentMedicineFee is set (has been assigned a value) and false otherwise */
  public boolean isSetPatentMedicineFee() {
    return EncodingUtils.testBit(__isset_bitfield, __PATENTMEDICINEFEE_ISSET_ID);
  }

  public void setPatentMedicineFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PATENTMEDICINEFEE_ISSET_ID, value);
  }

  public double getRegistrationFee() {
    return this.registrationFee;
  }

  public BaseStatisticalData setRegistrationFee(double registrationFee) {
    this.registrationFee = registrationFee;
    setRegistrationFeeIsSet(true);
    return this;
  }

  public void unsetRegistrationFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REGISTRATIONFEE_ISSET_ID);
  }

  /** Returns true if field registrationFee is set (has been assigned a value) and false otherwise */
  public boolean isSetRegistrationFee() {
    return EncodingUtils.testBit(__isset_bitfield, __REGISTRATIONFEE_ISSET_ID);
  }

  public void setRegistrationFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REGISTRATIONFEE_ISSET_ID, value);
  }

  public double getExaminationFee() {
    return this.examinationFee;
  }

  public BaseStatisticalData setExaminationFee(double examinationFee) {
    this.examinationFee = examinationFee;
    setExaminationFeeIsSet(true);
    return this;
  }

  public void unsetExaminationFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXAMINATIONFEE_ISSET_ID);
  }

  /** Returns true if field examinationFee is set (has been assigned a value) and false otherwise */
  public boolean isSetExaminationFee() {
    return EncodingUtils.testBit(__isset_bitfield, __EXAMINATIONFEE_ISSET_ID);
  }

  public void setExaminationFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXAMINATIONFEE_ISSET_ID, value);
  }

  public double getVerificationFee() {
    return this.verificationFee;
  }

  public BaseStatisticalData setVerificationFee(double verificationFee) {
    this.verificationFee = verificationFee;
    setVerificationFeeIsSet(true);
    return this;
  }

  public void unsetVerificationFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERIFICATIONFEE_ISSET_ID);
  }

  /** Returns true if field verificationFee is set (has been assigned a value) and false otherwise */
  public boolean isSetVerificationFee() {
    return EncodingUtils.testBit(__isset_bitfield, __VERIFICATIONFEE_ISSET_ID);
  }

  public void setVerificationFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERIFICATIONFEE_ISSET_ID, value);
  }

  public double getInspectionFee() {
    return this.inspectionFee;
  }

  public BaseStatisticalData setInspectionFee(double inspectionFee) {
    this.inspectionFee = inspectionFee;
    setInspectionFeeIsSet(true);
    return this;
  }

  public void unsetInspectionFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INSPECTIONFEE_ISSET_ID);
  }

  /** Returns true if field inspectionFee is set (has been assigned a value) and false otherwise */
  public boolean isSetInspectionFee() {
    return EncodingUtils.testBit(__isset_bitfield, __INSPECTIONFEE_ISSET_ID);
  }

  public void setInspectionFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INSPECTIONFEE_ISSET_ID, value);
  }

  public double getTreatFee() {
    return this.treatFee;
  }

  public BaseStatisticalData setTreatFee(double treatFee) {
    this.treatFee = treatFee;
    setTreatFeeIsSet(true);
    return this;
  }

  public void unsetTreatFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TREATFEE_ISSET_ID);
  }

  /** Returns true if field treatFee is set (has been assigned a value) and false otherwise */
  public boolean isSetTreatFee() {
    return EncodingUtils.testBit(__isset_bitfield, __TREATFEE_ISSET_ID);
  }

  public void setTreatFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TREATFEE_ISSET_ID, value);
  }

  public double getTreatFeeIncludeMaterial() {
    return this.treatFeeIncludeMaterial;
  }

  public BaseStatisticalData setTreatFeeIncludeMaterial(double treatFeeIncludeMaterial) {
    this.treatFeeIncludeMaterial = treatFeeIncludeMaterial;
    setTreatFeeIncludeMaterialIsSet(true);
    return this;
  }

  public void unsetTreatFeeIncludeMaterial() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TREATFEEINCLUDEMATERIAL_ISSET_ID);
  }

  /** Returns true if field treatFeeIncludeMaterial is set (has been assigned a value) and false otherwise */
  public boolean isSetTreatFeeIncludeMaterial() {
    return EncodingUtils.testBit(__isset_bitfield, __TREATFEEINCLUDEMATERIAL_ISSET_ID);
  }

  public void setTreatFeeIncludeMaterialIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TREATFEEINCLUDEMATERIAL_ISSET_ID, value);
  }

  public double getOperationFee() {
    return this.operationFee;
  }

  public BaseStatisticalData setOperationFee(double operationFee) {
    this.operationFee = operationFee;
    setOperationFeeIsSet(true);
    return this;
  }

  public void unsetOperationFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPERATIONFEE_ISSET_ID);
  }

  /** Returns true if field operationFee is set (has been assigned a value) and false otherwise */
  public boolean isSetOperationFee() {
    return EncodingUtils.testBit(__isset_bitfield, __OPERATIONFEE_ISSET_ID);
  }

  public void setOperationFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPERATIONFEE_ISSET_ID, value);
  }

  public int getValid() {
    return this.valid;
  }

  public BaseStatisticalData setValid(int valid) {
    this.valid = valid;
    setValidIsSet(true);
    return this;
  }

  public void unsetValid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VALID_ISSET_ID);
  }

  /** Returns true if field valid is set (has been assigned a value) and false otherwise */
  public boolean isSetValid() {
    return EncodingUtils.testBit(__isset_bitfield, __VALID_ISSET_ID);
  }

  public void setValidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VALID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case OTHER_FEE:
      if (value == null) {
        unsetOtherFee();
      } else {
        setOtherFee((Double)value);
      }
      break;

    case PATIENT_NUM:
      if (value == null) {
        unsetPatientNum();
      } else {
        setPatientNum((Integer)value);
      }
      break;

    case PRESCRIPTION_NUM:
      if (value == null) {
        unsetPrescriptionNum();
      } else {
        setPrescriptionNum((Integer)value);
      }
      break;

    case WESTERN_MEDICINE_FEE:
      if (value == null) {
        unsetWesternMedicineFee();
      } else {
        setWesternMedicineFee((Double)value);
      }
      break;

    case CHINESE_MEDICINE_FEE:
      if (value == null) {
        unsetChineseMedicineFee();
      } else {
        setChineseMedicineFee((Double)value);
      }
      break;

    case PATENT_MEDICINE_FEE:
      if (value == null) {
        unsetPatentMedicineFee();
      } else {
        setPatentMedicineFee((Double)value);
      }
      break;

    case REGISTRATION_FEE:
      if (value == null) {
        unsetRegistrationFee();
      } else {
        setRegistrationFee((Double)value);
      }
      break;

    case EXAMINATION_FEE:
      if (value == null) {
        unsetExaminationFee();
      } else {
        setExaminationFee((Double)value);
      }
      break;

    case VERIFICATION_FEE:
      if (value == null) {
        unsetVerificationFee();
      } else {
        setVerificationFee((Double)value);
      }
      break;

    case INSPECTION_FEE:
      if (value == null) {
        unsetInspectionFee();
      } else {
        setInspectionFee((Double)value);
      }
      break;

    case TREAT_FEE:
      if (value == null) {
        unsetTreatFee();
      } else {
        setTreatFee((Double)value);
      }
      break;

    case TREAT_FEE_INCLUDE_MATERIAL:
      if (value == null) {
        unsetTreatFeeIncludeMaterial();
      } else {
        setTreatFeeIncludeMaterial((Double)value);
      }
      break;

    case OPERATION_FEE:
      if (value == null) {
        unsetOperationFee();
      } else {
        setOperationFee((Double)value);
      }
      break;

    case VALID:
      if (value == null) {
        unsetValid();
      } else {
        setValid((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case OTHER_FEE:
      return Double.valueOf(getOtherFee());

    case PATIENT_NUM:
      return Integer.valueOf(getPatientNum());

    case PRESCRIPTION_NUM:
      return Integer.valueOf(getPrescriptionNum());

    case WESTERN_MEDICINE_FEE:
      return Double.valueOf(getWesternMedicineFee());

    case CHINESE_MEDICINE_FEE:
      return Double.valueOf(getChineseMedicineFee());

    case PATENT_MEDICINE_FEE:
      return Double.valueOf(getPatentMedicineFee());

    case REGISTRATION_FEE:
      return Double.valueOf(getRegistrationFee());

    case EXAMINATION_FEE:
      return Double.valueOf(getExaminationFee());

    case VERIFICATION_FEE:
      return Double.valueOf(getVerificationFee());

    case INSPECTION_FEE:
      return Double.valueOf(getInspectionFee());

    case TREAT_FEE:
      return Double.valueOf(getTreatFee());

    case TREAT_FEE_INCLUDE_MATERIAL:
      return Double.valueOf(getTreatFeeIncludeMaterial());

    case OPERATION_FEE:
      return Double.valueOf(getOperationFee());

    case VALID:
      return Integer.valueOf(getValid());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case OTHER_FEE:
      return isSetOtherFee();
    case PATIENT_NUM:
      return isSetPatientNum();
    case PRESCRIPTION_NUM:
      return isSetPrescriptionNum();
    case WESTERN_MEDICINE_FEE:
      return isSetWesternMedicineFee();
    case CHINESE_MEDICINE_FEE:
      return isSetChineseMedicineFee();
    case PATENT_MEDICINE_FEE:
      return isSetPatentMedicineFee();
    case REGISTRATION_FEE:
      return isSetRegistrationFee();
    case EXAMINATION_FEE:
      return isSetExaminationFee();
    case VERIFICATION_FEE:
      return isSetVerificationFee();
    case INSPECTION_FEE:
      return isSetInspectionFee();
    case TREAT_FEE:
      return isSetTreatFee();
    case TREAT_FEE_INCLUDE_MATERIAL:
      return isSetTreatFeeIncludeMaterial();
    case OPERATION_FEE:
      return isSetOperationFee();
    case VALID:
      return isSetValid();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BaseStatisticalData)
      return this.equals((BaseStatisticalData)that);
    return false;
  }

  public boolean equals(BaseStatisticalData that) {
    if (that == null)
      return false;

    boolean this_present_otherFee = true && this.isSetOtherFee();
    boolean that_present_otherFee = true && that.isSetOtherFee();
    if (this_present_otherFee || that_present_otherFee) {
      if (!(this_present_otherFee && that_present_otherFee))
        return false;
      if (this.otherFee != that.otherFee)
        return false;
    }

    boolean this_present_patientNum = true && this.isSetPatientNum();
    boolean that_present_patientNum = true && that.isSetPatientNum();
    if (this_present_patientNum || that_present_patientNum) {
      if (!(this_present_patientNum && that_present_patientNum))
        return false;
      if (this.patientNum != that.patientNum)
        return false;
    }

    boolean this_present_prescriptionNum = true && this.isSetPrescriptionNum();
    boolean that_present_prescriptionNum = true && that.isSetPrescriptionNum();
    if (this_present_prescriptionNum || that_present_prescriptionNum) {
      if (!(this_present_prescriptionNum && that_present_prescriptionNum))
        return false;
      if (this.prescriptionNum != that.prescriptionNum)
        return false;
    }

    boolean this_present_westernMedicineFee = true && this.isSetWesternMedicineFee();
    boolean that_present_westernMedicineFee = true && that.isSetWesternMedicineFee();
    if (this_present_westernMedicineFee || that_present_westernMedicineFee) {
      if (!(this_present_westernMedicineFee && that_present_westernMedicineFee))
        return false;
      if (this.westernMedicineFee != that.westernMedicineFee)
        return false;
    }

    boolean this_present_chineseMedicineFee = true && this.isSetChineseMedicineFee();
    boolean that_present_chineseMedicineFee = true && that.isSetChineseMedicineFee();
    if (this_present_chineseMedicineFee || that_present_chineseMedicineFee) {
      if (!(this_present_chineseMedicineFee && that_present_chineseMedicineFee))
        return false;
      if (this.chineseMedicineFee != that.chineseMedicineFee)
        return false;
    }

    boolean this_present_patentMedicineFee = true && this.isSetPatentMedicineFee();
    boolean that_present_patentMedicineFee = true && that.isSetPatentMedicineFee();
    if (this_present_patentMedicineFee || that_present_patentMedicineFee) {
      if (!(this_present_patentMedicineFee && that_present_patentMedicineFee))
        return false;
      if (this.patentMedicineFee != that.patentMedicineFee)
        return false;
    }

    boolean this_present_registrationFee = true && this.isSetRegistrationFee();
    boolean that_present_registrationFee = true && that.isSetRegistrationFee();
    if (this_present_registrationFee || that_present_registrationFee) {
      if (!(this_present_registrationFee && that_present_registrationFee))
        return false;
      if (this.registrationFee != that.registrationFee)
        return false;
    }

    boolean this_present_examinationFee = true && this.isSetExaminationFee();
    boolean that_present_examinationFee = true && that.isSetExaminationFee();
    if (this_present_examinationFee || that_present_examinationFee) {
      if (!(this_present_examinationFee && that_present_examinationFee))
        return false;
      if (this.examinationFee != that.examinationFee)
        return false;
    }

    boolean this_present_verificationFee = true && this.isSetVerificationFee();
    boolean that_present_verificationFee = true && that.isSetVerificationFee();
    if (this_present_verificationFee || that_present_verificationFee) {
      if (!(this_present_verificationFee && that_present_verificationFee))
        return false;
      if (this.verificationFee != that.verificationFee)
        return false;
    }

    boolean this_present_inspectionFee = true && this.isSetInspectionFee();
    boolean that_present_inspectionFee = true && that.isSetInspectionFee();
    if (this_present_inspectionFee || that_present_inspectionFee) {
      if (!(this_present_inspectionFee && that_present_inspectionFee))
        return false;
      if (this.inspectionFee != that.inspectionFee)
        return false;
    }

    boolean this_present_treatFee = true && this.isSetTreatFee();
    boolean that_present_treatFee = true && that.isSetTreatFee();
    if (this_present_treatFee || that_present_treatFee) {
      if (!(this_present_treatFee && that_present_treatFee))
        return false;
      if (this.treatFee != that.treatFee)
        return false;
    }

    boolean this_present_treatFeeIncludeMaterial = true && this.isSetTreatFeeIncludeMaterial();
    boolean that_present_treatFeeIncludeMaterial = true && that.isSetTreatFeeIncludeMaterial();
    if (this_present_treatFeeIncludeMaterial || that_present_treatFeeIncludeMaterial) {
      if (!(this_present_treatFeeIncludeMaterial && that_present_treatFeeIncludeMaterial))
        return false;
      if (this.treatFeeIncludeMaterial != that.treatFeeIncludeMaterial)
        return false;
    }

    boolean this_present_operationFee = true && this.isSetOperationFee();
    boolean that_present_operationFee = true && that.isSetOperationFee();
    if (this_present_operationFee || that_present_operationFee) {
      if (!(this_present_operationFee && that_present_operationFee))
        return false;
      if (this.operationFee != that.operationFee)
        return false;
    }

    boolean this_present_valid = true && this.isSetValid();
    boolean that_present_valid = true && that.isSetValid();
    if (this_present_valid || that_present_valid) {
      if (!(this_present_valid && that_present_valid))
        return false;
      if (this.valid != that.valid)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_otherFee = true && (isSetOtherFee());
    list.add(present_otherFee);
    if (present_otherFee)
      list.add(otherFee);

    boolean present_patientNum = true && (isSetPatientNum());
    list.add(present_patientNum);
    if (present_patientNum)
      list.add(patientNum);

    boolean present_prescriptionNum = true && (isSetPrescriptionNum());
    list.add(present_prescriptionNum);
    if (present_prescriptionNum)
      list.add(prescriptionNum);

    boolean present_westernMedicineFee = true && (isSetWesternMedicineFee());
    list.add(present_westernMedicineFee);
    if (present_westernMedicineFee)
      list.add(westernMedicineFee);

    boolean present_chineseMedicineFee = true && (isSetChineseMedicineFee());
    list.add(present_chineseMedicineFee);
    if (present_chineseMedicineFee)
      list.add(chineseMedicineFee);

    boolean present_patentMedicineFee = true && (isSetPatentMedicineFee());
    list.add(present_patentMedicineFee);
    if (present_patentMedicineFee)
      list.add(patentMedicineFee);

    boolean present_registrationFee = true && (isSetRegistrationFee());
    list.add(present_registrationFee);
    if (present_registrationFee)
      list.add(registrationFee);

    boolean present_examinationFee = true && (isSetExaminationFee());
    list.add(present_examinationFee);
    if (present_examinationFee)
      list.add(examinationFee);

    boolean present_verificationFee = true && (isSetVerificationFee());
    list.add(present_verificationFee);
    if (present_verificationFee)
      list.add(verificationFee);

    boolean present_inspectionFee = true && (isSetInspectionFee());
    list.add(present_inspectionFee);
    if (present_inspectionFee)
      list.add(inspectionFee);

    boolean present_treatFee = true && (isSetTreatFee());
    list.add(present_treatFee);
    if (present_treatFee)
      list.add(treatFee);

    boolean present_treatFeeIncludeMaterial = true && (isSetTreatFeeIncludeMaterial());
    list.add(present_treatFeeIncludeMaterial);
    if (present_treatFeeIncludeMaterial)
      list.add(treatFeeIncludeMaterial);

    boolean present_operationFee = true && (isSetOperationFee());
    list.add(present_operationFee);
    if (present_operationFee)
      list.add(operationFee);

    boolean present_valid = true && (isSetValid());
    list.add(present_valid);
    if (present_valid)
      list.add(valid);

    return list.hashCode();
  }

  @Override
  public int compareTo(BaseStatisticalData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOtherFee()).compareTo(other.isSetOtherFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOtherFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.otherFee, other.otherFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPatientNum()).compareTo(other.isSetPatientNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPatientNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.patientNum, other.patientNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrescriptionNum()).compareTo(other.isSetPrescriptionNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrescriptionNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prescriptionNum, other.prescriptionNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWesternMedicineFee()).compareTo(other.isSetWesternMedicineFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWesternMedicineFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.westernMedicineFee, other.westernMedicineFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChineseMedicineFee()).compareTo(other.isSetChineseMedicineFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChineseMedicineFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chineseMedicineFee, other.chineseMedicineFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPatentMedicineFee()).compareTo(other.isSetPatentMedicineFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPatentMedicineFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.patentMedicineFee, other.patentMedicineFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegistrationFee()).compareTo(other.isSetRegistrationFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegistrationFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.registrationFee, other.registrationFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExaminationFee()).compareTo(other.isSetExaminationFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExaminationFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.examinationFee, other.examinationFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVerificationFee()).compareTo(other.isSetVerificationFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVerificationFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.verificationFee, other.verificationFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInspectionFee()).compareTo(other.isSetInspectionFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInspectionFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inspectionFee, other.inspectionFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTreatFee()).compareTo(other.isSetTreatFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTreatFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.treatFee, other.treatFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTreatFeeIncludeMaterial()).compareTo(other.isSetTreatFeeIncludeMaterial());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTreatFeeIncludeMaterial()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.treatFeeIncludeMaterial, other.treatFeeIncludeMaterial);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperationFee()).compareTo(other.isSetOperationFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperationFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operationFee, other.operationFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValid()).compareTo(other.isSetValid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.valid, other.valid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BaseStatisticalData(");
    boolean first = true;

    if (isSetOtherFee()) {
      sb.append("otherFee:");
      sb.append(this.otherFee);
      first = false;
    }
    if (isSetPatientNum()) {
      if (!first) sb.append(", ");
      sb.append("patientNum:");
      sb.append(this.patientNum);
      first = false;
    }
    if (isSetPrescriptionNum()) {
      if (!first) sb.append(", ");
      sb.append("prescriptionNum:");
      sb.append(this.prescriptionNum);
      first = false;
    }
    if (isSetWesternMedicineFee()) {
      if (!first) sb.append(", ");
      sb.append("westernMedicineFee:");
      sb.append(this.westernMedicineFee);
      first = false;
    }
    if (isSetChineseMedicineFee()) {
      if (!first) sb.append(", ");
      sb.append("chineseMedicineFee:");
      sb.append(this.chineseMedicineFee);
      first = false;
    }
    if (isSetPatentMedicineFee()) {
      if (!first) sb.append(", ");
      sb.append("patentMedicineFee:");
      sb.append(this.patentMedicineFee);
      first = false;
    }
    if (isSetRegistrationFee()) {
      if (!first) sb.append(", ");
      sb.append("registrationFee:");
      sb.append(this.registrationFee);
      first = false;
    }
    if (isSetExaminationFee()) {
      if (!first) sb.append(", ");
      sb.append("examinationFee:");
      sb.append(this.examinationFee);
      first = false;
    }
    if (isSetVerificationFee()) {
      if (!first) sb.append(", ");
      sb.append("verificationFee:");
      sb.append(this.verificationFee);
      first = false;
    }
    if (isSetInspectionFee()) {
      if (!first) sb.append(", ");
      sb.append("inspectionFee:");
      sb.append(this.inspectionFee);
      first = false;
    }
    if (isSetTreatFee()) {
      if (!first) sb.append(", ");
      sb.append("treatFee:");
      sb.append(this.treatFee);
      first = false;
    }
    if (isSetTreatFeeIncludeMaterial()) {
      if (!first) sb.append(", ");
      sb.append("treatFeeIncludeMaterial:");
      sb.append(this.treatFeeIncludeMaterial);
      first = false;
    }
    if (isSetOperationFee()) {
      if (!first) sb.append(", ");
      sb.append("operationFee:");
      sb.append(this.operationFee);
      first = false;
    }
    if (isSetValid()) {
      if (!first) sb.append(", ");
      sb.append("valid:");
      sb.append(this.valid);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BaseStatisticalDataStandardSchemeFactory implements SchemeFactory {
    public BaseStatisticalDataStandardScheme getScheme() {
      return new BaseStatisticalDataStandardScheme();
    }
  }

  private static class BaseStatisticalDataStandardScheme extends StandardScheme<BaseStatisticalData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BaseStatisticalData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // OTHER_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.otherFee = iprot.readDouble();
              struct.setOtherFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PATIENT_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.patientNum = iprot.readI32();
              struct.setPatientNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PRESCRIPTION_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.prescriptionNum = iprot.readI32();
              struct.setPrescriptionNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // WESTERN_MEDICINE_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.westernMedicineFee = iprot.readDouble();
              struct.setWesternMedicineFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CHINESE_MEDICINE_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.chineseMedicineFee = iprot.readDouble();
              struct.setChineseMedicineFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PATENT_MEDICINE_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.patentMedicineFee = iprot.readDouble();
              struct.setPatentMedicineFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REGISTRATION_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.registrationFee = iprot.readDouble();
              struct.setRegistrationFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // EXAMINATION_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.examinationFee = iprot.readDouble();
              struct.setExaminationFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // VERIFICATION_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.verificationFee = iprot.readDouble();
              struct.setVerificationFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // INSPECTION_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.inspectionFee = iprot.readDouble();
              struct.setInspectionFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TREAT_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.treatFee = iprot.readDouble();
              struct.setTreatFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TREAT_FEE_INCLUDE_MATERIAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.treatFeeIncludeMaterial = iprot.readDouble();
              struct.setTreatFeeIncludeMaterialIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // OPERATION_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.operationFee = iprot.readDouble();
              struct.setOperationFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 255: // VALID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.valid = iprot.readI32();
              struct.setValidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BaseStatisticalData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetOtherFee()) {
        oprot.writeFieldBegin(OTHER_FEE_FIELD_DESC);
        oprot.writeDouble(struct.otherFee);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPatientNum()) {
        oprot.writeFieldBegin(PATIENT_NUM_FIELD_DESC);
        oprot.writeI32(struct.patientNum);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPrescriptionNum()) {
        oprot.writeFieldBegin(PRESCRIPTION_NUM_FIELD_DESC);
        oprot.writeI32(struct.prescriptionNum);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWesternMedicineFee()) {
        oprot.writeFieldBegin(WESTERN_MEDICINE_FEE_FIELD_DESC);
        oprot.writeDouble(struct.westernMedicineFee);
        oprot.writeFieldEnd();
      }
      if (struct.isSetChineseMedicineFee()) {
        oprot.writeFieldBegin(CHINESE_MEDICINE_FEE_FIELD_DESC);
        oprot.writeDouble(struct.chineseMedicineFee);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPatentMedicineFee()) {
        oprot.writeFieldBegin(PATENT_MEDICINE_FEE_FIELD_DESC);
        oprot.writeDouble(struct.patentMedicineFee);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRegistrationFee()) {
        oprot.writeFieldBegin(REGISTRATION_FEE_FIELD_DESC);
        oprot.writeDouble(struct.registrationFee);
        oprot.writeFieldEnd();
      }
      if (struct.isSetExaminationFee()) {
        oprot.writeFieldBegin(EXAMINATION_FEE_FIELD_DESC);
        oprot.writeDouble(struct.examinationFee);
        oprot.writeFieldEnd();
      }
      if (struct.isSetVerificationFee()) {
        oprot.writeFieldBegin(VERIFICATION_FEE_FIELD_DESC);
        oprot.writeDouble(struct.verificationFee);
        oprot.writeFieldEnd();
      }
      if (struct.isSetInspectionFee()) {
        oprot.writeFieldBegin(INSPECTION_FEE_FIELD_DESC);
        oprot.writeDouble(struct.inspectionFee);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTreatFee()) {
        oprot.writeFieldBegin(TREAT_FEE_FIELD_DESC);
        oprot.writeDouble(struct.treatFee);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTreatFeeIncludeMaterial()) {
        oprot.writeFieldBegin(TREAT_FEE_INCLUDE_MATERIAL_FIELD_DESC);
        oprot.writeDouble(struct.treatFeeIncludeMaterial);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOperationFee()) {
        oprot.writeFieldBegin(OPERATION_FEE_FIELD_DESC);
        oprot.writeDouble(struct.operationFee);
        oprot.writeFieldEnd();
      }
      if (struct.isSetValid()) {
        oprot.writeFieldBegin(VALID_FIELD_DESC);
        oprot.writeI32(struct.valid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BaseStatisticalDataTupleSchemeFactory implements SchemeFactory {
    public BaseStatisticalDataTupleScheme getScheme() {
      return new BaseStatisticalDataTupleScheme();
    }
  }

  private static class BaseStatisticalDataTupleScheme extends TupleScheme<BaseStatisticalData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BaseStatisticalData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetOtherFee()) {
        optionals.set(0);
      }
      if (struct.isSetPatientNum()) {
        optionals.set(1);
      }
      if (struct.isSetPrescriptionNum()) {
        optionals.set(2);
      }
      if (struct.isSetWesternMedicineFee()) {
        optionals.set(3);
      }
      if (struct.isSetChineseMedicineFee()) {
        optionals.set(4);
      }
      if (struct.isSetPatentMedicineFee()) {
        optionals.set(5);
      }
      if (struct.isSetRegistrationFee()) {
        optionals.set(6);
      }
      if (struct.isSetExaminationFee()) {
        optionals.set(7);
      }
      if (struct.isSetVerificationFee()) {
        optionals.set(8);
      }
      if (struct.isSetInspectionFee()) {
        optionals.set(9);
      }
      if (struct.isSetTreatFee()) {
        optionals.set(10);
      }
      if (struct.isSetTreatFeeIncludeMaterial()) {
        optionals.set(11);
      }
      if (struct.isSetOperationFee()) {
        optionals.set(12);
      }
      if (struct.isSetValid()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetOtherFee()) {
        oprot.writeDouble(struct.otherFee);
      }
      if (struct.isSetPatientNum()) {
        oprot.writeI32(struct.patientNum);
      }
      if (struct.isSetPrescriptionNum()) {
        oprot.writeI32(struct.prescriptionNum);
      }
      if (struct.isSetWesternMedicineFee()) {
        oprot.writeDouble(struct.westernMedicineFee);
      }
      if (struct.isSetChineseMedicineFee()) {
        oprot.writeDouble(struct.chineseMedicineFee);
      }
      if (struct.isSetPatentMedicineFee()) {
        oprot.writeDouble(struct.patentMedicineFee);
      }
      if (struct.isSetRegistrationFee()) {
        oprot.writeDouble(struct.registrationFee);
      }
      if (struct.isSetExaminationFee()) {
        oprot.writeDouble(struct.examinationFee);
      }
      if (struct.isSetVerificationFee()) {
        oprot.writeDouble(struct.verificationFee);
      }
      if (struct.isSetInspectionFee()) {
        oprot.writeDouble(struct.inspectionFee);
      }
      if (struct.isSetTreatFee()) {
        oprot.writeDouble(struct.treatFee);
      }
      if (struct.isSetTreatFeeIncludeMaterial()) {
        oprot.writeDouble(struct.treatFeeIncludeMaterial);
      }
      if (struct.isSetOperationFee()) {
        oprot.writeDouble(struct.operationFee);
      }
      if (struct.isSetValid()) {
        oprot.writeI32(struct.valid);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BaseStatisticalData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.otherFee = iprot.readDouble();
        struct.setOtherFeeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.patientNum = iprot.readI32();
        struct.setPatientNumIsSet(true);
      }
      if (incoming.get(2)) {
        struct.prescriptionNum = iprot.readI32();
        struct.setPrescriptionNumIsSet(true);
      }
      if (incoming.get(3)) {
        struct.westernMedicineFee = iprot.readDouble();
        struct.setWesternMedicineFeeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.chineseMedicineFee = iprot.readDouble();
        struct.setChineseMedicineFeeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.patentMedicineFee = iprot.readDouble();
        struct.setPatentMedicineFeeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.registrationFee = iprot.readDouble();
        struct.setRegistrationFeeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.examinationFee = iprot.readDouble();
        struct.setExaminationFeeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.verificationFee = iprot.readDouble();
        struct.setVerificationFeeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.inspectionFee = iprot.readDouble();
        struct.setInspectionFeeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.treatFee = iprot.readDouble();
        struct.setTreatFeeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.treatFeeIncludeMaterial = iprot.readDouble();
        struct.setTreatFeeIncludeMaterialIsSet(true);
      }
      if (incoming.get(12)) {
        struct.operationFee = iprot.readDouble();
        struct.setOperationFeeIsSet(true);
      }
      if (incoming.get(13)) {
        struct.valid = iprot.readI32();
        struct.setValidIsSet(true);
      }
    }
  }

}

