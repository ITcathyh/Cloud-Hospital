/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package top.itcat.rpc.service.metrics;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2019-7-3")
public class MetricsCountRequest implements org.apache.thrift.TBase<MetricsCountRequest, MetricsCountRequest._Fields>, java.io.Serializable, Cloneable, Comparable<MetricsCountRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MetricsCountRequest");

  private static final org.apache.thrift.protocol.TField INTERFACE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("interfaceName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField BASE_FIELD_DESC = new org.apache.thrift.protocol.TField("Base", org.apache.thrift.protocol.TType.STRUCT, (short)255);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MetricsCountRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MetricsCountRequestTupleSchemeFactory());
  }

  public String interfaceName; // required
  /**
   * 
   * @see ServiceStatusEnum
   */
  public ServiceStatusEnum status; // required
  public long time; // required
  public top.itcat.rpc.base.Base Base; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INTERFACE_NAME((short)2, "interfaceName"),
    /**
     * 
     * @see ServiceStatusEnum
     */
    STATUS((short)3, "status"),
    TIME((short)4, "time"),
    BASE((short)255, "Base");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 2: // INTERFACE_NAME
          return INTERFACE_NAME;
        case 3: // STATUS
          return STATUS;
        case 4: // TIME
          return TIME;
        case 255: // BASE
          return BASE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIME_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INTERFACE_NAME, new org.apache.thrift.meta_data.FieldMetaData("interfaceName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ServiceStatusEnum.class)));
    tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BASE, new org.apache.thrift.meta_data.FieldMetaData("Base", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, top.itcat.rpc.base.Base.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MetricsCountRequest.class, metaDataMap);
  }

  public MetricsCountRequest() {
  }

  public MetricsCountRequest(
    String interfaceName,
    ServiceStatusEnum status,
    long time,
    top.itcat.rpc.base.Base Base)
  {
    this();
    this.interfaceName = interfaceName;
    this.status = status;
    this.time = time;
    setTimeIsSet(true);
    this.Base = Base;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MetricsCountRequest(MetricsCountRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetInterfaceName()) {
      this.interfaceName = other.interfaceName;
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    this.time = other.time;
    if (other.isSetBase()) {
      this.Base = new top.itcat.rpc.base.Base(other.Base);
    }
  }

  public MetricsCountRequest deepCopy() {
    return new MetricsCountRequest(this);
  }

  @Override
  public void clear() {
    this.interfaceName = null;
    this.status = null;
    setTimeIsSet(false);
    this.time = 0;
    this.Base = null;
  }

  public String getInterfaceName() {
    return this.interfaceName;
  }

  public MetricsCountRequest setInterfaceName(String interfaceName) {
    this.interfaceName = interfaceName;
    return this;
  }

  public void unsetInterfaceName() {
    this.interfaceName = null;
  }

  /** Returns true if field interfaceName is set (has been assigned a value) and false otherwise */
  public boolean isSetInterfaceName() {
    return this.interfaceName != null;
  }

  public void setInterfaceNameIsSet(boolean value) {
    if (!value) {
      this.interfaceName = null;
    }
  }

  /**
   * 
   * @see ServiceStatusEnum
   */
  public ServiceStatusEnum getStatus() {
    return this.status;
  }

  /**
   * 
   * @see ServiceStatusEnum
   */
  public MetricsCountRequest setStatus(ServiceStatusEnum status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public long getTime() {
    return this.time;
  }

  public MetricsCountRequest setTime(long time) {
    this.time = time;
    setTimeIsSet(true);
    return this;
  }

  public void unsetTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIME_ISSET_ID);
  }

  /** Returns true if field time is set (has been assigned a value) and false otherwise */
  public boolean isSetTime() {
    return EncodingUtils.testBit(__isset_bitfield, __TIME_ISSET_ID);
  }

  public void setTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIME_ISSET_ID, value);
  }

  public top.itcat.rpc.base.Base getBase() {
    return this.Base;
  }

  public MetricsCountRequest setBase(top.itcat.rpc.base.Base Base) {
    this.Base = Base;
    return this;
  }

  public void unsetBase() {
    this.Base = null;
  }

  /** Returns true if field Base is set (has been assigned a value) and false otherwise */
  public boolean isSetBase() {
    return this.Base != null;
  }

  public void setBaseIsSet(boolean value) {
    if (!value) {
      this.Base = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INTERFACE_NAME:
      if (value == null) {
        unsetInterfaceName();
      } else {
        setInterfaceName((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((ServiceStatusEnum)value);
      }
      break;

    case TIME:
      if (value == null) {
        unsetTime();
      } else {
        setTime((Long)value);
      }
      break;

    case BASE:
      if (value == null) {
        unsetBase();
      } else {
        setBase((top.itcat.rpc.base.Base)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INTERFACE_NAME:
      return getInterfaceName();

    case STATUS:
      return getStatus();

    case TIME:
      return Long.valueOf(getTime());

    case BASE:
      return getBase();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INTERFACE_NAME:
      return isSetInterfaceName();
    case STATUS:
      return isSetStatus();
    case TIME:
      return isSetTime();
    case BASE:
      return isSetBase();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MetricsCountRequest)
      return this.equals((MetricsCountRequest)that);
    return false;
  }

  public boolean equals(MetricsCountRequest that) {
    if (that == null)
      return false;

    boolean this_present_interfaceName = true && this.isSetInterfaceName();
    boolean that_present_interfaceName = true && that.isSetInterfaceName();
    if (this_present_interfaceName || that_present_interfaceName) {
      if (!(this_present_interfaceName && that_present_interfaceName))
        return false;
      if (!this.interfaceName.equals(that.interfaceName))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_time = true;
    boolean that_present_time = true;
    if (this_present_time || that_present_time) {
      if (!(this_present_time && that_present_time))
        return false;
      if (this.time != that.time)
        return false;
    }

    boolean this_present_Base = true && this.isSetBase();
    boolean that_present_Base = true && that.isSetBase();
    if (this_present_Base || that_present_Base) {
      if (!(this_present_Base && that_present_Base))
        return false;
      if (!this.Base.equals(that.Base))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_interfaceName = true && (isSetInterfaceName());
    list.add(present_interfaceName);
    if (present_interfaceName)
      list.add(interfaceName);

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status.getValue());

    boolean present_time = true;
    list.add(present_time);
    if (present_time)
      list.add(time);

    boolean present_Base = true && (isSetBase());
    list.add(present_Base);
    if (present_Base)
      list.add(Base);

    return list.hashCode();
  }

  @Override
  public int compareTo(MetricsCountRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetInterfaceName()).compareTo(other.isSetInterfaceName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterfaceName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interfaceName, other.interfaceName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBase()).compareTo(other.isSetBase());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBase()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Base, other.Base);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MetricsCountRequest(");
    boolean first = true;

    sb.append("interfaceName:");
    if (this.interfaceName == null) {
      sb.append("null");
    } else {
      sb.append(this.interfaceName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("time:");
    sb.append(this.time);
    first = false;
    if (!first) sb.append(", ");
    sb.append("Base:");
    if (this.Base == null) {
      sb.append("null");
    } else {
      sb.append(this.Base);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (interfaceName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'interfaceName' was not present! Struct: " + toString());
    }
    if (status == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'status' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'time' because it's a primitive and you chose the non-beans generator.
    if (Base == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'Base' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (Base != null) {
      Base.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MetricsCountRequestStandardSchemeFactory implements SchemeFactory {
    public MetricsCountRequestStandardScheme getScheme() {
      return new MetricsCountRequestStandardScheme();
    }
  }

  private static class MetricsCountRequestStandardScheme extends StandardScheme<MetricsCountRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MetricsCountRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 2: // INTERFACE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.interfaceName = iprot.readString();
              struct.setInterfaceNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = top.itcat.rpc.service.metrics.ServiceStatusEnum.findByValue(iprot.readI32());
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.time = iprot.readI64();
              struct.setTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 255: // BASE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.Base = new top.itcat.rpc.base.Base();
              struct.Base.read(iprot);
              struct.setBaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetTime()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'time' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MetricsCountRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.interfaceName != null) {
        oprot.writeFieldBegin(INTERFACE_NAME_FIELD_DESC);
        oprot.writeString(struct.interfaceName);
        oprot.writeFieldEnd();
      }
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TIME_FIELD_DESC);
      oprot.writeI64(struct.time);
      oprot.writeFieldEnd();
      if (struct.Base != null) {
        oprot.writeFieldBegin(BASE_FIELD_DESC);
        struct.Base.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MetricsCountRequestTupleSchemeFactory implements SchemeFactory {
    public MetricsCountRequestTupleScheme getScheme() {
      return new MetricsCountRequestTupleScheme();
    }
  }

  private static class MetricsCountRequestTupleScheme extends TupleScheme<MetricsCountRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MetricsCountRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.interfaceName);
      oprot.writeI32(struct.status.getValue());
      oprot.writeI64(struct.time);
      struct.Base.write(oprot);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MetricsCountRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.interfaceName = iprot.readString();
      struct.setInterfaceNameIsSet(true);
      struct.status = top.itcat.rpc.service.metrics.ServiceStatusEnum.findByValue(iprot.readI32());
      struct.setStatusIsSet(true);
      struct.time = iprot.readI64();
      struct.setTimeIsSet(true);
      struct.Base = new top.itcat.rpc.base.Base();
      struct.Base.read(iprot);
      struct.setBaseIsSet(true);
    }
  }

}

