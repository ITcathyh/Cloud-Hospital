/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package top.itcat.rpc.service.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2019-7-3")
public class Medicine implements org.apache.thrift.TBase<Medicine, Medicine._Fields>, java.io.Serializable, Cloneable, Comparable<Medicine> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Medicine");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SPECIFICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("specification", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField FORM_FIELD_DESC = new org.apache.thrift.protocol.TField("form", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PACKAGE_UNIT_FIELD_DESC = new org.apache.thrift.protocol.TField("packageUnit", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PACKAGE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("packageNum", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("price", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("category", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField USAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("usage", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField DOSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("dosage", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField UNIT_FIELD_DESC = new org.apache.thrift.protocol.TField("unit", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField ADVICE_FIELD_DESC = new org.apache.thrift.protocol.TField("advice", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField FACTORY_FIELD_DESC = new org.apache.thrift.protocol.TField("factory", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField PINYIN_FIELD_DESC = new org.apache.thrift.protocol.TField("pinyin", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField FREQUENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("frequency", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField DAY_USAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("dayUsage", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField VALID_FIELD_DESC = new org.apache.thrift.protocol.TField("valid", org.apache.thrift.protocol.TType.I32, (short)255);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MedicineStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MedicineTupleSchemeFactory());
  }

  public long id; // optional
  public String code; // optional
  public String name; // optional
  public String specification; // optional
  public String form; // optional
  public String packageUnit; // optional
  public int packageNum; // optional
  public double price; // optional
  /**
   * 
   * @see MedicineCategoryEnum
   */
  public MedicineCategoryEnum category; // optional
  /**
   * 
   * @see MedicineUsageEnum
   */
  public MedicineUsageEnum usage; // optional
  public double dosage; // optional
  public String unit; // optional
  public String advice; // optional
  public String factory; // optional
  public String pinyin; // optional
  public String frequency; // optional
  public int dayUsage; // optional
  public int valid; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    CODE((short)2, "code"),
    NAME((short)3, "name"),
    SPECIFICATION((short)4, "specification"),
    FORM((short)5, "form"),
    PACKAGE_UNIT((short)6, "packageUnit"),
    PACKAGE_NUM((short)7, "packageNum"),
    PRICE((short)8, "price"),
    /**
     * 
     * @see MedicineCategoryEnum
     */
    CATEGORY((short)9, "category"),
    /**
     * 
     * @see MedicineUsageEnum
     */
    USAGE((short)10, "usage"),
    DOSAGE((short)11, "dosage"),
    UNIT((short)12, "unit"),
    ADVICE((short)13, "advice"),
    FACTORY((short)14, "factory"),
    PINYIN((short)15, "pinyin"),
    FREQUENCY((short)16, "frequency"),
    DAY_USAGE((short)17, "dayUsage"),
    VALID((short)255, "valid");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // CODE
          return CODE;
        case 3: // NAME
          return NAME;
        case 4: // SPECIFICATION
          return SPECIFICATION;
        case 5: // FORM
          return FORM;
        case 6: // PACKAGE_UNIT
          return PACKAGE_UNIT;
        case 7: // PACKAGE_NUM
          return PACKAGE_NUM;
        case 8: // PRICE
          return PRICE;
        case 9: // CATEGORY
          return CATEGORY;
        case 10: // USAGE
          return USAGE;
        case 11: // DOSAGE
          return DOSAGE;
        case 12: // UNIT
          return UNIT;
        case 13: // ADVICE
          return ADVICE;
        case 14: // FACTORY
          return FACTORY;
        case 15: // PINYIN
          return PINYIN;
        case 16: // FREQUENCY
          return FREQUENCY;
        case 17: // DAY_USAGE
          return DAY_USAGE;
        case 255: // VALID
          return VALID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __PACKAGENUM_ISSET_ID = 1;
  private static final int __PRICE_ISSET_ID = 2;
  private static final int __DOSAGE_ISSET_ID = 3;
  private static final int __DAYUSAGE_ISSET_ID = 4;
  private static final int __VALID_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.CODE,_Fields.NAME,_Fields.SPECIFICATION,_Fields.FORM,_Fields.PACKAGE_UNIT,_Fields.PACKAGE_NUM,_Fields.PRICE,_Fields.CATEGORY,_Fields.USAGE,_Fields.DOSAGE,_Fields.UNIT,_Fields.ADVICE,_Fields.FACTORY,_Fields.PINYIN,_Fields.FREQUENCY,_Fields.DAY_USAGE,_Fields.VALID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SPECIFICATION, new org.apache.thrift.meta_data.FieldMetaData("specification", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FORM, new org.apache.thrift.meta_data.FieldMetaData("form", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PACKAGE_UNIT, new org.apache.thrift.meta_data.FieldMetaData("packageUnit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PACKAGE_NUM, new org.apache.thrift.meta_data.FieldMetaData("packageNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRICE, new org.apache.thrift.meta_data.FieldMetaData("price", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("category", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MedicineCategoryEnum.class)));
    tmpMap.put(_Fields.USAGE, new org.apache.thrift.meta_data.FieldMetaData("usage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MedicineUsageEnum.class)));
    tmpMap.put(_Fields.DOSAGE, new org.apache.thrift.meta_data.FieldMetaData("dosage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.UNIT, new org.apache.thrift.meta_data.FieldMetaData("unit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADVICE, new org.apache.thrift.meta_data.FieldMetaData("advice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FACTORY, new org.apache.thrift.meta_data.FieldMetaData("factory", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PINYIN, new org.apache.thrift.meta_data.FieldMetaData("pinyin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FREQUENCY, new org.apache.thrift.meta_data.FieldMetaData("frequency", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DAY_USAGE, new org.apache.thrift.meta_data.FieldMetaData("dayUsage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VALID, new org.apache.thrift.meta_data.FieldMetaData("valid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Medicine.class, metaDataMap);
  }

  public Medicine() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Medicine(Medicine other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetCode()) {
      this.code = other.code;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetSpecification()) {
      this.specification = other.specification;
    }
    if (other.isSetForm()) {
      this.form = other.form;
    }
    if (other.isSetPackageUnit()) {
      this.packageUnit = other.packageUnit;
    }
    this.packageNum = other.packageNum;
    this.price = other.price;
    if (other.isSetCategory()) {
      this.category = other.category;
    }
    if (other.isSetUsage()) {
      this.usage = other.usage;
    }
    this.dosage = other.dosage;
    if (other.isSetUnit()) {
      this.unit = other.unit;
    }
    if (other.isSetAdvice()) {
      this.advice = other.advice;
    }
    if (other.isSetFactory()) {
      this.factory = other.factory;
    }
    if (other.isSetPinyin()) {
      this.pinyin = other.pinyin;
    }
    if (other.isSetFrequency()) {
      this.frequency = other.frequency;
    }
    this.dayUsage = other.dayUsage;
    this.valid = other.valid;
  }

  public Medicine deepCopy() {
    return new Medicine(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.code = null;
    this.name = null;
    this.specification = null;
    this.form = null;
    this.packageUnit = null;
    setPackageNumIsSet(false);
    this.packageNum = 0;
    setPriceIsSet(false);
    this.price = 0.0;
    this.category = null;
    this.usage = null;
    setDosageIsSet(false);
    this.dosage = 0.0;
    this.unit = null;
    this.advice = null;
    this.factory = null;
    this.pinyin = null;
    this.frequency = null;
    setDayUsageIsSet(false);
    this.dayUsage = 0;
    setValidIsSet(false);
    this.valid = 0;
  }

  public long getId() {
    return this.id;
  }

  public Medicine setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getCode() {
    return this.code;
  }

  public Medicine setCode(String code) {
    this.code = code;
    return this;
  }

  public void unsetCode() {
    this.code = null;
  }

  /** Returns true if field code is set (has been assigned a value) and false otherwise */
  public boolean isSetCode() {
    return this.code != null;
  }

  public void setCodeIsSet(boolean value) {
    if (!value) {
      this.code = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public Medicine setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getSpecification() {
    return this.specification;
  }

  public Medicine setSpecification(String specification) {
    this.specification = specification;
    return this;
  }

  public void unsetSpecification() {
    this.specification = null;
  }

  /** Returns true if field specification is set (has been assigned a value) and false otherwise */
  public boolean isSetSpecification() {
    return this.specification != null;
  }

  public void setSpecificationIsSet(boolean value) {
    if (!value) {
      this.specification = null;
    }
  }

  public String getForm() {
    return this.form;
  }

  public Medicine setForm(String form) {
    this.form = form;
    return this;
  }

  public void unsetForm() {
    this.form = null;
  }

  /** Returns true if field form is set (has been assigned a value) and false otherwise */
  public boolean isSetForm() {
    return this.form != null;
  }

  public void setFormIsSet(boolean value) {
    if (!value) {
      this.form = null;
    }
  }

  public String getPackageUnit() {
    return this.packageUnit;
  }

  public Medicine setPackageUnit(String packageUnit) {
    this.packageUnit = packageUnit;
    return this;
  }

  public void unsetPackageUnit() {
    this.packageUnit = null;
  }

  /** Returns true if field packageUnit is set (has been assigned a value) and false otherwise */
  public boolean isSetPackageUnit() {
    return this.packageUnit != null;
  }

  public void setPackageUnitIsSet(boolean value) {
    if (!value) {
      this.packageUnit = null;
    }
  }

  public int getPackageNum() {
    return this.packageNum;
  }

  public Medicine setPackageNum(int packageNum) {
    this.packageNum = packageNum;
    setPackageNumIsSet(true);
    return this;
  }

  public void unsetPackageNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PACKAGENUM_ISSET_ID);
  }

  /** Returns true if field packageNum is set (has been assigned a value) and false otherwise */
  public boolean isSetPackageNum() {
    return EncodingUtils.testBit(__isset_bitfield, __PACKAGENUM_ISSET_ID);
  }

  public void setPackageNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PACKAGENUM_ISSET_ID, value);
  }

  public double getPrice() {
    return this.price;
  }

  public Medicine setPrice(double price) {
    this.price = price;
    setPriceIsSet(true);
    return this;
  }

  public void unsetPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  /** Returns true if field price is set (has been assigned a value) and false otherwise */
  public boolean isSetPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  public void setPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRICE_ISSET_ID, value);
  }

  /**
   * 
   * @see MedicineCategoryEnum
   */
  public MedicineCategoryEnum getCategory() {
    return this.category;
  }

  /**
   * 
   * @see MedicineCategoryEnum
   */
  public Medicine setCategory(MedicineCategoryEnum category) {
    this.category = category;
    return this;
  }

  public void unsetCategory() {
    this.category = null;
  }

  /** Returns true if field category is set (has been assigned a value) and false otherwise */
  public boolean isSetCategory() {
    return this.category != null;
  }

  public void setCategoryIsSet(boolean value) {
    if (!value) {
      this.category = null;
    }
  }

  /**
   * 
   * @see MedicineUsageEnum
   */
  public MedicineUsageEnum getUsage() {
    return this.usage;
  }

  /**
   * 
   * @see MedicineUsageEnum
   */
  public Medicine setUsage(MedicineUsageEnum usage) {
    this.usage = usage;
    return this;
  }

  public void unsetUsage() {
    this.usage = null;
  }

  /** Returns true if field usage is set (has been assigned a value) and false otherwise */
  public boolean isSetUsage() {
    return this.usage != null;
  }

  public void setUsageIsSet(boolean value) {
    if (!value) {
      this.usage = null;
    }
  }

  public double getDosage() {
    return this.dosage;
  }

  public Medicine setDosage(double dosage) {
    this.dosage = dosage;
    setDosageIsSet(true);
    return this;
  }

  public void unsetDosage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DOSAGE_ISSET_ID);
  }

  /** Returns true if field dosage is set (has been assigned a value) and false otherwise */
  public boolean isSetDosage() {
    return EncodingUtils.testBit(__isset_bitfield, __DOSAGE_ISSET_ID);
  }

  public void setDosageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DOSAGE_ISSET_ID, value);
  }

  public String getUnit() {
    return this.unit;
  }

  public Medicine setUnit(String unit) {
    this.unit = unit;
    return this;
  }

  public void unsetUnit() {
    this.unit = null;
  }

  /** Returns true if field unit is set (has been assigned a value) and false otherwise */
  public boolean isSetUnit() {
    return this.unit != null;
  }

  public void setUnitIsSet(boolean value) {
    if (!value) {
      this.unit = null;
    }
  }

  public String getAdvice() {
    return this.advice;
  }

  public Medicine setAdvice(String advice) {
    this.advice = advice;
    return this;
  }

  public void unsetAdvice() {
    this.advice = null;
  }

  /** Returns true if field advice is set (has been assigned a value) and false otherwise */
  public boolean isSetAdvice() {
    return this.advice != null;
  }

  public void setAdviceIsSet(boolean value) {
    if (!value) {
      this.advice = null;
    }
  }

  public String getFactory() {
    return this.factory;
  }

  public Medicine setFactory(String factory) {
    this.factory = factory;
    return this;
  }

  public void unsetFactory() {
    this.factory = null;
  }

  /** Returns true if field factory is set (has been assigned a value) and false otherwise */
  public boolean isSetFactory() {
    return this.factory != null;
  }

  public void setFactoryIsSet(boolean value) {
    if (!value) {
      this.factory = null;
    }
  }

  public String getPinyin() {
    return this.pinyin;
  }

  public Medicine setPinyin(String pinyin) {
    this.pinyin = pinyin;
    return this;
  }

  public void unsetPinyin() {
    this.pinyin = null;
  }

  /** Returns true if field pinyin is set (has been assigned a value) and false otherwise */
  public boolean isSetPinyin() {
    return this.pinyin != null;
  }

  public void setPinyinIsSet(boolean value) {
    if (!value) {
      this.pinyin = null;
    }
  }

  public String getFrequency() {
    return this.frequency;
  }

  public Medicine setFrequency(String frequency) {
    this.frequency = frequency;
    return this;
  }

  public void unsetFrequency() {
    this.frequency = null;
  }

  /** Returns true if field frequency is set (has been assigned a value) and false otherwise */
  public boolean isSetFrequency() {
    return this.frequency != null;
  }

  public void setFrequencyIsSet(boolean value) {
    if (!value) {
      this.frequency = null;
    }
  }

  public int getDayUsage() {
    return this.dayUsage;
  }

  public Medicine setDayUsage(int dayUsage) {
    this.dayUsage = dayUsage;
    setDayUsageIsSet(true);
    return this;
  }

  public void unsetDayUsage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DAYUSAGE_ISSET_ID);
  }

  /** Returns true if field dayUsage is set (has been assigned a value) and false otherwise */
  public boolean isSetDayUsage() {
    return EncodingUtils.testBit(__isset_bitfield, __DAYUSAGE_ISSET_ID);
  }

  public void setDayUsageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DAYUSAGE_ISSET_ID, value);
  }

  public int getValid() {
    return this.valid;
  }

  public Medicine setValid(int valid) {
    this.valid = valid;
    setValidIsSet(true);
    return this;
  }

  public void unsetValid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VALID_ISSET_ID);
  }

  /** Returns true if field valid is set (has been assigned a value) and false otherwise */
  public boolean isSetValid() {
    return EncodingUtils.testBit(__isset_bitfield, __VALID_ISSET_ID);
  }

  public void setValidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VALID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case CODE:
      if (value == null) {
        unsetCode();
      } else {
        setCode((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case SPECIFICATION:
      if (value == null) {
        unsetSpecification();
      } else {
        setSpecification((String)value);
      }
      break;

    case FORM:
      if (value == null) {
        unsetForm();
      } else {
        setForm((String)value);
      }
      break;

    case PACKAGE_UNIT:
      if (value == null) {
        unsetPackageUnit();
      } else {
        setPackageUnit((String)value);
      }
      break;

    case PACKAGE_NUM:
      if (value == null) {
        unsetPackageNum();
      } else {
        setPackageNum((Integer)value);
      }
      break;

    case PRICE:
      if (value == null) {
        unsetPrice();
      } else {
        setPrice((Double)value);
      }
      break;

    case CATEGORY:
      if (value == null) {
        unsetCategory();
      } else {
        setCategory((MedicineCategoryEnum)value);
      }
      break;

    case USAGE:
      if (value == null) {
        unsetUsage();
      } else {
        setUsage((MedicineUsageEnum)value);
      }
      break;

    case DOSAGE:
      if (value == null) {
        unsetDosage();
      } else {
        setDosage((Double)value);
      }
      break;

    case UNIT:
      if (value == null) {
        unsetUnit();
      } else {
        setUnit((String)value);
      }
      break;

    case ADVICE:
      if (value == null) {
        unsetAdvice();
      } else {
        setAdvice((String)value);
      }
      break;

    case FACTORY:
      if (value == null) {
        unsetFactory();
      } else {
        setFactory((String)value);
      }
      break;

    case PINYIN:
      if (value == null) {
        unsetPinyin();
      } else {
        setPinyin((String)value);
      }
      break;

    case FREQUENCY:
      if (value == null) {
        unsetFrequency();
      } else {
        setFrequency((String)value);
      }
      break;

    case DAY_USAGE:
      if (value == null) {
        unsetDayUsage();
      } else {
        setDayUsage((Integer)value);
      }
      break;

    case VALID:
      if (value == null) {
        unsetValid();
      } else {
        setValid((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case CODE:
      return getCode();

    case NAME:
      return getName();

    case SPECIFICATION:
      return getSpecification();

    case FORM:
      return getForm();

    case PACKAGE_UNIT:
      return getPackageUnit();

    case PACKAGE_NUM:
      return Integer.valueOf(getPackageNum());

    case PRICE:
      return Double.valueOf(getPrice());

    case CATEGORY:
      return getCategory();

    case USAGE:
      return getUsage();

    case DOSAGE:
      return Double.valueOf(getDosage());

    case UNIT:
      return getUnit();

    case ADVICE:
      return getAdvice();

    case FACTORY:
      return getFactory();

    case PINYIN:
      return getPinyin();

    case FREQUENCY:
      return getFrequency();

    case DAY_USAGE:
      return Integer.valueOf(getDayUsage());

    case VALID:
      return Integer.valueOf(getValid());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case CODE:
      return isSetCode();
    case NAME:
      return isSetName();
    case SPECIFICATION:
      return isSetSpecification();
    case FORM:
      return isSetForm();
    case PACKAGE_UNIT:
      return isSetPackageUnit();
    case PACKAGE_NUM:
      return isSetPackageNum();
    case PRICE:
      return isSetPrice();
    case CATEGORY:
      return isSetCategory();
    case USAGE:
      return isSetUsage();
    case DOSAGE:
      return isSetDosage();
    case UNIT:
      return isSetUnit();
    case ADVICE:
      return isSetAdvice();
    case FACTORY:
      return isSetFactory();
    case PINYIN:
      return isSetPinyin();
    case FREQUENCY:
      return isSetFrequency();
    case DAY_USAGE:
      return isSetDayUsage();
    case VALID:
      return isSetValid();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Medicine)
      return this.equals((Medicine)that);
    return false;
  }

  public boolean equals(Medicine that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_code = true && this.isSetCode();
    boolean that_present_code = true && that.isSetCode();
    if (this_present_code || that_present_code) {
      if (!(this_present_code && that_present_code))
        return false;
      if (!this.code.equals(that.code))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_specification = true && this.isSetSpecification();
    boolean that_present_specification = true && that.isSetSpecification();
    if (this_present_specification || that_present_specification) {
      if (!(this_present_specification && that_present_specification))
        return false;
      if (!this.specification.equals(that.specification))
        return false;
    }

    boolean this_present_form = true && this.isSetForm();
    boolean that_present_form = true && that.isSetForm();
    if (this_present_form || that_present_form) {
      if (!(this_present_form && that_present_form))
        return false;
      if (!this.form.equals(that.form))
        return false;
    }

    boolean this_present_packageUnit = true && this.isSetPackageUnit();
    boolean that_present_packageUnit = true && that.isSetPackageUnit();
    if (this_present_packageUnit || that_present_packageUnit) {
      if (!(this_present_packageUnit && that_present_packageUnit))
        return false;
      if (!this.packageUnit.equals(that.packageUnit))
        return false;
    }

    boolean this_present_packageNum = true && this.isSetPackageNum();
    boolean that_present_packageNum = true && that.isSetPackageNum();
    if (this_present_packageNum || that_present_packageNum) {
      if (!(this_present_packageNum && that_present_packageNum))
        return false;
      if (this.packageNum != that.packageNum)
        return false;
    }

    boolean this_present_price = true && this.isSetPrice();
    boolean that_present_price = true && that.isSetPrice();
    if (this_present_price || that_present_price) {
      if (!(this_present_price && that_present_price))
        return false;
      if (this.price != that.price)
        return false;
    }

    boolean this_present_category = true && this.isSetCategory();
    boolean that_present_category = true && that.isSetCategory();
    if (this_present_category || that_present_category) {
      if (!(this_present_category && that_present_category))
        return false;
      if (!this.category.equals(that.category))
        return false;
    }

    boolean this_present_usage = true && this.isSetUsage();
    boolean that_present_usage = true && that.isSetUsage();
    if (this_present_usage || that_present_usage) {
      if (!(this_present_usage && that_present_usage))
        return false;
      if (!this.usage.equals(that.usage))
        return false;
    }

    boolean this_present_dosage = true && this.isSetDosage();
    boolean that_present_dosage = true && that.isSetDosage();
    if (this_present_dosage || that_present_dosage) {
      if (!(this_present_dosage && that_present_dosage))
        return false;
      if (this.dosage != that.dosage)
        return false;
    }

    boolean this_present_unit = true && this.isSetUnit();
    boolean that_present_unit = true && that.isSetUnit();
    if (this_present_unit || that_present_unit) {
      if (!(this_present_unit && that_present_unit))
        return false;
      if (!this.unit.equals(that.unit))
        return false;
    }

    boolean this_present_advice = true && this.isSetAdvice();
    boolean that_present_advice = true && that.isSetAdvice();
    if (this_present_advice || that_present_advice) {
      if (!(this_present_advice && that_present_advice))
        return false;
      if (!this.advice.equals(that.advice))
        return false;
    }

    boolean this_present_factory = true && this.isSetFactory();
    boolean that_present_factory = true && that.isSetFactory();
    if (this_present_factory || that_present_factory) {
      if (!(this_present_factory && that_present_factory))
        return false;
      if (!this.factory.equals(that.factory))
        return false;
    }

    boolean this_present_pinyin = true && this.isSetPinyin();
    boolean that_present_pinyin = true && that.isSetPinyin();
    if (this_present_pinyin || that_present_pinyin) {
      if (!(this_present_pinyin && that_present_pinyin))
        return false;
      if (!this.pinyin.equals(that.pinyin))
        return false;
    }

    boolean this_present_frequency = true && this.isSetFrequency();
    boolean that_present_frequency = true && that.isSetFrequency();
    if (this_present_frequency || that_present_frequency) {
      if (!(this_present_frequency && that_present_frequency))
        return false;
      if (!this.frequency.equals(that.frequency))
        return false;
    }

    boolean this_present_dayUsage = true && this.isSetDayUsage();
    boolean that_present_dayUsage = true && that.isSetDayUsage();
    if (this_present_dayUsage || that_present_dayUsage) {
      if (!(this_present_dayUsage && that_present_dayUsage))
        return false;
      if (this.dayUsage != that.dayUsage)
        return false;
    }

    boolean this_present_valid = true && this.isSetValid();
    boolean that_present_valid = true && that.isSetValid();
    if (this_present_valid || that_present_valid) {
      if (!(this_present_valid && that_present_valid))
        return false;
      if (this.valid != that.valid)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_code = true && (isSetCode());
    list.add(present_code);
    if (present_code)
      list.add(code);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_specification = true && (isSetSpecification());
    list.add(present_specification);
    if (present_specification)
      list.add(specification);

    boolean present_form = true && (isSetForm());
    list.add(present_form);
    if (present_form)
      list.add(form);

    boolean present_packageUnit = true && (isSetPackageUnit());
    list.add(present_packageUnit);
    if (present_packageUnit)
      list.add(packageUnit);

    boolean present_packageNum = true && (isSetPackageNum());
    list.add(present_packageNum);
    if (present_packageNum)
      list.add(packageNum);

    boolean present_price = true && (isSetPrice());
    list.add(present_price);
    if (present_price)
      list.add(price);

    boolean present_category = true && (isSetCategory());
    list.add(present_category);
    if (present_category)
      list.add(category.getValue());

    boolean present_usage = true && (isSetUsage());
    list.add(present_usage);
    if (present_usage)
      list.add(usage.getValue());

    boolean present_dosage = true && (isSetDosage());
    list.add(present_dosage);
    if (present_dosage)
      list.add(dosage);

    boolean present_unit = true && (isSetUnit());
    list.add(present_unit);
    if (present_unit)
      list.add(unit);

    boolean present_advice = true && (isSetAdvice());
    list.add(present_advice);
    if (present_advice)
      list.add(advice);

    boolean present_factory = true && (isSetFactory());
    list.add(present_factory);
    if (present_factory)
      list.add(factory);

    boolean present_pinyin = true && (isSetPinyin());
    list.add(present_pinyin);
    if (present_pinyin)
      list.add(pinyin);

    boolean present_frequency = true && (isSetFrequency());
    list.add(present_frequency);
    if (present_frequency)
      list.add(frequency);

    boolean present_dayUsage = true && (isSetDayUsage());
    list.add(present_dayUsage);
    if (present_dayUsage)
      list.add(dayUsage);

    boolean present_valid = true && (isSetValid());
    list.add(present_valid);
    if (present_valid)
      list.add(valid);

    return list.hashCode();
  }

  @Override
  public int compareTo(Medicine other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCode()).compareTo(other.isSetCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpecification()).compareTo(other.isSetSpecification());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpecification()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.specification, other.specification);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetForm()).compareTo(other.isSetForm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.form, other.form);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPackageUnit()).compareTo(other.isSetPackageUnit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPackageUnit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.packageUnit, other.packageUnit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPackageNum()).compareTo(other.isSetPackageNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPackageNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.packageNum, other.packageNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrice()).compareTo(other.isSetPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.price, other.price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCategory()).compareTo(other.isSetCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.category, other.category);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsage()).compareTo(other.isSetUsage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.usage, other.usage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDosage()).compareTo(other.isSetDosage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDosage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dosage, other.dosage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnit()).compareTo(other.isSetUnit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unit, other.unit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdvice()).compareTo(other.isSetAdvice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdvice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.advice, other.advice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFactory()).compareTo(other.isSetFactory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFactory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.factory, other.factory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPinyin()).compareTo(other.isSetPinyin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPinyin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pinyin, other.pinyin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrequency()).compareTo(other.isSetFrequency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrequency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frequency, other.frequency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDayUsage()).compareTo(other.isSetDayUsage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDayUsage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dayUsage, other.dayUsage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValid()).compareTo(other.isSetValid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.valid, other.valid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Medicine(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetCode()) {
      if (!first) sb.append(", ");
      sb.append("code:");
      if (this.code == null) {
        sb.append("null");
      } else {
        sb.append(this.code);
      }
      first = false;
    }
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetSpecification()) {
      if (!first) sb.append(", ");
      sb.append("specification:");
      if (this.specification == null) {
        sb.append("null");
      } else {
        sb.append(this.specification);
      }
      first = false;
    }
    if (isSetForm()) {
      if (!first) sb.append(", ");
      sb.append("form:");
      if (this.form == null) {
        sb.append("null");
      } else {
        sb.append(this.form);
      }
      first = false;
    }
    if (isSetPackageUnit()) {
      if (!first) sb.append(", ");
      sb.append("packageUnit:");
      if (this.packageUnit == null) {
        sb.append("null");
      } else {
        sb.append(this.packageUnit);
      }
      first = false;
    }
    if (isSetPackageNum()) {
      if (!first) sb.append(", ");
      sb.append("packageNum:");
      sb.append(this.packageNum);
      first = false;
    }
    if (isSetPrice()) {
      if (!first) sb.append(", ");
      sb.append("price:");
      sb.append(this.price);
      first = false;
    }
    if (isSetCategory()) {
      if (!first) sb.append(", ");
      sb.append("category:");
      if (this.category == null) {
        sb.append("null");
      } else {
        sb.append(this.category);
      }
      first = false;
    }
    if (isSetUsage()) {
      if (!first) sb.append(", ");
      sb.append("usage:");
      if (this.usage == null) {
        sb.append("null");
      } else {
        sb.append(this.usage);
      }
      first = false;
    }
    if (isSetDosage()) {
      if (!first) sb.append(", ");
      sb.append("dosage:");
      sb.append(this.dosage);
      first = false;
    }
    if (isSetUnit()) {
      if (!first) sb.append(", ");
      sb.append("unit:");
      if (this.unit == null) {
        sb.append("null");
      } else {
        sb.append(this.unit);
      }
      first = false;
    }
    if (isSetAdvice()) {
      if (!first) sb.append(", ");
      sb.append("advice:");
      if (this.advice == null) {
        sb.append("null");
      } else {
        sb.append(this.advice);
      }
      first = false;
    }
    if (isSetFactory()) {
      if (!first) sb.append(", ");
      sb.append("factory:");
      if (this.factory == null) {
        sb.append("null");
      } else {
        sb.append(this.factory);
      }
      first = false;
    }
    if (isSetPinyin()) {
      if (!first) sb.append(", ");
      sb.append("pinyin:");
      if (this.pinyin == null) {
        sb.append("null");
      } else {
        sb.append(this.pinyin);
      }
      first = false;
    }
    if (isSetFrequency()) {
      if (!first) sb.append(", ");
      sb.append("frequency:");
      if (this.frequency == null) {
        sb.append("null");
      } else {
        sb.append(this.frequency);
      }
      first = false;
    }
    if (isSetDayUsage()) {
      if (!first) sb.append(", ");
      sb.append("dayUsage:");
      sb.append(this.dayUsage);
      first = false;
    }
    if (isSetValid()) {
      if (!first) sb.append(", ");
      sb.append("valid:");
      sb.append(this.valid);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MedicineStandardSchemeFactory implements SchemeFactory {
    public MedicineStandardScheme getScheme() {
      return new MedicineStandardScheme();
    }
  }

  private static class MedicineStandardScheme extends StandardScheme<Medicine> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Medicine struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.code = iprot.readString();
              struct.setCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SPECIFICATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.specification = iprot.readString();
              struct.setSpecificationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FORM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.form = iprot.readString();
              struct.setFormIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PACKAGE_UNIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.packageUnit = iprot.readString();
              struct.setPackageUnitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PACKAGE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.packageNum = iprot.readI32();
              struct.setPackageNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.price = iprot.readDouble();
              struct.setPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CATEGORY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.category = top.itcat.rpc.service.model.MedicineCategoryEnum.findByValue(iprot.readI32());
              struct.setCategoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // USAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.usage = top.itcat.rpc.service.model.MedicineUsageEnum.findByValue(iprot.readI32());
              struct.setUsageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DOSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.dosage = iprot.readDouble();
              struct.setDosageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // UNIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.unit = iprot.readString();
              struct.setUnitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ADVICE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.advice = iprot.readString();
              struct.setAdviceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // FACTORY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.factory = iprot.readString();
              struct.setFactoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // PINYIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pinyin = iprot.readString();
              struct.setPinyinIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // FREQUENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.frequency = iprot.readString();
              struct.setFrequencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // DAY_USAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dayUsage = iprot.readI32();
              struct.setDayUsageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 255: // VALID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.valid = iprot.readI32();
              struct.setValidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Medicine struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.code != null) {
        if (struct.isSetCode()) {
          oprot.writeFieldBegin(CODE_FIELD_DESC);
          oprot.writeString(struct.code);
          oprot.writeFieldEnd();
        }
      }
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.specification != null) {
        if (struct.isSetSpecification()) {
          oprot.writeFieldBegin(SPECIFICATION_FIELD_DESC);
          oprot.writeString(struct.specification);
          oprot.writeFieldEnd();
        }
      }
      if (struct.form != null) {
        if (struct.isSetForm()) {
          oprot.writeFieldBegin(FORM_FIELD_DESC);
          oprot.writeString(struct.form);
          oprot.writeFieldEnd();
        }
      }
      if (struct.packageUnit != null) {
        if (struct.isSetPackageUnit()) {
          oprot.writeFieldBegin(PACKAGE_UNIT_FIELD_DESC);
          oprot.writeString(struct.packageUnit);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPackageNum()) {
        oprot.writeFieldBegin(PACKAGE_NUM_FIELD_DESC);
        oprot.writeI32(struct.packageNum);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPrice()) {
        oprot.writeFieldBegin(PRICE_FIELD_DESC);
        oprot.writeDouble(struct.price);
        oprot.writeFieldEnd();
      }
      if (struct.category != null) {
        if (struct.isSetCategory()) {
          oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
          oprot.writeI32(struct.category.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.usage != null) {
        if (struct.isSetUsage()) {
          oprot.writeFieldBegin(USAGE_FIELD_DESC);
          oprot.writeI32(struct.usage.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDosage()) {
        oprot.writeFieldBegin(DOSAGE_FIELD_DESC);
        oprot.writeDouble(struct.dosage);
        oprot.writeFieldEnd();
      }
      if (struct.unit != null) {
        if (struct.isSetUnit()) {
          oprot.writeFieldBegin(UNIT_FIELD_DESC);
          oprot.writeString(struct.unit);
          oprot.writeFieldEnd();
        }
      }
      if (struct.advice != null) {
        if (struct.isSetAdvice()) {
          oprot.writeFieldBegin(ADVICE_FIELD_DESC);
          oprot.writeString(struct.advice);
          oprot.writeFieldEnd();
        }
      }
      if (struct.factory != null) {
        if (struct.isSetFactory()) {
          oprot.writeFieldBegin(FACTORY_FIELD_DESC);
          oprot.writeString(struct.factory);
          oprot.writeFieldEnd();
        }
      }
      if (struct.pinyin != null) {
        if (struct.isSetPinyin()) {
          oprot.writeFieldBegin(PINYIN_FIELD_DESC);
          oprot.writeString(struct.pinyin);
          oprot.writeFieldEnd();
        }
      }
      if (struct.frequency != null) {
        if (struct.isSetFrequency()) {
          oprot.writeFieldBegin(FREQUENCY_FIELD_DESC);
          oprot.writeString(struct.frequency);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDayUsage()) {
        oprot.writeFieldBegin(DAY_USAGE_FIELD_DESC);
        oprot.writeI32(struct.dayUsage);
        oprot.writeFieldEnd();
      }
      if (struct.isSetValid()) {
        oprot.writeFieldBegin(VALID_FIELD_DESC);
        oprot.writeI32(struct.valid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MedicineTupleSchemeFactory implements SchemeFactory {
    public MedicineTupleScheme getScheme() {
      return new MedicineTupleScheme();
    }
  }

  private static class MedicineTupleScheme extends TupleScheme<Medicine> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Medicine struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetCode()) {
        optionals.set(1);
      }
      if (struct.isSetName()) {
        optionals.set(2);
      }
      if (struct.isSetSpecification()) {
        optionals.set(3);
      }
      if (struct.isSetForm()) {
        optionals.set(4);
      }
      if (struct.isSetPackageUnit()) {
        optionals.set(5);
      }
      if (struct.isSetPackageNum()) {
        optionals.set(6);
      }
      if (struct.isSetPrice()) {
        optionals.set(7);
      }
      if (struct.isSetCategory()) {
        optionals.set(8);
      }
      if (struct.isSetUsage()) {
        optionals.set(9);
      }
      if (struct.isSetDosage()) {
        optionals.set(10);
      }
      if (struct.isSetUnit()) {
        optionals.set(11);
      }
      if (struct.isSetAdvice()) {
        optionals.set(12);
      }
      if (struct.isSetFactory()) {
        optionals.set(13);
      }
      if (struct.isSetPinyin()) {
        optionals.set(14);
      }
      if (struct.isSetFrequency()) {
        optionals.set(15);
      }
      if (struct.isSetDayUsage()) {
        optionals.set(16);
      }
      if (struct.isSetValid()) {
        optionals.set(17);
      }
      oprot.writeBitSet(optionals, 18);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetCode()) {
        oprot.writeString(struct.code);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetSpecification()) {
        oprot.writeString(struct.specification);
      }
      if (struct.isSetForm()) {
        oprot.writeString(struct.form);
      }
      if (struct.isSetPackageUnit()) {
        oprot.writeString(struct.packageUnit);
      }
      if (struct.isSetPackageNum()) {
        oprot.writeI32(struct.packageNum);
      }
      if (struct.isSetPrice()) {
        oprot.writeDouble(struct.price);
      }
      if (struct.isSetCategory()) {
        oprot.writeI32(struct.category.getValue());
      }
      if (struct.isSetUsage()) {
        oprot.writeI32(struct.usage.getValue());
      }
      if (struct.isSetDosage()) {
        oprot.writeDouble(struct.dosage);
      }
      if (struct.isSetUnit()) {
        oprot.writeString(struct.unit);
      }
      if (struct.isSetAdvice()) {
        oprot.writeString(struct.advice);
      }
      if (struct.isSetFactory()) {
        oprot.writeString(struct.factory);
      }
      if (struct.isSetPinyin()) {
        oprot.writeString(struct.pinyin);
      }
      if (struct.isSetFrequency()) {
        oprot.writeString(struct.frequency);
      }
      if (struct.isSetDayUsage()) {
        oprot.writeI32(struct.dayUsage);
      }
      if (struct.isSetValid()) {
        oprot.writeI32(struct.valid);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Medicine struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(18);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.code = iprot.readString();
        struct.setCodeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.specification = iprot.readString();
        struct.setSpecificationIsSet(true);
      }
      if (incoming.get(4)) {
        struct.form = iprot.readString();
        struct.setFormIsSet(true);
      }
      if (incoming.get(5)) {
        struct.packageUnit = iprot.readString();
        struct.setPackageUnitIsSet(true);
      }
      if (incoming.get(6)) {
        struct.packageNum = iprot.readI32();
        struct.setPackageNumIsSet(true);
      }
      if (incoming.get(7)) {
        struct.price = iprot.readDouble();
        struct.setPriceIsSet(true);
      }
      if (incoming.get(8)) {
        struct.category = top.itcat.rpc.service.model.MedicineCategoryEnum.findByValue(iprot.readI32());
        struct.setCategoryIsSet(true);
      }
      if (incoming.get(9)) {
        struct.usage = top.itcat.rpc.service.model.MedicineUsageEnum.findByValue(iprot.readI32());
        struct.setUsageIsSet(true);
      }
      if (incoming.get(10)) {
        struct.dosage = iprot.readDouble();
        struct.setDosageIsSet(true);
      }
      if (incoming.get(11)) {
        struct.unit = iprot.readString();
        struct.setUnitIsSet(true);
      }
      if (incoming.get(12)) {
        struct.advice = iprot.readString();
        struct.setAdviceIsSet(true);
      }
      if (incoming.get(13)) {
        struct.factory = iprot.readString();
        struct.setFactoryIsSet(true);
      }
      if (incoming.get(14)) {
        struct.pinyin = iprot.readString();
        struct.setPinyinIsSet(true);
      }
      if (incoming.get(15)) {
        struct.frequency = iprot.readString();
        struct.setFrequencyIsSet(true);
      }
      if (incoming.get(16)) {
        struct.dayUsage = iprot.readI32();
        struct.setDayUsageIsSet(true);
      }
      if (incoming.get(17)) {
        struct.valid = iprot.readI32();
        struct.setValidIsSet(true);
      }
    }
  }

}

