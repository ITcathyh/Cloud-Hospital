/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package top.itcat.rpc.service.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2019-7-3")
public class DoctorDiagnostic implements org.apache.thrift.TBase<DoctorDiagnostic, DoctorDiagnostic._Fields>, java.io.Serializable, Cloneable, Comparable<DoctorDiagnostic> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DoctorDiagnostic");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField DOCTOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("doctorId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField DIAGNOSTIC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("diagnosticId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField SUITABLE_RANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("suitableRange", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField CATALOG_FIELD_DESC = new org.apache.thrift.protocol.TField("catalog", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField MAIN_FIELD_DESC = new org.apache.thrift.protocol.TField("main", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField SUSPECT_FIELD_DESC = new org.apache.thrift.protocol.TField("suspect", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField MEDICAL_RECORD_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("medicalRecordNo", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField VALID_FIELD_DESC = new org.apache.thrift.protocol.TField("valid", org.apache.thrift.protocol.TType.I32, (short)255);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DoctorDiagnosticStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DoctorDiagnosticTupleSchemeFactory());
  }

  public long id; // optional
  public long doctorId; // optional
  public long diagnosticId; // optional
  /**
   * 
   * @see top.itcat.rpc.service.model.SuitableRangeEnum
   */
  public top.itcat.rpc.service.model.SuitableRangeEnum suitableRange; // optional
  /**
   * 
   * @see DoctorDiagnosticCatalogEnum
   */
  public DoctorDiagnosticCatalogEnum catalog; // optional
  public boolean main; // optional
  public boolean suspect; // optional
  public long medicalRecordNo; // optional
  public int valid; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    DOCTOR_ID((short)2, "doctorId"),
    DIAGNOSTIC_ID((short)3, "diagnosticId"),
    /**
     * 
     * @see top.itcat.rpc.service.model.SuitableRangeEnum
     */
    SUITABLE_RANGE((short)4, "suitableRange"),
    /**
     * 
     * @see DoctorDiagnosticCatalogEnum
     */
    CATALOG((short)5, "catalog"),
    MAIN((short)6, "main"),
    SUSPECT((short)7, "suspect"),
    MEDICAL_RECORD_NO((short)8, "medicalRecordNo"),
    VALID((short)255, "valid");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // DOCTOR_ID
          return DOCTOR_ID;
        case 3: // DIAGNOSTIC_ID
          return DIAGNOSTIC_ID;
        case 4: // SUITABLE_RANGE
          return SUITABLE_RANGE;
        case 5: // CATALOG
          return CATALOG;
        case 6: // MAIN
          return MAIN;
        case 7: // SUSPECT
          return SUSPECT;
        case 8: // MEDICAL_RECORD_NO
          return MEDICAL_RECORD_NO;
        case 255: // VALID
          return VALID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __DOCTORID_ISSET_ID = 1;
  private static final int __DIAGNOSTICID_ISSET_ID = 2;
  private static final int __MAIN_ISSET_ID = 3;
  private static final int __SUSPECT_ISSET_ID = 4;
  private static final int __MEDICALRECORDNO_ISSET_ID = 5;
  private static final int __VALID_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.DOCTOR_ID,_Fields.DIAGNOSTIC_ID,_Fields.SUITABLE_RANGE,_Fields.CATALOG,_Fields.MAIN,_Fields.SUSPECT,_Fields.MEDICAL_RECORD_NO,_Fields.VALID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DOCTOR_ID, new org.apache.thrift.meta_data.FieldMetaData("doctorId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DIAGNOSTIC_ID, new org.apache.thrift.meta_data.FieldMetaData("diagnosticId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SUITABLE_RANGE, new org.apache.thrift.meta_data.FieldMetaData("suitableRange", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, top.itcat.rpc.service.model.SuitableRangeEnum.class)));
    tmpMap.put(_Fields.CATALOG, new org.apache.thrift.meta_data.FieldMetaData("catalog", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, DoctorDiagnosticCatalogEnum.class)));
    tmpMap.put(_Fields.MAIN, new org.apache.thrift.meta_data.FieldMetaData("main", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SUSPECT, new org.apache.thrift.meta_data.FieldMetaData("suspect", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.MEDICAL_RECORD_NO, new org.apache.thrift.meta_data.FieldMetaData("medicalRecordNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VALID, new org.apache.thrift.meta_data.FieldMetaData("valid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DoctorDiagnostic.class, metaDataMap);
  }

  public DoctorDiagnostic() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DoctorDiagnostic(DoctorDiagnostic other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.doctorId = other.doctorId;
    this.diagnosticId = other.diagnosticId;
    if (other.isSetSuitableRange()) {
      this.suitableRange = other.suitableRange;
    }
    if (other.isSetCatalog()) {
      this.catalog = other.catalog;
    }
    this.main = other.main;
    this.suspect = other.suspect;
    this.medicalRecordNo = other.medicalRecordNo;
    this.valid = other.valid;
  }

  public DoctorDiagnostic deepCopy() {
    return new DoctorDiagnostic(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setDoctorIdIsSet(false);
    this.doctorId = 0;
    setDiagnosticIdIsSet(false);
    this.diagnosticId = 0;
    this.suitableRange = null;
    this.catalog = null;
    setMainIsSet(false);
    this.main = false;
    setSuspectIsSet(false);
    this.suspect = false;
    setMedicalRecordNoIsSet(false);
    this.medicalRecordNo = 0;
    setValidIsSet(false);
    this.valid = 0;
  }

  public long getId() {
    return this.id;
  }

  public DoctorDiagnostic setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public long getDoctorId() {
    return this.doctorId;
  }

  public DoctorDiagnostic setDoctorId(long doctorId) {
    this.doctorId = doctorId;
    setDoctorIdIsSet(true);
    return this;
  }

  public void unsetDoctorId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DOCTORID_ISSET_ID);
  }

  /** Returns true if field doctorId is set (has been assigned a value) and false otherwise */
  public boolean isSetDoctorId() {
    return EncodingUtils.testBit(__isset_bitfield, __DOCTORID_ISSET_ID);
  }

  public void setDoctorIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DOCTORID_ISSET_ID, value);
  }

  public long getDiagnosticId() {
    return this.diagnosticId;
  }

  public DoctorDiagnostic setDiagnosticId(long diagnosticId) {
    this.diagnosticId = diagnosticId;
    setDiagnosticIdIsSet(true);
    return this;
  }

  public void unsetDiagnosticId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DIAGNOSTICID_ISSET_ID);
  }

  /** Returns true if field diagnosticId is set (has been assigned a value) and false otherwise */
  public boolean isSetDiagnosticId() {
    return EncodingUtils.testBit(__isset_bitfield, __DIAGNOSTICID_ISSET_ID);
  }

  public void setDiagnosticIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DIAGNOSTICID_ISSET_ID, value);
  }

  /**
   * 
   * @see top.itcat.rpc.service.model.SuitableRangeEnum
   */
  public top.itcat.rpc.service.model.SuitableRangeEnum getSuitableRange() {
    return this.suitableRange;
  }

  /**
   * 
   * @see top.itcat.rpc.service.model.SuitableRangeEnum
   */
  public DoctorDiagnostic setSuitableRange(top.itcat.rpc.service.model.SuitableRangeEnum suitableRange) {
    this.suitableRange = suitableRange;
    return this;
  }

  public void unsetSuitableRange() {
    this.suitableRange = null;
  }

  /** Returns true if field suitableRange is set (has been assigned a value) and false otherwise */
  public boolean isSetSuitableRange() {
    return this.suitableRange != null;
  }

  public void setSuitableRangeIsSet(boolean value) {
    if (!value) {
      this.suitableRange = null;
    }
  }

  /**
   * 
   * @see DoctorDiagnosticCatalogEnum
   */
  public DoctorDiagnosticCatalogEnum getCatalog() {
    return this.catalog;
  }

  /**
   * 
   * @see DoctorDiagnosticCatalogEnum
   */
  public DoctorDiagnostic setCatalog(DoctorDiagnosticCatalogEnum catalog) {
    this.catalog = catalog;
    return this;
  }

  public void unsetCatalog() {
    this.catalog = null;
  }

  /** Returns true if field catalog is set (has been assigned a value) and false otherwise */
  public boolean isSetCatalog() {
    return this.catalog != null;
  }

  public void setCatalogIsSet(boolean value) {
    if (!value) {
      this.catalog = null;
    }
  }

  public boolean isMain() {
    return this.main;
  }

  public DoctorDiagnostic setMain(boolean main) {
    this.main = main;
    setMainIsSet(true);
    return this;
  }

  public void unsetMain() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAIN_ISSET_ID);
  }

  /** Returns true if field main is set (has been assigned a value) and false otherwise */
  public boolean isSetMain() {
    return EncodingUtils.testBit(__isset_bitfield, __MAIN_ISSET_ID);
  }

  public void setMainIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAIN_ISSET_ID, value);
  }

  public boolean isSuspect() {
    return this.suspect;
  }

  public DoctorDiagnostic setSuspect(boolean suspect) {
    this.suspect = suspect;
    setSuspectIsSet(true);
    return this;
  }

  public void unsetSuspect() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUSPECT_ISSET_ID);
  }

  /** Returns true if field suspect is set (has been assigned a value) and false otherwise */
  public boolean isSetSuspect() {
    return EncodingUtils.testBit(__isset_bitfield, __SUSPECT_ISSET_ID);
  }

  public void setSuspectIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUSPECT_ISSET_ID, value);
  }

  public long getMedicalRecordNo() {
    return this.medicalRecordNo;
  }

  public DoctorDiagnostic setMedicalRecordNo(long medicalRecordNo) {
    this.medicalRecordNo = medicalRecordNo;
    setMedicalRecordNoIsSet(true);
    return this;
  }

  public void unsetMedicalRecordNo() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEDICALRECORDNO_ISSET_ID);
  }

  /** Returns true if field medicalRecordNo is set (has been assigned a value) and false otherwise */
  public boolean isSetMedicalRecordNo() {
    return EncodingUtils.testBit(__isset_bitfield, __MEDICALRECORDNO_ISSET_ID);
  }

  public void setMedicalRecordNoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEDICALRECORDNO_ISSET_ID, value);
  }

  public int getValid() {
    return this.valid;
  }

  public DoctorDiagnostic setValid(int valid) {
    this.valid = valid;
    setValidIsSet(true);
    return this;
  }

  public void unsetValid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VALID_ISSET_ID);
  }

  /** Returns true if field valid is set (has been assigned a value) and false otherwise */
  public boolean isSetValid() {
    return EncodingUtils.testBit(__isset_bitfield, __VALID_ISSET_ID);
  }

  public void setValidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VALID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case DOCTOR_ID:
      if (value == null) {
        unsetDoctorId();
      } else {
        setDoctorId((Long)value);
      }
      break;

    case DIAGNOSTIC_ID:
      if (value == null) {
        unsetDiagnosticId();
      } else {
        setDiagnosticId((Long)value);
      }
      break;

    case SUITABLE_RANGE:
      if (value == null) {
        unsetSuitableRange();
      } else {
        setSuitableRange((top.itcat.rpc.service.model.SuitableRangeEnum)value);
      }
      break;

    case CATALOG:
      if (value == null) {
        unsetCatalog();
      } else {
        setCatalog((DoctorDiagnosticCatalogEnum)value);
      }
      break;

    case MAIN:
      if (value == null) {
        unsetMain();
      } else {
        setMain((Boolean)value);
      }
      break;

    case SUSPECT:
      if (value == null) {
        unsetSuspect();
      } else {
        setSuspect((Boolean)value);
      }
      break;

    case MEDICAL_RECORD_NO:
      if (value == null) {
        unsetMedicalRecordNo();
      } else {
        setMedicalRecordNo((Long)value);
      }
      break;

    case VALID:
      if (value == null) {
        unsetValid();
      } else {
        setValid((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case DOCTOR_ID:
      return Long.valueOf(getDoctorId());

    case DIAGNOSTIC_ID:
      return Long.valueOf(getDiagnosticId());

    case SUITABLE_RANGE:
      return getSuitableRange();

    case CATALOG:
      return getCatalog();

    case MAIN:
      return Boolean.valueOf(isMain());

    case SUSPECT:
      return Boolean.valueOf(isSuspect());

    case MEDICAL_RECORD_NO:
      return Long.valueOf(getMedicalRecordNo());

    case VALID:
      return Integer.valueOf(getValid());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case DOCTOR_ID:
      return isSetDoctorId();
    case DIAGNOSTIC_ID:
      return isSetDiagnosticId();
    case SUITABLE_RANGE:
      return isSetSuitableRange();
    case CATALOG:
      return isSetCatalog();
    case MAIN:
      return isSetMain();
    case SUSPECT:
      return isSetSuspect();
    case MEDICAL_RECORD_NO:
      return isSetMedicalRecordNo();
    case VALID:
      return isSetValid();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DoctorDiagnostic)
      return this.equals((DoctorDiagnostic)that);
    return false;
  }

  public boolean equals(DoctorDiagnostic that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_doctorId = true && this.isSetDoctorId();
    boolean that_present_doctorId = true && that.isSetDoctorId();
    if (this_present_doctorId || that_present_doctorId) {
      if (!(this_present_doctorId && that_present_doctorId))
        return false;
      if (this.doctorId != that.doctorId)
        return false;
    }

    boolean this_present_diagnosticId = true && this.isSetDiagnosticId();
    boolean that_present_diagnosticId = true && that.isSetDiagnosticId();
    if (this_present_diagnosticId || that_present_diagnosticId) {
      if (!(this_present_diagnosticId && that_present_diagnosticId))
        return false;
      if (this.diagnosticId != that.diagnosticId)
        return false;
    }

    boolean this_present_suitableRange = true && this.isSetSuitableRange();
    boolean that_present_suitableRange = true && that.isSetSuitableRange();
    if (this_present_suitableRange || that_present_suitableRange) {
      if (!(this_present_suitableRange && that_present_suitableRange))
        return false;
      if (!this.suitableRange.equals(that.suitableRange))
        return false;
    }

    boolean this_present_catalog = true && this.isSetCatalog();
    boolean that_present_catalog = true && that.isSetCatalog();
    if (this_present_catalog || that_present_catalog) {
      if (!(this_present_catalog && that_present_catalog))
        return false;
      if (!this.catalog.equals(that.catalog))
        return false;
    }

    boolean this_present_main = true && this.isSetMain();
    boolean that_present_main = true && that.isSetMain();
    if (this_present_main || that_present_main) {
      if (!(this_present_main && that_present_main))
        return false;
      if (this.main != that.main)
        return false;
    }

    boolean this_present_suspect = true && this.isSetSuspect();
    boolean that_present_suspect = true && that.isSetSuspect();
    if (this_present_suspect || that_present_suspect) {
      if (!(this_present_suspect && that_present_suspect))
        return false;
      if (this.suspect != that.suspect)
        return false;
    }

    boolean this_present_medicalRecordNo = true && this.isSetMedicalRecordNo();
    boolean that_present_medicalRecordNo = true && that.isSetMedicalRecordNo();
    if (this_present_medicalRecordNo || that_present_medicalRecordNo) {
      if (!(this_present_medicalRecordNo && that_present_medicalRecordNo))
        return false;
      if (this.medicalRecordNo != that.medicalRecordNo)
        return false;
    }

    boolean this_present_valid = true && this.isSetValid();
    boolean that_present_valid = true && that.isSetValid();
    if (this_present_valid || that_present_valid) {
      if (!(this_present_valid && that_present_valid))
        return false;
      if (this.valid != that.valid)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_doctorId = true && (isSetDoctorId());
    list.add(present_doctorId);
    if (present_doctorId)
      list.add(doctorId);

    boolean present_diagnosticId = true && (isSetDiagnosticId());
    list.add(present_diagnosticId);
    if (present_diagnosticId)
      list.add(diagnosticId);

    boolean present_suitableRange = true && (isSetSuitableRange());
    list.add(present_suitableRange);
    if (present_suitableRange)
      list.add(suitableRange.getValue());

    boolean present_catalog = true && (isSetCatalog());
    list.add(present_catalog);
    if (present_catalog)
      list.add(catalog.getValue());

    boolean present_main = true && (isSetMain());
    list.add(present_main);
    if (present_main)
      list.add(main);

    boolean present_suspect = true && (isSetSuspect());
    list.add(present_suspect);
    if (present_suspect)
      list.add(suspect);

    boolean present_medicalRecordNo = true && (isSetMedicalRecordNo());
    list.add(present_medicalRecordNo);
    if (present_medicalRecordNo)
      list.add(medicalRecordNo);

    boolean present_valid = true && (isSetValid());
    list.add(present_valid);
    if (present_valid)
      list.add(valid);

    return list.hashCode();
  }

  @Override
  public int compareTo(DoctorDiagnostic other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDoctorId()).compareTo(other.isSetDoctorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDoctorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doctorId, other.doctorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDiagnosticId()).compareTo(other.isSetDiagnosticId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDiagnosticId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.diagnosticId, other.diagnosticId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSuitableRange()).compareTo(other.isSetSuitableRange());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuitableRange()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.suitableRange, other.suitableRange);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCatalog()).compareTo(other.isSetCatalog());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCatalog()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.catalog, other.catalog);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMain()).compareTo(other.isSetMain());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMain()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.main, other.main);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSuspect()).compareTo(other.isSetSuspect());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuspect()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.suspect, other.suspect);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMedicalRecordNo()).compareTo(other.isSetMedicalRecordNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMedicalRecordNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.medicalRecordNo, other.medicalRecordNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValid()).compareTo(other.isSetValid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.valid, other.valid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DoctorDiagnostic(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetDoctorId()) {
      if (!first) sb.append(", ");
      sb.append("doctorId:");
      sb.append(this.doctorId);
      first = false;
    }
    if (isSetDiagnosticId()) {
      if (!first) sb.append(", ");
      sb.append("diagnosticId:");
      sb.append(this.diagnosticId);
      first = false;
    }
    if (isSetSuitableRange()) {
      if (!first) sb.append(", ");
      sb.append("suitableRange:");
      if (this.suitableRange == null) {
        sb.append("null");
      } else {
        sb.append(this.suitableRange);
      }
      first = false;
    }
    if (isSetCatalog()) {
      if (!first) sb.append(", ");
      sb.append("catalog:");
      if (this.catalog == null) {
        sb.append("null");
      } else {
        sb.append(this.catalog);
      }
      first = false;
    }
    if (isSetMain()) {
      if (!first) sb.append(", ");
      sb.append("main:");
      sb.append(this.main);
      first = false;
    }
    if (isSetSuspect()) {
      if (!first) sb.append(", ");
      sb.append("suspect:");
      sb.append(this.suspect);
      first = false;
    }
    if (isSetMedicalRecordNo()) {
      if (!first) sb.append(", ");
      sb.append("medicalRecordNo:");
      sb.append(this.medicalRecordNo);
      first = false;
    }
    if (isSetValid()) {
      if (!first) sb.append(", ");
      sb.append("valid:");
      sb.append(this.valid);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DoctorDiagnosticStandardSchemeFactory implements SchemeFactory {
    public DoctorDiagnosticStandardScheme getScheme() {
      return new DoctorDiagnosticStandardScheme();
    }
  }

  private static class DoctorDiagnosticStandardScheme extends StandardScheme<DoctorDiagnostic> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DoctorDiagnostic struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DOCTOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.doctorId = iprot.readI64();
              struct.setDoctorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DIAGNOSTIC_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.diagnosticId = iprot.readI64();
              struct.setDiagnosticIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SUITABLE_RANGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.suitableRange = top.itcat.rpc.service.model.SuitableRangeEnum.findByValue(iprot.readI32());
              struct.setSuitableRangeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CATALOG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.catalog = top.itcat.rpc.service.model.DoctorDiagnosticCatalogEnum.findByValue(iprot.readI32());
              struct.setCatalogIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MAIN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.main = iprot.readBool();
              struct.setMainIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SUSPECT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.suspect = iprot.readBool();
              struct.setSuspectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MEDICAL_RECORD_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.medicalRecordNo = iprot.readI64();
              struct.setMedicalRecordNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 255: // VALID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.valid = iprot.readI32();
              struct.setValidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DoctorDiagnostic struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDoctorId()) {
        oprot.writeFieldBegin(DOCTOR_ID_FIELD_DESC);
        oprot.writeI64(struct.doctorId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDiagnosticId()) {
        oprot.writeFieldBegin(DIAGNOSTIC_ID_FIELD_DESC);
        oprot.writeI64(struct.diagnosticId);
        oprot.writeFieldEnd();
      }
      if (struct.suitableRange != null) {
        if (struct.isSetSuitableRange()) {
          oprot.writeFieldBegin(SUITABLE_RANGE_FIELD_DESC);
          oprot.writeI32(struct.suitableRange.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.catalog != null) {
        if (struct.isSetCatalog()) {
          oprot.writeFieldBegin(CATALOG_FIELD_DESC);
          oprot.writeI32(struct.catalog.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMain()) {
        oprot.writeFieldBegin(MAIN_FIELD_DESC);
        oprot.writeBool(struct.main);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSuspect()) {
        oprot.writeFieldBegin(SUSPECT_FIELD_DESC);
        oprot.writeBool(struct.suspect);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMedicalRecordNo()) {
        oprot.writeFieldBegin(MEDICAL_RECORD_NO_FIELD_DESC);
        oprot.writeI64(struct.medicalRecordNo);
        oprot.writeFieldEnd();
      }
      if (struct.isSetValid()) {
        oprot.writeFieldBegin(VALID_FIELD_DESC);
        oprot.writeI32(struct.valid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DoctorDiagnosticTupleSchemeFactory implements SchemeFactory {
    public DoctorDiagnosticTupleScheme getScheme() {
      return new DoctorDiagnosticTupleScheme();
    }
  }

  private static class DoctorDiagnosticTupleScheme extends TupleScheme<DoctorDiagnostic> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DoctorDiagnostic struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetDoctorId()) {
        optionals.set(1);
      }
      if (struct.isSetDiagnosticId()) {
        optionals.set(2);
      }
      if (struct.isSetSuitableRange()) {
        optionals.set(3);
      }
      if (struct.isSetCatalog()) {
        optionals.set(4);
      }
      if (struct.isSetMain()) {
        optionals.set(5);
      }
      if (struct.isSetSuspect()) {
        optionals.set(6);
      }
      if (struct.isSetMedicalRecordNo()) {
        optionals.set(7);
      }
      if (struct.isSetValid()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetDoctorId()) {
        oprot.writeI64(struct.doctorId);
      }
      if (struct.isSetDiagnosticId()) {
        oprot.writeI64(struct.diagnosticId);
      }
      if (struct.isSetSuitableRange()) {
        oprot.writeI32(struct.suitableRange.getValue());
      }
      if (struct.isSetCatalog()) {
        oprot.writeI32(struct.catalog.getValue());
      }
      if (struct.isSetMain()) {
        oprot.writeBool(struct.main);
      }
      if (struct.isSetSuspect()) {
        oprot.writeBool(struct.suspect);
      }
      if (struct.isSetMedicalRecordNo()) {
        oprot.writeI64(struct.medicalRecordNo);
      }
      if (struct.isSetValid()) {
        oprot.writeI32(struct.valid);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DoctorDiagnostic struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.doctorId = iprot.readI64();
        struct.setDoctorIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.diagnosticId = iprot.readI64();
        struct.setDiagnosticIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.suitableRange = top.itcat.rpc.service.model.SuitableRangeEnum.findByValue(iprot.readI32());
        struct.setSuitableRangeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.catalog = top.itcat.rpc.service.model.DoctorDiagnosticCatalogEnum.findByValue(iprot.readI32());
        struct.setCatalogIsSet(true);
      }
      if (incoming.get(5)) {
        struct.main = iprot.readBool();
        struct.setMainIsSet(true);
      }
      if (incoming.get(6)) {
        struct.suspect = iprot.readBool();
        struct.setSuspectIsSet(true);
      }
      if (incoming.get(7)) {
        struct.medicalRecordNo = iprot.readI64();
        struct.setMedicalRecordNoIsSet(true);
      }
      if (incoming.get(8)) {
        struct.valid = iprot.readI32();
        struct.setValidIsSet(true);
      }
    }
  }

}

