/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package top.itcat.rpc.service.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2019-7-3")
public class Prescription implements org.apache.thrift.TBase<Prescription, Prescription._Fields>, java.io.Serializable, Cloneable, Comparable<Prescription> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Prescription");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField MEDICAL_RECORD_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("medicalRecordNo", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField CATEGOTY_FIELD_DESC = new org.apache.thrift.protocol.TField("categoty", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("price", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField DOCTOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("doctorId", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("items", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField VALID_FIELD_DESC = new org.apache.thrift.protocol.TField("valid", org.apache.thrift.protocol.TType.I32, (short)255);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PrescriptionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PrescriptionTupleSchemeFactory());
  }

  public long id; // optional
  public long medicalRecordNo; // optional
  /**
   * 
   * @see PrescriptionType
   */
  public PrescriptionType type; // optional
  /**
   * 
   * @see PrescriptionCategoty
   */
  public PrescriptionCategoty categoty; // optional
  public double price; // optional
  public String remark; // optional
  public long doctorId; // optional
  public List<PrescriptionItem> items; // optional
  public int valid; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    MEDICAL_RECORD_NO((short)2, "medicalRecordNo"),
    /**
     * 
     * @see PrescriptionType
     */
    TYPE((short)3, "type"),
    /**
     * 
     * @see PrescriptionCategoty
     */
    CATEGOTY((short)4, "categoty"),
    PRICE((short)5, "price"),
    REMARK((short)6, "remark"),
    DOCTOR_ID((short)7, "doctorId"),
    ITEMS((short)8, "items"),
    VALID((short)255, "valid");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // MEDICAL_RECORD_NO
          return MEDICAL_RECORD_NO;
        case 3: // TYPE
          return TYPE;
        case 4: // CATEGOTY
          return CATEGOTY;
        case 5: // PRICE
          return PRICE;
        case 6: // REMARK
          return REMARK;
        case 7: // DOCTOR_ID
          return DOCTOR_ID;
        case 8: // ITEMS
          return ITEMS;
        case 255: // VALID
          return VALID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __MEDICALRECORDNO_ISSET_ID = 1;
  private static final int __PRICE_ISSET_ID = 2;
  private static final int __DOCTORID_ISSET_ID = 3;
  private static final int __VALID_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.MEDICAL_RECORD_NO,_Fields.TYPE,_Fields.CATEGOTY,_Fields.PRICE,_Fields.REMARK,_Fields.DOCTOR_ID,_Fields.ITEMS,_Fields.VALID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MEDICAL_RECORD_NO, new org.apache.thrift.meta_data.FieldMetaData("medicalRecordNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PrescriptionType.class)));
    tmpMap.put(_Fields.CATEGOTY, new org.apache.thrift.meta_data.FieldMetaData("categoty", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PrescriptionCategoty.class)));
    tmpMap.put(_Fields.PRICE, new org.apache.thrift.meta_data.FieldMetaData("price", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOCTOR_ID, new org.apache.thrift.meta_data.FieldMetaData("doctorId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ITEMS, new org.apache.thrift.meta_data.FieldMetaData("items", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "PrescriptionItem"))));
    tmpMap.put(_Fields.VALID, new org.apache.thrift.meta_data.FieldMetaData("valid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Prescription.class, metaDataMap);
  }

  public Prescription() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Prescription(Prescription other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.medicalRecordNo = other.medicalRecordNo;
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetCategoty()) {
      this.categoty = other.categoty;
    }
    this.price = other.price;
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    this.doctorId = other.doctorId;
    if (other.isSetItems()) {
      List<PrescriptionItem> __this__items = new ArrayList<PrescriptionItem>(other.items.size());
      for (PrescriptionItem other_element : other.items) {
        __this__items.add(other_element);
      }
      this.items = __this__items;
    }
    this.valid = other.valid;
  }

  public Prescription deepCopy() {
    return new Prescription(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setMedicalRecordNoIsSet(false);
    this.medicalRecordNo = 0;
    this.type = null;
    this.categoty = null;
    setPriceIsSet(false);
    this.price = 0.0;
    this.remark = null;
    setDoctorIdIsSet(false);
    this.doctorId = 0;
    this.items = null;
    setValidIsSet(false);
    this.valid = 0;
  }

  public long getId() {
    return this.id;
  }

  public Prescription setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public long getMedicalRecordNo() {
    return this.medicalRecordNo;
  }

  public Prescription setMedicalRecordNo(long medicalRecordNo) {
    this.medicalRecordNo = medicalRecordNo;
    setMedicalRecordNoIsSet(true);
    return this;
  }

  public void unsetMedicalRecordNo() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEDICALRECORDNO_ISSET_ID);
  }

  /** Returns true if field medicalRecordNo is set (has been assigned a value) and false otherwise */
  public boolean isSetMedicalRecordNo() {
    return EncodingUtils.testBit(__isset_bitfield, __MEDICALRECORDNO_ISSET_ID);
  }

  public void setMedicalRecordNoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEDICALRECORDNO_ISSET_ID, value);
  }

  /**
   * 
   * @see PrescriptionType
   */
  public PrescriptionType getType() {
    return this.type;
  }

  /**
   * 
   * @see PrescriptionType
   */
  public Prescription setType(PrescriptionType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  /**
   * 
   * @see PrescriptionCategoty
   */
  public PrescriptionCategoty getCategoty() {
    return this.categoty;
  }

  /**
   * 
   * @see PrescriptionCategoty
   */
  public Prescription setCategoty(PrescriptionCategoty categoty) {
    this.categoty = categoty;
    return this;
  }

  public void unsetCategoty() {
    this.categoty = null;
  }

  /** Returns true if field categoty is set (has been assigned a value) and false otherwise */
  public boolean isSetCategoty() {
    return this.categoty != null;
  }

  public void setCategotyIsSet(boolean value) {
    if (!value) {
      this.categoty = null;
    }
  }

  public double getPrice() {
    return this.price;
  }

  public Prescription setPrice(double price) {
    this.price = price;
    setPriceIsSet(true);
    return this;
  }

  public void unsetPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  /** Returns true if field price is set (has been assigned a value) and false otherwise */
  public boolean isSetPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  public void setPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRICE_ISSET_ID, value);
  }

  public String getRemark() {
    return this.remark;
  }

  public Prescription setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public long getDoctorId() {
    return this.doctorId;
  }

  public Prescription setDoctorId(long doctorId) {
    this.doctorId = doctorId;
    setDoctorIdIsSet(true);
    return this;
  }

  public void unsetDoctorId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DOCTORID_ISSET_ID);
  }

  /** Returns true if field doctorId is set (has been assigned a value) and false otherwise */
  public boolean isSetDoctorId() {
    return EncodingUtils.testBit(__isset_bitfield, __DOCTORID_ISSET_ID);
  }

  public void setDoctorIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DOCTORID_ISSET_ID, value);
  }

  public int getItemsSize() {
    return (this.items == null) ? 0 : this.items.size();
  }

  public java.util.Iterator<PrescriptionItem> getItemsIterator() {
    return (this.items == null) ? null : this.items.iterator();
  }

  public void addToItems(PrescriptionItem elem) {
    if (this.items == null) {
      this.items = new ArrayList<PrescriptionItem>();
    }
    this.items.add(elem);
  }

  public List<PrescriptionItem> getItems() {
    return this.items;
  }

  public Prescription setItems(List<PrescriptionItem> items) {
    this.items = items;
    return this;
  }

  public void unsetItems() {
    this.items = null;
  }

  /** Returns true if field items is set (has been assigned a value) and false otherwise */
  public boolean isSetItems() {
    return this.items != null;
  }

  public void setItemsIsSet(boolean value) {
    if (!value) {
      this.items = null;
    }
  }

  public int getValid() {
    return this.valid;
  }

  public Prescription setValid(int valid) {
    this.valid = valid;
    setValidIsSet(true);
    return this;
  }

  public void unsetValid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VALID_ISSET_ID);
  }

  /** Returns true if field valid is set (has been assigned a value) and false otherwise */
  public boolean isSetValid() {
    return EncodingUtils.testBit(__isset_bitfield, __VALID_ISSET_ID);
  }

  public void setValidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VALID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case MEDICAL_RECORD_NO:
      if (value == null) {
        unsetMedicalRecordNo();
      } else {
        setMedicalRecordNo((Long)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((PrescriptionType)value);
      }
      break;

    case CATEGOTY:
      if (value == null) {
        unsetCategoty();
      } else {
        setCategoty((PrescriptionCategoty)value);
      }
      break;

    case PRICE:
      if (value == null) {
        unsetPrice();
      } else {
        setPrice((Double)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case DOCTOR_ID:
      if (value == null) {
        unsetDoctorId();
      } else {
        setDoctorId((Long)value);
      }
      break;

    case ITEMS:
      if (value == null) {
        unsetItems();
      } else {
        setItems((List<PrescriptionItem>)value);
      }
      break;

    case VALID:
      if (value == null) {
        unsetValid();
      } else {
        setValid((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case MEDICAL_RECORD_NO:
      return Long.valueOf(getMedicalRecordNo());

    case TYPE:
      return getType();

    case CATEGOTY:
      return getCategoty();

    case PRICE:
      return Double.valueOf(getPrice());

    case REMARK:
      return getRemark();

    case DOCTOR_ID:
      return Long.valueOf(getDoctorId());

    case ITEMS:
      return getItems();

    case VALID:
      return Integer.valueOf(getValid());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case MEDICAL_RECORD_NO:
      return isSetMedicalRecordNo();
    case TYPE:
      return isSetType();
    case CATEGOTY:
      return isSetCategoty();
    case PRICE:
      return isSetPrice();
    case REMARK:
      return isSetRemark();
    case DOCTOR_ID:
      return isSetDoctorId();
    case ITEMS:
      return isSetItems();
    case VALID:
      return isSetValid();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Prescription)
      return this.equals((Prescription)that);
    return false;
  }

  public boolean equals(Prescription that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_medicalRecordNo = true && this.isSetMedicalRecordNo();
    boolean that_present_medicalRecordNo = true && that.isSetMedicalRecordNo();
    if (this_present_medicalRecordNo || that_present_medicalRecordNo) {
      if (!(this_present_medicalRecordNo && that_present_medicalRecordNo))
        return false;
      if (this.medicalRecordNo != that.medicalRecordNo)
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_categoty = true && this.isSetCategoty();
    boolean that_present_categoty = true && that.isSetCategoty();
    if (this_present_categoty || that_present_categoty) {
      if (!(this_present_categoty && that_present_categoty))
        return false;
      if (!this.categoty.equals(that.categoty))
        return false;
    }

    boolean this_present_price = true && this.isSetPrice();
    boolean that_present_price = true && that.isSetPrice();
    if (this_present_price || that_present_price) {
      if (!(this_present_price && that_present_price))
        return false;
      if (this.price != that.price)
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_doctorId = true && this.isSetDoctorId();
    boolean that_present_doctorId = true && that.isSetDoctorId();
    if (this_present_doctorId || that_present_doctorId) {
      if (!(this_present_doctorId && that_present_doctorId))
        return false;
      if (this.doctorId != that.doctorId)
        return false;
    }

    boolean this_present_items = true && this.isSetItems();
    boolean that_present_items = true && that.isSetItems();
    if (this_present_items || that_present_items) {
      if (!(this_present_items && that_present_items))
        return false;
      if (!this.items.equals(that.items))
        return false;
    }

    boolean this_present_valid = true && this.isSetValid();
    boolean that_present_valid = true && that.isSetValid();
    if (this_present_valid || that_present_valid) {
      if (!(this_present_valid && that_present_valid))
        return false;
      if (this.valid != that.valid)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_medicalRecordNo = true && (isSetMedicalRecordNo());
    list.add(present_medicalRecordNo);
    if (present_medicalRecordNo)
      list.add(medicalRecordNo);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type.getValue());

    boolean present_categoty = true && (isSetCategoty());
    list.add(present_categoty);
    if (present_categoty)
      list.add(categoty.getValue());

    boolean present_price = true && (isSetPrice());
    list.add(present_price);
    if (present_price)
      list.add(price);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_doctorId = true && (isSetDoctorId());
    list.add(present_doctorId);
    if (present_doctorId)
      list.add(doctorId);

    boolean present_items = true && (isSetItems());
    list.add(present_items);
    if (present_items)
      list.add(items);

    boolean present_valid = true && (isSetValid());
    list.add(present_valid);
    if (present_valid)
      list.add(valid);

    return list.hashCode();
  }

  @Override
  public int compareTo(Prescription other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMedicalRecordNo()).compareTo(other.isSetMedicalRecordNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMedicalRecordNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.medicalRecordNo, other.medicalRecordNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCategoty()).compareTo(other.isSetCategoty());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategoty()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categoty, other.categoty);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrice()).compareTo(other.isSetPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.price, other.price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDoctorId()).compareTo(other.isSetDoctorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDoctorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doctorId, other.doctorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItems()).compareTo(other.isSetItems());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItems()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.items, other.items);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValid()).compareTo(other.isSetValid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.valid, other.valid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Prescription(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetMedicalRecordNo()) {
      if (!first) sb.append(", ");
      sb.append("medicalRecordNo:");
      sb.append(this.medicalRecordNo);
      first = false;
    }
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    if (isSetCategoty()) {
      if (!first) sb.append(", ");
      sb.append("categoty:");
      if (this.categoty == null) {
        sb.append("null");
      } else {
        sb.append(this.categoty);
      }
      first = false;
    }
    if (isSetPrice()) {
      if (!first) sb.append(", ");
      sb.append("price:");
      sb.append(this.price);
      first = false;
    }
    if (isSetRemark()) {
      if (!first) sb.append(", ");
      sb.append("remark:");
      if (this.remark == null) {
        sb.append("null");
      } else {
        sb.append(this.remark);
      }
      first = false;
    }
    if (isSetDoctorId()) {
      if (!first) sb.append(", ");
      sb.append("doctorId:");
      sb.append(this.doctorId);
      first = false;
    }
    if (isSetItems()) {
      if (!first) sb.append(", ");
      sb.append("items:");
      if (this.items == null) {
        sb.append("null");
      } else {
        sb.append(this.items);
      }
      first = false;
    }
    if (isSetValid()) {
      if (!first) sb.append(", ");
      sb.append("valid:");
      sb.append(this.valid);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PrescriptionStandardSchemeFactory implements SchemeFactory {
    public PrescriptionStandardScheme getScheme() {
      return new PrescriptionStandardScheme();
    }
  }

  private static class PrescriptionStandardScheme extends StandardScheme<Prescription> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Prescription struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MEDICAL_RECORD_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.medicalRecordNo = iprot.readI64();
              struct.setMedicalRecordNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = top.itcat.rpc.service.model.PrescriptionType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CATEGOTY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.categoty = top.itcat.rpc.service.model.PrescriptionCategoty.findByValue(iprot.readI32());
              struct.setCategotyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.price = iprot.readDouble();
              struct.setPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DOCTOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.doctorId = iprot.readI64();
              struct.setDoctorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ITEMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.items = new ArrayList<PrescriptionItem>(_list0.size);
                PrescriptionItem _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new PrescriptionItem();
                  _elem1.read(iprot);
                  struct.items.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setItemsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 255: // VALID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.valid = iprot.readI32();
              struct.setValidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Prescription struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMedicalRecordNo()) {
        oprot.writeFieldBegin(MEDICAL_RECORD_NO_FIELD_DESC);
        oprot.writeI64(struct.medicalRecordNo);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeI32(struct.type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.categoty != null) {
        if (struct.isSetCategoty()) {
          oprot.writeFieldBegin(CATEGOTY_FIELD_DESC);
          oprot.writeI32(struct.categoty.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPrice()) {
        oprot.writeFieldBegin(PRICE_FIELD_DESC);
        oprot.writeDouble(struct.price);
        oprot.writeFieldEnd();
      }
      if (struct.remark != null) {
        if (struct.isSetRemark()) {
          oprot.writeFieldBegin(REMARK_FIELD_DESC);
          oprot.writeString(struct.remark);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDoctorId()) {
        oprot.writeFieldBegin(DOCTOR_ID_FIELD_DESC);
        oprot.writeI64(struct.doctorId);
        oprot.writeFieldEnd();
      }
      if (struct.items != null) {
        if (struct.isSetItems()) {
          oprot.writeFieldBegin(ITEMS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.items.size()));
            for (PrescriptionItem _iter3 : struct.items)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetValid()) {
        oprot.writeFieldBegin(VALID_FIELD_DESC);
        oprot.writeI32(struct.valid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PrescriptionTupleSchemeFactory implements SchemeFactory {
    public PrescriptionTupleScheme getScheme() {
      return new PrescriptionTupleScheme();
    }
  }

  private static class PrescriptionTupleScheme extends TupleScheme<Prescription> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Prescription struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetMedicalRecordNo()) {
        optionals.set(1);
      }
      if (struct.isSetType()) {
        optionals.set(2);
      }
      if (struct.isSetCategoty()) {
        optionals.set(3);
      }
      if (struct.isSetPrice()) {
        optionals.set(4);
      }
      if (struct.isSetRemark()) {
        optionals.set(5);
      }
      if (struct.isSetDoctorId()) {
        optionals.set(6);
      }
      if (struct.isSetItems()) {
        optionals.set(7);
      }
      if (struct.isSetValid()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetMedicalRecordNo()) {
        oprot.writeI64(struct.medicalRecordNo);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetCategoty()) {
        oprot.writeI32(struct.categoty.getValue());
      }
      if (struct.isSetPrice()) {
        oprot.writeDouble(struct.price);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetDoctorId()) {
        oprot.writeI64(struct.doctorId);
      }
      if (struct.isSetItems()) {
        {
          oprot.writeI32(struct.items.size());
          for (PrescriptionItem _iter4 : struct.items)
          {
            _iter4.write(oprot);
          }
        }
      }
      if (struct.isSetValid()) {
        oprot.writeI32(struct.valid);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Prescription struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.medicalRecordNo = iprot.readI64();
        struct.setMedicalRecordNoIsSet(true);
      }
      if (incoming.get(2)) {
        struct.type = top.itcat.rpc.service.model.PrescriptionType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.categoty = top.itcat.rpc.service.model.PrescriptionCategoty.findByValue(iprot.readI32());
        struct.setCategotyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.price = iprot.readDouble();
        struct.setPriceIsSet(true);
      }
      if (incoming.get(5)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(6)) {
        struct.doctorId = iprot.readI64();
        struct.setDoctorIdIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.items = new ArrayList<PrescriptionItem>(_list5.size);
          PrescriptionItem _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new PrescriptionItem();
            _elem6.read(iprot);
            struct.items.add(_elem6);
          }
        }
        struct.setItemsIsSet(true);
      }
      if (incoming.get(8)) {
        struct.valid = iprot.readI32();
        struct.setValidIsSet(true);
      }
    }
  }

}

