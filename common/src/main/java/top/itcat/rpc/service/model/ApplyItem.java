/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package top.itcat.rpc.service.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2019-7-3")
public class ApplyItem implements org.apache.thrift.TBase<ApplyItem, ApplyItem._Fields>, java.io.Serializable, Cloneable, Comparable<ApplyItem> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ApplyItem");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField APPLY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applyId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField CHARGE_ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("chargeItemId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField MEDICAL_DOCTOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("medicalDoctorId", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField NOTE_FIELD_DESC = new org.apache.thrift.protocol.TField("note", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("result", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField CHARGE_ITEM_FIELD_DESC = new org.apache.thrift.protocol.TField("chargeItem", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField NONMEDICAL_CHARGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nonmedicalChargeId", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField RESULT_ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("resultItems", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField OPERATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("operateTime", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField VALID_FIELD_DESC = new org.apache.thrift.protocol.TField("valid", org.apache.thrift.protocol.TType.I32, (short)255);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ApplyItemStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ApplyItemTupleSchemeFactory());
  }

  public long id; // optional
  public long applyId; // optional
  public long chargeItemId; // optional
  public long medicalDoctorId; // optional
  public String note; // optional
  public String result; // optional
  /**
   * 
   * @see ApplyItemStatus
   */
  public ApplyItemStatus status; // optional
  public top.itcat.rpc.service.model.ChargeItem chargeItem; // optional
  public long nonmedicalChargeId; // optional
  public List<ResultItem> resultItems; // optional
  public long operateTime; // optional
  public int valid; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    APPLY_ID((short)2, "applyId"),
    CHARGE_ITEM_ID((short)3, "chargeItemId"),
    MEDICAL_DOCTOR_ID((short)4, "medicalDoctorId"),
    NOTE((short)5, "note"),
    RESULT((short)6, "result"),
    /**
     * 
     * @see ApplyItemStatus
     */
    STATUS((short)7, "status"),
    CHARGE_ITEM((short)8, "chargeItem"),
    NONMEDICAL_CHARGE_ID((short)9, "nonmedicalChargeId"),
    RESULT_ITEMS((short)10, "resultItems"),
    OPERATE_TIME((short)11, "operateTime"),
    VALID((short)255, "valid");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // APPLY_ID
          return APPLY_ID;
        case 3: // CHARGE_ITEM_ID
          return CHARGE_ITEM_ID;
        case 4: // MEDICAL_DOCTOR_ID
          return MEDICAL_DOCTOR_ID;
        case 5: // NOTE
          return NOTE;
        case 6: // RESULT
          return RESULT;
        case 7: // STATUS
          return STATUS;
        case 8: // CHARGE_ITEM
          return CHARGE_ITEM;
        case 9: // NONMEDICAL_CHARGE_ID
          return NONMEDICAL_CHARGE_ID;
        case 10: // RESULT_ITEMS
          return RESULT_ITEMS;
        case 11: // OPERATE_TIME
          return OPERATE_TIME;
        case 255: // VALID
          return VALID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __APPLYID_ISSET_ID = 1;
  private static final int __CHARGEITEMID_ISSET_ID = 2;
  private static final int __MEDICALDOCTORID_ISSET_ID = 3;
  private static final int __NONMEDICALCHARGEID_ISSET_ID = 4;
  private static final int __OPERATETIME_ISSET_ID = 5;
  private static final int __VALID_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.APPLY_ID,_Fields.CHARGE_ITEM_ID,_Fields.MEDICAL_DOCTOR_ID,_Fields.NOTE,_Fields.RESULT,_Fields.STATUS,_Fields.CHARGE_ITEM,_Fields.NONMEDICAL_CHARGE_ID,_Fields.RESULT_ITEMS,_Fields.OPERATE_TIME,_Fields.VALID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.APPLY_ID, new org.apache.thrift.meta_data.FieldMetaData("applyId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CHARGE_ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("chargeItemId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MEDICAL_DOCTOR_ID, new org.apache.thrift.meta_data.FieldMetaData("medicalDoctorId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NOTE, new org.apache.thrift.meta_data.FieldMetaData("note", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESULT, new org.apache.thrift.meta_data.FieldMetaData("result", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ApplyItemStatus.class)));
    tmpMap.put(_Fields.CHARGE_ITEM, new org.apache.thrift.meta_data.FieldMetaData("chargeItem", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, top.itcat.rpc.service.model.ChargeItem.class)));
    tmpMap.put(_Fields.NONMEDICAL_CHARGE_ID, new org.apache.thrift.meta_data.FieldMetaData("nonmedicalChargeId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RESULT_ITEMS, new org.apache.thrift.meta_data.FieldMetaData("resultItems", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResultItem.class))));
    tmpMap.put(_Fields.OPERATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("operateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VALID, new org.apache.thrift.meta_data.FieldMetaData("valid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ApplyItem.class, metaDataMap);
  }

  public ApplyItem() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ApplyItem(ApplyItem other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.applyId = other.applyId;
    this.chargeItemId = other.chargeItemId;
    this.medicalDoctorId = other.medicalDoctorId;
    if (other.isSetNote()) {
      this.note = other.note;
    }
    if (other.isSetResult()) {
      this.result = other.result;
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetChargeItem()) {
      this.chargeItem = new top.itcat.rpc.service.model.ChargeItem(other.chargeItem);
    }
    this.nonmedicalChargeId = other.nonmedicalChargeId;
    if (other.isSetResultItems()) {
      List<ResultItem> __this__resultItems = new ArrayList<ResultItem>(other.resultItems.size());
      for (ResultItem other_element : other.resultItems) {
        __this__resultItems.add(new ResultItem(other_element));
      }
      this.resultItems = __this__resultItems;
    }
    this.operateTime = other.operateTime;
    this.valid = other.valid;
  }

  public ApplyItem deepCopy() {
    return new ApplyItem(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setApplyIdIsSet(false);
    this.applyId = 0;
    setChargeItemIdIsSet(false);
    this.chargeItemId = 0;
    setMedicalDoctorIdIsSet(false);
    this.medicalDoctorId = 0;
    this.note = null;
    this.result = null;
    this.status = null;
    this.chargeItem = null;
    setNonmedicalChargeIdIsSet(false);
    this.nonmedicalChargeId = 0;
    this.resultItems = null;
    setOperateTimeIsSet(false);
    this.operateTime = 0;
    setValidIsSet(false);
    this.valid = 0;
  }

  public long getId() {
    return this.id;
  }

  public ApplyItem setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public long getApplyId() {
    return this.applyId;
  }

  public ApplyItem setApplyId(long applyId) {
    this.applyId = applyId;
    setApplyIdIsSet(true);
    return this;
  }

  public void unsetApplyId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPLYID_ISSET_ID);
  }

  /** Returns true if field applyId is set (has been assigned a value) and false otherwise */
  public boolean isSetApplyId() {
    return EncodingUtils.testBit(__isset_bitfield, __APPLYID_ISSET_ID);
  }

  public void setApplyIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPLYID_ISSET_ID, value);
  }

  public long getChargeItemId() {
    return this.chargeItemId;
  }

  public ApplyItem setChargeItemId(long chargeItemId) {
    this.chargeItemId = chargeItemId;
    setChargeItemIdIsSet(true);
    return this;
  }

  public void unsetChargeItemId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHARGEITEMID_ISSET_ID);
  }

  /** Returns true if field chargeItemId is set (has been assigned a value) and false otherwise */
  public boolean isSetChargeItemId() {
    return EncodingUtils.testBit(__isset_bitfield, __CHARGEITEMID_ISSET_ID);
  }

  public void setChargeItemIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHARGEITEMID_ISSET_ID, value);
  }

  public long getMedicalDoctorId() {
    return this.medicalDoctorId;
  }

  public ApplyItem setMedicalDoctorId(long medicalDoctorId) {
    this.medicalDoctorId = medicalDoctorId;
    setMedicalDoctorIdIsSet(true);
    return this;
  }

  public void unsetMedicalDoctorId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEDICALDOCTORID_ISSET_ID);
  }

  /** Returns true if field medicalDoctorId is set (has been assigned a value) and false otherwise */
  public boolean isSetMedicalDoctorId() {
    return EncodingUtils.testBit(__isset_bitfield, __MEDICALDOCTORID_ISSET_ID);
  }

  public void setMedicalDoctorIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEDICALDOCTORID_ISSET_ID, value);
  }

  public String getNote() {
    return this.note;
  }

  public ApplyItem setNote(String note) {
    this.note = note;
    return this;
  }

  public void unsetNote() {
    this.note = null;
  }

  /** Returns true if field note is set (has been assigned a value) and false otherwise */
  public boolean isSetNote() {
    return this.note != null;
  }

  public void setNoteIsSet(boolean value) {
    if (!value) {
      this.note = null;
    }
  }

  public String getResult() {
    return this.result;
  }

  public ApplyItem setResult(String result) {
    this.result = result;
    return this;
  }

  public void unsetResult() {
    this.result = null;
  }

  /** Returns true if field result is set (has been assigned a value) and false otherwise */
  public boolean isSetResult() {
    return this.result != null;
  }

  public void setResultIsSet(boolean value) {
    if (!value) {
      this.result = null;
    }
  }

  /**
   * 
   * @see ApplyItemStatus
   */
  public ApplyItemStatus getStatus() {
    return this.status;
  }

  /**
   * 
   * @see ApplyItemStatus
   */
  public ApplyItem setStatus(ApplyItemStatus status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public top.itcat.rpc.service.model.ChargeItem getChargeItem() {
    return this.chargeItem;
  }

  public ApplyItem setChargeItem(top.itcat.rpc.service.model.ChargeItem chargeItem) {
    this.chargeItem = chargeItem;
    return this;
  }

  public void unsetChargeItem() {
    this.chargeItem = null;
  }

  /** Returns true if field chargeItem is set (has been assigned a value) and false otherwise */
  public boolean isSetChargeItem() {
    return this.chargeItem != null;
  }

  public void setChargeItemIsSet(boolean value) {
    if (!value) {
      this.chargeItem = null;
    }
  }

  public long getNonmedicalChargeId() {
    return this.nonmedicalChargeId;
  }

  public ApplyItem setNonmedicalChargeId(long nonmedicalChargeId) {
    this.nonmedicalChargeId = nonmedicalChargeId;
    setNonmedicalChargeIdIsSet(true);
    return this;
  }

  public void unsetNonmedicalChargeId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NONMEDICALCHARGEID_ISSET_ID);
  }

  /** Returns true if field nonmedicalChargeId is set (has been assigned a value) and false otherwise */
  public boolean isSetNonmedicalChargeId() {
    return EncodingUtils.testBit(__isset_bitfield, __NONMEDICALCHARGEID_ISSET_ID);
  }

  public void setNonmedicalChargeIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NONMEDICALCHARGEID_ISSET_ID, value);
  }

  public int getResultItemsSize() {
    return (this.resultItems == null) ? 0 : this.resultItems.size();
  }

  public java.util.Iterator<ResultItem> getResultItemsIterator() {
    return (this.resultItems == null) ? null : this.resultItems.iterator();
  }

  public void addToResultItems(ResultItem elem) {
    if (this.resultItems == null) {
      this.resultItems = new ArrayList<ResultItem>();
    }
    this.resultItems.add(elem);
  }

  public List<ResultItem> getResultItems() {
    return this.resultItems;
  }

  public ApplyItem setResultItems(List<ResultItem> resultItems) {
    this.resultItems = resultItems;
    return this;
  }

  public void unsetResultItems() {
    this.resultItems = null;
  }

  /** Returns true if field resultItems is set (has been assigned a value) and false otherwise */
  public boolean isSetResultItems() {
    return this.resultItems != null;
  }

  public void setResultItemsIsSet(boolean value) {
    if (!value) {
      this.resultItems = null;
    }
  }

  public long getOperateTime() {
    return this.operateTime;
  }

  public ApplyItem setOperateTime(long operateTime) {
    this.operateTime = operateTime;
    setOperateTimeIsSet(true);
    return this;
  }

  public void unsetOperateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPERATETIME_ISSET_ID);
  }

  /** Returns true if field operateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetOperateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __OPERATETIME_ISSET_ID);
  }

  public void setOperateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPERATETIME_ISSET_ID, value);
  }

  public int getValid() {
    return this.valid;
  }

  public ApplyItem setValid(int valid) {
    this.valid = valid;
    setValidIsSet(true);
    return this;
  }

  public void unsetValid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VALID_ISSET_ID);
  }

  /** Returns true if field valid is set (has been assigned a value) and false otherwise */
  public boolean isSetValid() {
    return EncodingUtils.testBit(__isset_bitfield, __VALID_ISSET_ID);
  }

  public void setValidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VALID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case APPLY_ID:
      if (value == null) {
        unsetApplyId();
      } else {
        setApplyId((Long)value);
      }
      break;

    case CHARGE_ITEM_ID:
      if (value == null) {
        unsetChargeItemId();
      } else {
        setChargeItemId((Long)value);
      }
      break;

    case MEDICAL_DOCTOR_ID:
      if (value == null) {
        unsetMedicalDoctorId();
      } else {
        setMedicalDoctorId((Long)value);
      }
      break;

    case NOTE:
      if (value == null) {
        unsetNote();
      } else {
        setNote((String)value);
      }
      break;

    case RESULT:
      if (value == null) {
        unsetResult();
      } else {
        setResult((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((ApplyItemStatus)value);
      }
      break;

    case CHARGE_ITEM:
      if (value == null) {
        unsetChargeItem();
      } else {
        setChargeItem((top.itcat.rpc.service.model.ChargeItem)value);
      }
      break;

    case NONMEDICAL_CHARGE_ID:
      if (value == null) {
        unsetNonmedicalChargeId();
      } else {
        setNonmedicalChargeId((Long)value);
      }
      break;

    case RESULT_ITEMS:
      if (value == null) {
        unsetResultItems();
      } else {
        setResultItems((List<ResultItem>)value);
      }
      break;

    case OPERATE_TIME:
      if (value == null) {
        unsetOperateTime();
      } else {
        setOperateTime((Long)value);
      }
      break;

    case VALID:
      if (value == null) {
        unsetValid();
      } else {
        setValid((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case APPLY_ID:
      return Long.valueOf(getApplyId());

    case CHARGE_ITEM_ID:
      return Long.valueOf(getChargeItemId());

    case MEDICAL_DOCTOR_ID:
      return Long.valueOf(getMedicalDoctorId());

    case NOTE:
      return getNote();

    case RESULT:
      return getResult();

    case STATUS:
      return getStatus();

    case CHARGE_ITEM:
      return getChargeItem();

    case NONMEDICAL_CHARGE_ID:
      return Long.valueOf(getNonmedicalChargeId());

    case RESULT_ITEMS:
      return getResultItems();

    case OPERATE_TIME:
      return Long.valueOf(getOperateTime());

    case VALID:
      return Integer.valueOf(getValid());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case APPLY_ID:
      return isSetApplyId();
    case CHARGE_ITEM_ID:
      return isSetChargeItemId();
    case MEDICAL_DOCTOR_ID:
      return isSetMedicalDoctorId();
    case NOTE:
      return isSetNote();
    case RESULT:
      return isSetResult();
    case STATUS:
      return isSetStatus();
    case CHARGE_ITEM:
      return isSetChargeItem();
    case NONMEDICAL_CHARGE_ID:
      return isSetNonmedicalChargeId();
    case RESULT_ITEMS:
      return isSetResultItems();
    case OPERATE_TIME:
      return isSetOperateTime();
    case VALID:
      return isSetValid();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ApplyItem)
      return this.equals((ApplyItem)that);
    return false;
  }

  public boolean equals(ApplyItem that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_applyId = true && this.isSetApplyId();
    boolean that_present_applyId = true && that.isSetApplyId();
    if (this_present_applyId || that_present_applyId) {
      if (!(this_present_applyId && that_present_applyId))
        return false;
      if (this.applyId != that.applyId)
        return false;
    }

    boolean this_present_chargeItemId = true && this.isSetChargeItemId();
    boolean that_present_chargeItemId = true && that.isSetChargeItemId();
    if (this_present_chargeItemId || that_present_chargeItemId) {
      if (!(this_present_chargeItemId && that_present_chargeItemId))
        return false;
      if (this.chargeItemId != that.chargeItemId)
        return false;
    }

    boolean this_present_medicalDoctorId = true && this.isSetMedicalDoctorId();
    boolean that_present_medicalDoctorId = true && that.isSetMedicalDoctorId();
    if (this_present_medicalDoctorId || that_present_medicalDoctorId) {
      if (!(this_present_medicalDoctorId && that_present_medicalDoctorId))
        return false;
      if (this.medicalDoctorId != that.medicalDoctorId)
        return false;
    }

    boolean this_present_note = true && this.isSetNote();
    boolean that_present_note = true && that.isSetNote();
    if (this_present_note || that_present_note) {
      if (!(this_present_note && that_present_note))
        return false;
      if (!this.note.equals(that.note))
        return false;
    }

    boolean this_present_result = true && this.isSetResult();
    boolean that_present_result = true && that.isSetResult();
    if (this_present_result || that_present_result) {
      if (!(this_present_result && that_present_result))
        return false;
      if (!this.result.equals(that.result))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_chargeItem = true && this.isSetChargeItem();
    boolean that_present_chargeItem = true && that.isSetChargeItem();
    if (this_present_chargeItem || that_present_chargeItem) {
      if (!(this_present_chargeItem && that_present_chargeItem))
        return false;
      if (!this.chargeItem.equals(that.chargeItem))
        return false;
    }

    boolean this_present_nonmedicalChargeId = true && this.isSetNonmedicalChargeId();
    boolean that_present_nonmedicalChargeId = true && that.isSetNonmedicalChargeId();
    if (this_present_nonmedicalChargeId || that_present_nonmedicalChargeId) {
      if (!(this_present_nonmedicalChargeId && that_present_nonmedicalChargeId))
        return false;
      if (this.nonmedicalChargeId != that.nonmedicalChargeId)
        return false;
    }

    boolean this_present_resultItems = true && this.isSetResultItems();
    boolean that_present_resultItems = true && that.isSetResultItems();
    if (this_present_resultItems || that_present_resultItems) {
      if (!(this_present_resultItems && that_present_resultItems))
        return false;
      if (!this.resultItems.equals(that.resultItems))
        return false;
    }

    boolean this_present_operateTime = true && this.isSetOperateTime();
    boolean that_present_operateTime = true && that.isSetOperateTime();
    if (this_present_operateTime || that_present_operateTime) {
      if (!(this_present_operateTime && that_present_operateTime))
        return false;
      if (this.operateTime != that.operateTime)
        return false;
    }

    boolean this_present_valid = true && this.isSetValid();
    boolean that_present_valid = true && that.isSetValid();
    if (this_present_valid || that_present_valid) {
      if (!(this_present_valid && that_present_valid))
        return false;
      if (this.valid != that.valid)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_applyId = true && (isSetApplyId());
    list.add(present_applyId);
    if (present_applyId)
      list.add(applyId);

    boolean present_chargeItemId = true && (isSetChargeItemId());
    list.add(present_chargeItemId);
    if (present_chargeItemId)
      list.add(chargeItemId);

    boolean present_medicalDoctorId = true && (isSetMedicalDoctorId());
    list.add(present_medicalDoctorId);
    if (present_medicalDoctorId)
      list.add(medicalDoctorId);

    boolean present_note = true && (isSetNote());
    list.add(present_note);
    if (present_note)
      list.add(note);

    boolean present_result = true && (isSetResult());
    list.add(present_result);
    if (present_result)
      list.add(result);

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status.getValue());

    boolean present_chargeItem = true && (isSetChargeItem());
    list.add(present_chargeItem);
    if (present_chargeItem)
      list.add(chargeItem);

    boolean present_nonmedicalChargeId = true && (isSetNonmedicalChargeId());
    list.add(present_nonmedicalChargeId);
    if (present_nonmedicalChargeId)
      list.add(nonmedicalChargeId);

    boolean present_resultItems = true && (isSetResultItems());
    list.add(present_resultItems);
    if (present_resultItems)
      list.add(resultItems);

    boolean present_operateTime = true && (isSetOperateTime());
    list.add(present_operateTime);
    if (present_operateTime)
      list.add(operateTime);

    boolean present_valid = true && (isSetValid());
    list.add(present_valid);
    if (present_valid)
      list.add(valid);

    return list.hashCode();
  }

  @Override
  public int compareTo(ApplyItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplyId()).compareTo(other.isSetApplyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyId, other.applyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChargeItemId()).compareTo(other.isSetChargeItemId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChargeItemId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chargeItemId, other.chargeItemId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMedicalDoctorId()).compareTo(other.isSetMedicalDoctorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMedicalDoctorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.medicalDoctorId, other.medicalDoctorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNote()).compareTo(other.isSetNote());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNote()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.note, other.note);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResult()).compareTo(other.isSetResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.result, other.result);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChargeItem()).compareTo(other.isSetChargeItem());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChargeItem()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chargeItem, other.chargeItem);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNonmedicalChargeId()).compareTo(other.isSetNonmedicalChargeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNonmedicalChargeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nonmedicalChargeId, other.nonmedicalChargeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResultItems()).compareTo(other.isSetResultItems());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultItems()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultItems, other.resultItems);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperateTime()).compareTo(other.isSetOperateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operateTime, other.operateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValid()).compareTo(other.isSetValid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.valid, other.valid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ApplyItem(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetApplyId()) {
      if (!first) sb.append(", ");
      sb.append("applyId:");
      sb.append(this.applyId);
      first = false;
    }
    if (isSetChargeItemId()) {
      if (!first) sb.append(", ");
      sb.append("chargeItemId:");
      sb.append(this.chargeItemId);
      first = false;
    }
    if (isSetMedicalDoctorId()) {
      if (!first) sb.append(", ");
      sb.append("medicalDoctorId:");
      sb.append(this.medicalDoctorId);
      first = false;
    }
    if (isSetNote()) {
      if (!first) sb.append(", ");
      sb.append("note:");
      if (this.note == null) {
        sb.append("null");
      } else {
        sb.append(this.note);
      }
      first = false;
    }
    if (isSetResult()) {
      if (!first) sb.append(", ");
      sb.append("result:");
      if (this.result == null) {
        sb.append("null");
      } else {
        sb.append(this.result);
      }
      first = false;
    }
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
    }
    if (isSetChargeItem()) {
      if (!first) sb.append(", ");
      sb.append("chargeItem:");
      if (this.chargeItem == null) {
        sb.append("null");
      } else {
        sb.append(this.chargeItem);
      }
      first = false;
    }
    if (isSetNonmedicalChargeId()) {
      if (!first) sb.append(", ");
      sb.append("nonmedicalChargeId:");
      sb.append(this.nonmedicalChargeId);
      first = false;
    }
    if (isSetResultItems()) {
      if (!first) sb.append(", ");
      sb.append("resultItems:");
      if (this.resultItems == null) {
        sb.append("null");
      } else {
        sb.append(this.resultItems);
      }
      first = false;
    }
    if (isSetOperateTime()) {
      if (!first) sb.append(", ");
      sb.append("operateTime:");
      sb.append(this.operateTime);
      first = false;
    }
    if (isSetValid()) {
      if (!first) sb.append(", ");
      sb.append("valid:");
      sb.append(this.valid);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (chargeItem != null) {
      chargeItem.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ApplyItemStandardSchemeFactory implements SchemeFactory {
    public ApplyItemStandardScheme getScheme() {
      return new ApplyItemStandardScheme();
    }
  }

  private static class ApplyItemStandardScheme extends StandardScheme<ApplyItem> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ApplyItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // APPLY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.applyId = iprot.readI64();
              struct.setApplyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CHARGE_ITEM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.chargeItemId = iprot.readI64();
              struct.setChargeItemIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MEDICAL_DOCTOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.medicalDoctorId = iprot.readI64();
              struct.setMedicalDoctorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NOTE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.note = iprot.readString();
              struct.setNoteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.result = iprot.readString();
              struct.setResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = top.itcat.rpc.service.model.ApplyItemStatus.findByValue(iprot.readI32());
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CHARGE_ITEM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.chargeItem = new top.itcat.rpc.service.model.ChargeItem();
              struct.chargeItem.read(iprot);
              struct.setChargeItemIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // NONMEDICAL_CHARGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.nonmedicalChargeId = iprot.readI64();
              struct.setNonmedicalChargeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // RESULT_ITEMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.resultItems = new ArrayList<ResultItem>(_list8.size);
                ResultItem _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new ResultItem();
                  _elem9.read(iprot);
                  struct.resultItems.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setResultItemsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // OPERATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.operateTime = iprot.readI64();
              struct.setOperateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 255: // VALID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.valid = iprot.readI32();
              struct.setValidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ApplyItem struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetApplyId()) {
        oprot.writeFieldBegin(APPLY_ID_FIELD_DESC);
        oprot.writeI64(struct.applyId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetChargeItemId()) {
        oprot.writeFieldBegin(CHARGE_ITEM_ID_FIELD_DESC);
        oprot.writeI64(struct.chargeItemId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMedicalDoctorId()) {
        oprot.writeFieldBegin(MEDICAL_DOCTOR_ID_FIELD_DESC);
        oprot.writeI64(struct.medicalDoctorId);
        oprot.writeFieldEnd();
      }
      if (struct.note != null) {
        if (struct.isSetNote()) {
          oprot.writeFieldBegin(NOTE_FIELD_DESC);
          oprot.writeString(struct.note);
          oprot.writeFieldEnd();
        }
      }
      if (struct.result != null) {
        if (struct.isSetResult()) {
          oprot.writeFieldBegin(RESULT_FIELD_DESC);
          oprot.writeString(struct.result);
          oprot.writeFieldEnd();
        }
      }
      if (struct.status != null) {
        if (struct.isSetStatus()) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          oprot.writeI32(struct.status.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.chargeItem != null) {
        if (struct.isSetChargeItem()) {
          oprot.writeFieldBegin(CHARGE_ITEM_FIELD_DESC);
          struct.chargeItem.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetNonmedicalChargeId()) {
        oprot.writeFieldBegin(NONMEDICAL_CHARGE_ID_FIELD_DESC);
        oprot.writeI64(struct.nonmedicalChargeId);
        oprot.writeFieldEnd();
      }
      if (struct.resultItems != null) {
        if (struct.isSetResultItems()) {
          oprot.writeFieldBegin(RESULT_ITEMS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.resultItems.size()));
            for (ResultItem _iter11 : struct.resultItems)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOperateTime()) {
        oprot.writeFieldBegin(OPERATE_TIME_FIELD_DESC);
        oprot.writeI64(struct.operateTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetValid()) {
        oprot.writeFieldBegin(VALID_FIELD_DESC);
        oprot.writeI32(struct.valid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ApplyItemTupleSchemeFactory implements SchemeFactory {
    public ApplyItemTupleScheme getScheme() {
      return new ApplyItemTupleScheme();
    }
  }

  private static class ApplyItemTupleScheme extends TupleScheme<ApplyItem> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ApplyItem struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetApplyId()) {
        optionals.set(1);
      }
      if (struct.isSetChargeItemId()) {
        optionals.set(2);
      }
      if (struct.isSetMedicalDoctorId()) {
        optionals.set(3);
      }
      if (struct.isSetNote()) {
        optionals.set(4);
      }
      if (struct.isSetResult()) {
        optionals.set(5);
      }
      if (struct.isSetStatus()) {
        optionals.set(6);
      }
      if (struct.isSetChargeItem()) {
        optionals.set(7);
      }
      if (struct.isSetNonmedicalChargeId()) {
        optionals.set(8);
      }
      if (struct.isSetResultItems()) {
        optionals.set(9);
      }
      if (struct.isSetOperateTime()) {
        optionals.set(10);
      }
      if (struct.isSetValid()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetApplyId()) {
        oprot.writeI64(struct.applyId);
      }
      if (struct.isSetChargeItemId()) {
        oprot.writeI64(struct.chargeItemId);
      }
      if (struct.isSetMedicalDoctorId()) {
        oprot.writeI64(struct.medicalDoctorId);
      }
      if (struct.isSetNote()) {
        oprot.writeString(struct.note);
      }
      if (struct.isSetResult()) {
        oprot.writeString(struct.result);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status.getValue());
      }
      if (struct.isSetChargeItem()) {
        struct.chargeItem.write(oprot);
      }
      if (struct.isSetNonmedicalChargeId()) {
        oprot.writeI64(struct.nonmedicalChargeId);
      }
      if (struct.isSetResultItems()) {
        {
          oprot.writeI32(struct.resultItems.size());
          for (ResultItem _iter12 : struct.resultItems)
          {
            _iter12.write(oprot);
          }
        }
      }
      if (struct.isSetOperateTime()) {
        oprot.writeI64(struct.operateTime);
      }
      if (struct.isSetValid()) {
        oprot.writeI32(struct.valid);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ApplyItem struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.applyId = iprot.readI64();
        struct.setApplyIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.chargeItemId = iprot.readI64();
        struct.setChargeItemIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.medicalDoctorId = iprot.readI64();
        struct.setMedicalDoctorIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.note = iprot.readString();
        struct.setNoteIsSet(true);
      }
      if (incoming.get(5)) {
        struct.result = iprot.readString();
        struct.setResultIsSet(true);
      }
      if (incoming.get(6)) {
        struct.status = top.itcat.rpc.service.model.ApplyItemStatus.findByValue(iprot.readI32());
        struct.setStatusIsSet(true);
      }
      if (incoming.get(7)) {
        struct.chargeItem = new top.itcat.rpc.service.model.ChargeItem();
        struct.chargeItem.read(iprot);
        struct.setChargeItemIsSet(true);
      }
      if (incoming.get(8)) {
        struct.nonmedicalChargeId = iprot.readI64();
        struct.setNonmedicalChargeIdIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.resultItems = new ArrayList<ResultItem>(_list13.size);
          ResultItem _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = new ResultItem();
            _elem14.read(iprot);
            struct.resultItems.add(_elem14);
          }
        }
        struct.setResultItemsIsSet(true);
      }
      if (incoming.get(10)) {
        struct.operateTime = iprot.readI64();
        struct.setOperateTimeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.valid = iprot.readI32();
        struct.setValidIsSet(true);
      }
    }
  }

}

