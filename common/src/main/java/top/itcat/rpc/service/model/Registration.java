/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package top.itcat.rpc.service.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2019-7-3")
public class Registration implements org.apache.thrift.TBase<Registration, Registration._Fields>, java.io.Serializable, Cloneable, Comparable<Registration> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Registration");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField MEDICAL_RECORD_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("medicalRecordNo", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField IDENTITY_CARD_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("identityCardNo", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SCHEDULE_PLAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schedulePlanId", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField REGISTRATION_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("registrationSource", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField REGISTRATION_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("registrationTime", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField SEE_DOCTOR_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("seeDoctorTime", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField BILLING_CATEGORY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("billingCategoryId", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField SEQUENCE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("sequenceNumber", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField EXPENSE_FIELD_DESC = new org.apache.thrift.protocol.TField("expense", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField VALID_FIELD_DESC = new org.apache.thrift.protocol.TField("valid", org.apache.thrift.protocol.TType.I32, (short)255);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RegistrationStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RegistrationTupleSchemeFactory());
  }

  public long id; // optional
  public long medicalRecordNo; // optional
  public String identityCardNo; // optional
  public long schedulePlanId; // optional
  /**
   * 
   * @see RegistrationSourceEnum
   */
  public RegistrationSourceEnum registrationSource; // optional
  /**
   * 
   * @see RegistrationStatusEnum
   */
  public RegistrationStatusEnum status; // optional
  public long registrationTime; // optional
  public long seeDoctorTime; // optional
  public long billingCategoryId; // optional
  public int sequenceNumber; // optional
  public double expense; // optional
  public int valid; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    MEDICAL_RECORD_NO((short)2, "medicalRecordNo"),
    IDENTITY_CARD_NO((short)3, "identityCardNo"),
    SCHEDULE_PLAN_ID((short)4, "schedulePlanId"),
    /**
     * 
     * @see RegistrationSourceEnum
     */
    REGISTRATION_SOURCE((short)5, "registrationSource"),
    /**
     * 
     * @see RegistrationStatusEnum
     */
    STATUS((short)6, "status"),
    REGISTRATION_TIME((short)7, "registrationTime"),
    SEE_DOCTOR_TIME((short)8, "seeDoctorTime"),
    BILLING_CATEGORY_ID((short)9, "billingCategoryId"),
    SEQUENCE_NUMBER((short)10, "sequenceNumber"),
    EXPENSE((short)12, "expense"),
    VALID((short)255, "valid");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // MEDICAL_RECORD_NO
          return MEDICAL_RECORD_NO;
        case 3: // IDENTITY_CARD_NO
          return IDENTITY_CARD_NO;
        case 4: // SCHEDULE_PLAN_ID
          return SCHEDULE_PLAN_ID;
        case 5: // REGISTRATION_SOURCE
          return REGISTRATION_SOURCE;
        case 6: // STATUS
          return STATUS;
        case 7: // REGISTRATION_TIME
          return REGISTRATION_TIME;
        case 8: // SEE_DOCTOR_TIME
          return SEE_DOCTOR_TIME;
        case 9: // BILLING_CATEGORY_ID
          return BILLING_CATEGORY_ID;
        case 10: // SEQUENCE_NUMBER
          return SEQUENCE_NUMBER;
        case 12: // EXPENSE
          return EXPENSE;
        case 255: // VALID
          return VALID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __MEDICALRECORDNO_ISSET_ID = 1;
  private static final int __SCHEDULEPLANID_ISSET_ID = 2;
  private static final int __REGISTRATIONTIME_ISSET_ID = 3;
  private static final int __SEEDOCTORTIME_ISSET_ID = 4;
  private static final int __BILLINGCATEGORYID_ISSET_ID = 5;
  private static final int __SEQUENCENUMBER_ISSET_ID = 6;
  private static final int __EXPENSE_ISSET_ID = 7;
  private static final int __VALID_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.MEDICAL_RECORD_NO,_Fields.IDENTITY_CARD_NO,_Fields.SCHEDULE_PLAN_ID,_Fields.REGISTRATION_SOURCE,_Fields.STATUS,_Fields.REGISTRATION_TIME,_Fields.SEE_DOCTOR_TIME,_Fields.BILLING_CATEGORY_ID,_Fields.SEQUENCE_NUMBER,_Fields.EXPENSE,_Fields.VALID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MEDICAL_RECORD_NO, new org.apache.thrift.meta_data.FieldMetaData("medicalRecordNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IDENTITY_CARD_NO, new org.apache.thrift.meta_data.FieldMetaData("identityCardNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SCHEDULE_PLAN_ID, new org.apache.thrift.meta_data.FieldMetaData("schedulePlanId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REGISTRATION_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("registrationSource", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, RegistrationSourceEnum.class)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, RegistrationStatusEnum.class)));
    tmpMap.put(_Fields.REGISTRATION_TIME, new org.apache.thrift.meta_data.FieldMetaData("registrationTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SEE_DOCTOR_TIME, new org.apache.thrift.meta_data.FieldMetaData("seeDoctorTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BILLING_CATEGORY_ID, new org.apache.thrift.meta_data.FieldMetaData("billingCategoryId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SEQUENCE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("sequenceNumber", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXPENSE, new org.apache.thrift.meta_data.FieldMetaData("expense", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.VALID, new org.apache.thrift.meta_data.FieldMetaData("valid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Registration.class, metaDataMap);
  }

  public Registration() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Registration(Registration other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.medicalRecordNo = other.medicalRecordNo;
    if (other.isSetIdentityCardNo()) {
      this.identityCardNo = other.identityCardNo;
    }
    this.schedulePlanId = other.schedulePlanId;
    if (other.isSetRegistrationSource()) {
      this.registrationSource = other.registrationSource;
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    this.registrationTime = other.registrationTime;
    this.seeDoctorTime = other.seeDoctorTime;
    this.billingCategoryId = other.billingCategoryId;
    this.sequenceNumber = other.sequenceNumber;
    this.expense = other.expense;
    this.valid = other.valid;
  }

  public Registration deepCopy() {
    return new Registration(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setMedicalRecordNoIsSet(false);
    this.medicalRecordNo = 0;
    this.identityCardNo = null;
    setSchedulePlanIdIsSet(false);
    this.schedulePlanId = 0;
    this.registrationSource = null;
    this.status = null;
    setRegistrationTimeIsSet(false);
    this.registrationTime = 0;
    setSeeDoctorTimeIsSet(false);
    this.seeDoctorTime = 0;
    setBillingCategoryIdIsSet(false);
    this.billingCategoryId = 0;
    setSequenceNumberIsSet(false);
    this.sequenceNumber = 0;
    setExpenseIsSet(false);
    this.expense = 0.0;
    setValidIsSet(false);
    this.valid = 0;
  }

  public long getId() {
    return this.id;
  }

  public Registration setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public long getMedicalRecordNo() {
    return this.medicalRecordNo;
  }

  public Registration setMedicalRecordNo(long medicalRecordNo) {
    this.medicalRecordNo = medicalRecordNo;
    setMedicalRecordNoIsSet(true);
    return this;
  }

  public void unsetMedicalRecordNo() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEDICALRECORDNO_ISSET_ID);
  }

  /** Returns true if field medicalRecordNo is set (has been assigned a value) and false otherwise */
  public boolean isSetMedicalRecordNo() {
    return EncodingUtils.testBit(__isset_bitfield, __MEDICALRECORDNO_ISSET_ID);
  }

  public void setMedicalRecordNoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEDICALRECORDNO_ISSET_ID, value);
  }

  public String getIdentityCardNo() {
    return this.identityCardNo;
  }

  public Registration setIdentityCardNo(String identityCardNo) {
    this.identityCardNo = identityCardNo;
    return this;
  }

  public void unsetIdentityCardNo() {
    this.identityCardNo = null;
  }

  /** Returns true if field identityCardNo is set (has been assigned a value) and false otherwise */
  public boolean isSetIdentityCardNo() {
    return this.identityCardNo != null;
  }

  public void setIdentityCardNoIsSet(boolean value) {
    if (!value) {
      this.identityCardNo = null;
    }
  }

  public long getSchedulePlanId() {
    return this.schedulePlanId;
  }

  public Registration setSchedulePlanId(long schedulePlanId) {
    this.schedulePlanId = schedulePlanId;
    setSchedulePlanIdIsSet(true);
    return this;
  }

  public void unsetSchedulePlanId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SCHEDULEPLANID_ISSET_ID);
  }

  /** Returns true if field schedulePlanId is set (has been assigned a value) and false otherwise */
  public boolean isSetSchedulePlanId() {
    return EncodingUtils.testBit(__isset_bitfield, __SCHEDULEPLANID_ISSET_ID);
  }

  public void setSchedulePlanIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SCHEDULEPLANID_ISSET_ID, value);
  }

  /**
   * 
   * @see RegistrationSourceEnum
   */
  public RegistrationSourceEnum getRegistrationSource() {
    return this.registrationSource;
  }

  /**
   * 
   * @see RegistrationSourceEnum
   */
  public Registration setRegistrationSource(RegistrationSourceEnum registrationSource) {
    this.registrationSource = registrationSource;
    return this;
  }

  public void unsetRegistrationSource() {
    this.registrationSource = null;
  }

  /** Returns true if field registrationSource is set (has been assigned a value) and false otherwise */
  public boolean isSetRegistrationSource() {
    return this.registrationSource != null;
  }

  public void setRegistrationSourceIsSet(boolean value) {
    if (!value) {
      this.registrationSource = null;
    }
  }

  /**
   * 
   * @see RegistrationStatusEnum
   */
  public RegistrationStatusEnum getStatus() {
    return this.status;
  }

  /**
   * 
   * @see RegistrationStatusEnum
   */
  public Registration setStatus(RegistrationStatusEnum status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public long getRegistrationTime() {
    return this.registrationTime;
  }

  public Registration setRegistrationTime(long registrationTime) {
    this.registrationTime = registrationTime;
    setRegistrationTimeIsSet(true);
    return this;
  }

  public void unsetRegistrationTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REGISTRATIONTIME_ISSET_ID);
  }

  /** Returns true if field registrationTime is set (has been assigned a value) and false otherwise */
  public boolean isSetRegistrationTime() {
    return EncodingUtils.testBit(__isset_bitfield, __REGISTRATIONTIME_ISSET_ID);
  }

  public void setRegistrationTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REGISTRATIONTIME_ISSET_ID, value);
  }

  public long getSeeDoctorTime() {
    return this.seeDoctorTime;
  }

  public Registration setSeeDoctorTime(long seeDoctorTime) {
    this.seeDoctorTime = seeDoctorTime;
    setSeeDoctorTimeIsSet(true);
    return this;
  }

  public void unsetSeeDoctorTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEEDOCTORTIME_ISSET_ID);
  }

  /** Returns true if field seeDoctorTime is set (has been assigned a value) and false otherwise */
  public boolean isSetSeeDoctorTime() {
    return EncodingUtils.testBit(__isset_bitfield, __SEEDOCTORTIME_ISSET_ID);
  }

  public void setSeeDoctorTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEEDOCTORTIME_ISSET_ID, value);
  }

  public long getBillingCategoryId() {
    return this.billingCategoryId;
  }

  public Registration setBillingCategoryId(long billingCategoryId) {
    this.billingCategoryId = billingCategoryId;
    setBillingCategoryIdIsSet(true);
    return this;
  }

  public void unsetBillingCategoryId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BILLINGCATEGORYID_ISSET_ID);
  }

  /** Returns true if field billingCategoryId is set (has been assigned a value) and false otherwise */
  public boolean isSetBillingCategoryId() {
    return EncodingUtils.testBit(__isset_bitfield, __BILLINGCATEGORYID_ISSET_ID);
  }

  public void setBillingCategoryIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BILLINGCATEGORYID_ISSET_ID, value);
  }

  public int getSequenceNumber() {
    return this.sequenceNumber;
  }

  public Registration setSequenceNumber(int sequenceNumber) {
    this.sequenceNumber = sequenceNumber;
    setSequenceNumberIsSet(true);
    return this;
  }

  public void unsetSequenceNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEQUENCENUMBER_ISSET_ID);
  }

  /** Returns true if field sequenceNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetSequenceNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __SEQUENCENUMBER_ISSET_ID);
  }

  public void setSequenceNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEQUENCENUMBER_ISSET_ID, value);
  }

  public double getExpense() {
    return this.expense;
  }

  public Registration setExpense(double expense) {
    this.expense = expense;
    setExpenseIsSet(true);
    return this;
  }

  public void unsetExpense() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXPENSE_ISSET_ID);
  }

  /** Returns true if field expense is set (has been assigned a value) and false otherwise */
  public boolean isSetExpense() {
    return EncodingUtils.testBit(__isset_bitfield, __EXPENSE_ISSET_ID);
  }

  public void setExpenseIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXPENSE_ISSET_ID, value);
  }

  public int getValid() {
    return this.valid;
  }

  public Registration setValid(int valid) {
    this.valid = valid;
    setValidIsSet(true);
    return this;
  }

  public void unsetValid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VALID_ISSET_ID);
  }

  /** Returns true if field valid is set (has been assigned a value) and false otherwise */
  public boolean isSetValid() {
    return EncodingUtils.testBit(__isset_bitfield, __VALID_ISSET_ID);
  }

  public void setValidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VALID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case MEDICAL_RECORD_NO:
      if (value == null) {
        unsetMedicalRecordNo();
      } else {
        setMedicalRecordNo((Long)value);
      }
      break;

    case IDENTITY_CARD_NO:
      if (value == null) {
        unsetIdentityCardNo();
      } else {
        setIdentityCardNo((String)value);
      }
      break;

    case SCHEDULE_PLAN_ID:
      if (value == null) {
        unsetSchedulePlanId();
      } else {
        setSchedulePlanId((Long)value);
      }
      break;

    case REGISTRATION_SOURCE:
      if (value == null) {
        unsetRegistrationSource();
      } else {
        setRegistrationSource((RegistrationSourceEnum)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((RegistrationStatusEnum)value);
      }
      break;

    case REGISTRATION_TIME:
      if (value == null) {
        unsetRegistrationTime();
      } else {
        setRegistrationTime((Long)value);
      }
      break;

    case SEE_DOCTOR_TIME:
      if (value == null) {
        unsetSeeDoctorTime();
      } else {
        setSeeDoctorTime((Long)value);
      }
      break;

    case BILLING_CATEGORY_ID:
      if (value == null) {
        unsetBillingCategoryId();
      } else {
        setBillingCategoryId((Long)value);
      }
      break;

    case SEQUENCE_NUMBER:
      if (value == null) {
        unsetSequenceNumber();
      } else {
        setSequenceNumber((Integer)value);
      }
      break;

    case EXPENSE:
      if (value == null) {
        unsetExpense();
      } else {
        setExpense((Double)value);
      }
      break;

    case VALID:
      if (value == null) {
        unsetValid();
      } else {
        setValid((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case MEDICAL_RECORD_NO:
      return Long.valueOf(getMedicalRecordNo());

    case IDENTITY_CARD_NO:
      return getIdentityCardNo();

    case SCHEDULE_PLAN_ID:
      return Long.valueOf(getSchedulePlanId());

    case REGISTRATION_SOURCE:
      return getRegistrationSource();

    case STATUS:
      return getStatus();

    case REGISTRATION_TIME:
      return Long.valueOf(getRegistrationTime());

    case SEE_DOCTOR_TIME:
      return Long.valueOf(getSeeDoctorTime());

    case BILLING_CATEGORY_ID:
      return Long.valueOf(getBillingCategoryId());

    case SEQUENCE_NUMBER:
      return Integer.valueOf(getSequenceNumber());

    case EXPENSE:
      return Double.valueOf(getExpense());

    case VALID:
      return Integer.valueOf(getValid());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case MEDICAL_RECORD_NO:
      return isSetMedicalRecordNo();
    case IDENTITY_CARD_NO:
      return isSetIdentityCardNo();
    case SCHEDULE_PLAN_ID:
      return isSetSchedulePlanId();
    case REGISTRATION_SOURCE:
      return isSetRegistrationSource();
    case STATUS:
      return isSetStatus();
    case REGISTRATION_TIME:
      return isSetRegistrationTime();
    case SEE_DOCTOR_TIME:
      return isSetSeeDoctorTime();
    case BILLING_CATEGORY_ID:
      return isSetBillingCategoryId();
    case SEQUENCE_NUMBER:
      return isSetSequenceNumber();
    case EXPENSE:
      return isSetExpense();
    case VALID:
      return isSetValid();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Registration)
      return this.equals((Registration)that);
    return false;
  }

  public boolean equals(Registration that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_medicalRecordNo = true && this.isSetMedicalRecordNo();
    boolean that_present_medicalRecordNo = true && that.isSetMedicalRecordNo();
    if (this_present_medicalRecordNo || that_present_medicalRecordNo) {
      if (!(this_present_medicalRecordNo && that_present_medicalRecordNo))
        return false;
      if (this.medicalRecordNo != that.medicalRecordNo)
        return false;
    }

    boolean this_present_identityCardNo = true && this.isSetIdentityCardNo();
    boolean that_present_identityCardNo = true && that.isSetIdentityCardNo();
    if (this_present_identityCardNo || that_present_identityCardNo) {
      if (!(this_present_identityCardNo && that_present_identityCardNo))
        return false;
      if (!this.identityCardNo.equals(that.identityCardNo))
        return false;
    }

    boolean this_present_schedulePlanId = true && this.isSetSchedulePlanId();
    boolean that_present_schedulePlanId = true && that.isSetSchedulePlanId();
    if (this_present_schedulePlanId || that_present_schedulePlanId) {
      if (!(this_present_schedulePlanId && that_present_schedulePlanId))
        return false;
      if (this.schedulePlanId != that.schedulePlanId)
        return false;
    }

    boolean this_present_registrationSource = true && this.isSetRegistrationSource();
    boolean that_present_registrationSource = true && that.isSetRegistrationSource();
    if (this_present_registrationSource || that_present_registrationSource) {
      if (!(this_present_registrationSource && that_present_registrationSource))
        return false;
      if (!this.registrationSource.equals(that.registrationSource))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_registrationTime = true && this.isSetRegistrationTime();
    boolean that_present_registrationTime = true && that.isSetRegistrationTime();
    if (this_present_registrationTime || that_present_registrationTime) {
      if (!(this_present_registrationTime && that_present_registrationTime))
        return false;
      if (this.registrationTime != that.registrationTime)
        return false;
    }

    boolean this_present_seeDoctorTime = true && this.isSetSeeDoctorTime();
    boolean that_present_seeDoctorTime = true && that.isSetSeeDoctorTime();
    if (this_present_seeDoctorTime || that_present_seeDoctorTime) {
      if (!(this_present_seeDoctorTime && that_present_seeDoctorTime))
        return false;
      if (this.seeDoctorTime != that.seeDoctorTime)
        return false;
    }

    boolean this_present_billingCategoryId = true && this.isSetBillingCategoryId();
    boolean that_present_billingCategoryId = true && that.isSetBillingCategoryId();
    if (this_present_billingCategoryId || that_present_billingCategoryId) {
      if (!(this_present_billingCategoryId && that_present_billingCategoryId))
        return false;
      if (this.billingCategoryId != that.billingCategoryId)
        return false;
    }

    boolean this_present_sequenceNumber = true && this.isSetSequenceNumber();
    boolean that_present_sequenceNumber = true && that.isSetSequenceNumber();
    if (this_present_sequenceNumber || that_present_sequenceNumber) {
      if (!(this_present_sequenceNumber && that_present_sequenceNumber))
        return false;
      if (this.sequenceNumber != that.sequenceNumber)
        return false;
    }

    boolean this_present_expense = true && this.isSetExpense();
    boolean that_present_expense = true && that.isSetExpense();
    if (this_present_expense || that_present_expense) {
      if (!(this_present_expense && that_present_expense))
        return false;
      if (this.expense != that.expense)
        return false;
    }

    boolean this_present_valid = true && this.isSetValid();
    boolean that_present_valid = true && that.isSetValid();
    if (this_present_valid || that_present_valid) {
      if (!(this_present_valid && that_present_valid))
        return false;
      if (this.valid != that.valid)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_medicalRecordNo = true && (isSetMedicalRecordNo());
    list.add(present_medicalRecordNo);
    if (present_medicalRecordNo)
      list.add(medicalRecordNo);

    boolean present_identityCardNo = true && (isSetIdentityCardNo());
    list.add(present_identityCardNo);
    if (present_identityCardNo)
      list.add(identityCardNo);

    boolean present_schedulePlanId = true && (isSetSchedulePlanId());
    list.add(present_schedulePlanId);
    if (present_schedulePlanId)
      list.add(schedulePlanId);

    boolean present_registrationSource = true && (isSetRegistrationSource());
    list.add(present_registrationSource);
    if (present_registrationSource)
      list.add(registrationSource.getValue());

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status.getValue());

    boolean present_registrationTime = true && (isSetRegistrationTime());
    list.add(present_registrationTime);
    if (present_registrationTime)
      list.add(registrationTime);

    boolean present_seeDoctorTime = true && (isSetSeeDoctorTime());
    list.add(present_seeDoctorTime);
    if (present_seeDoctorTime)
      list.add(seeDoctorTime);

    boolean present_billingCategoryId = true && (isSetBillingCategoryId());
    list.add(present_billingCategoryId);
    if (present_billingCategoryId)
      list.add(billingCategoryId);

    boolean present_sequenceNumber = true && (isSetSequenceNumber());
    list.add(present_sequenceNumber);
    if (present_sequenceNumber)
      list.add(sequenceNumber);

    boolean present_expense = true && (isSetExpense());
    list.add(present_expense);
    if (present_expense)
      list.add(expense);

    boolean present_valid = true && (isSetValid());
    list.add(present_valid);
    if (present_valid)
      list.add(valid);

    return list.hashCode();
  }

  @Override
  public int compareTo(Registration other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMedicalRecordNo()).compareTo(other.isSetMedicalRecordNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMedicalRecordNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.medicalRecordNo, other.medicalRecordNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdentityCardNo()).compareTo(other.isSetIdentityCardNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdentityCardNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identityCardNo, other.identityCardNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSchedulePlanId()).compareTo(other.isSetSchedulePlanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchedulePlanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schedulePlanId, other.schedulePlanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegistrationSource()).compareTo(other.isSetRegistrationSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegistrationSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.registrationSource, other.registrationSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegistrationTime()).compareTo(other.isSetRegistrationTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegistrationTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.registrationTime, other.registrationTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSeeDoctorTime()).compareTo(other.isSetSeeDoctorTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSeeDoctorTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seeDoctorTime, other.seeDoctorTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBillingCategoryId()).compareTo(other.isSetBillingCategoryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBillingCategoryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.billingCategoryId, other.billingCategoryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSequenceNumber()).compareTo(other.isSetSequenceNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSequenceNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sequenceNumber, other.sequenceNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpense()).compareTo(other.isSetExpense());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpense()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expense, other.expense);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValid()).compareTo(other.isSetValid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.valid, other.valid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Registration(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetMedicalRecordNo()) {
      if (!first) sb.append(", ");
      sb.append("medicalRecordNo:");
      sb.append(this.medicalRecordNo);
      first = false;
    }
    if (isSetIdentityCardNo()) {
      if (!first) sb.append(", ");
      sb.append("identityCardNo:");
      if (this.identityCardNo == null) {
        sb.append("null");
      } else {
        sb.append(this.identityCardNo);
      }
      first = false;
    }
    if (isSetSchedulePlanId()) {
      if (!first) sb.append(", ");
      sb.append("schedulePlanId:");
      sb.append(this.schedulePlanId);
      first = false;
    }
    if (isSetRegistrationSource()) {
      if (!first) sb.append(", ");
      sb.append("registrationSource:");
      if (this.registrationSource == null) {
        sb.append("null");
      } else {
        sb.append(this.registrationSource);
      }
      first = false;
    }
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
    }
    if (isSetRegistrationTime()) {
      if (!first) sb.append(", ");
      sb.append("registrationTime:");
      sb.append(this.registrationTime);
      first = false;
    }
    if (isSetSeeDoctorTime()) {
      if (!first) sb.append(", ");
      sb.append("seeDoctorTime:");
      sb.append(this.seeDoctorTime);
      first = false;
    }
    if (isSetBillingCategoryId()) {
      if (!first) sb.append(", ");
      sb.append("billingCategoryId:");
      sb.append(this.billingCategoryId);
      first = false;
    }
    if (isSetSequenceNumber()) {
      if (!first) sb.append(", ");
      sb.append("sequenceNumber:");
      sb.append(this.sequenceNumber);
      first = false;
    }
    if (isSetExpense()) {
      if (!first) sb.append(", ");
      sb.append("expense:");
      sb.append(this.expense);
      first = false;
    }
    if (isSetValid()) {
      if (!first) sb.append(", ");
      sb.append("valid:");
      sb.append(this.valid);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RegistrationStandardSchemeFactory implements SchemeFactory {
    public RegistrationStandardScheme getScheme() {
      return new RegistrationStandardScheme();
    }
  }

  private static class RegistrationStandardScheme extends StandardScheme<Registration> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Registration struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MEDICAL_RECORD_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.medicalRecordNo = iprot.readI64();
              struct.setMedicalRecordNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IDENTITY_CARD_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.identityCardNo = iprot.readString();
              struct.setIdentityCardNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SCHEDULE_PLAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.schedulePlanId = iprot.readI64();
              struct.setSchedulePlanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REGISTRATION_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.registrationSource = top.itcat.rpc.service.model.RegistrationSourceEnum.findByValue(iprot.readI32());
              struct.setRegistrationSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = top.itcat.rpc.service.model.RegistrationStatusEnum.findByValue(iprot.readI32());
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REGISTRATION_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.registrationTime = iprot.readI64();
              struct.setRegistrationTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SEE_DOCTOR_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.seeDoctorTime = iprot.readI64();
              struct.setSeeDoctorTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // BILLING_CATEGORY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.billingCategoryId = iprot.readI64();
              struct.setBillingCategoryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SEQUENCE_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sequenceNumber = iprot.readI32();
              struct.setSequenceNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // EXPENSE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.expense = iprot.readDouble();
              struct.setExpenseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 255: // VALID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.valid = iprot.readI32();
              struct.setValidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Registration struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMedicalRecordNo()) {
        oprot.writeFieldBegin(MEDICAL_RECORD_NO_FIELD_DESC);
        oprot.writeI64(struct.medicalRecordNo);
        oprot.writeFieldEnd();
      }
      if (struct.identityCardNo != null) {
        if (struct.isSetIdentityCardNo()) {
          oprot.writeFieldBegin(IDENTITY_CARD_NO_FIELD_DESC);
          oprot.writeString(struct.identityCardNo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSchedulePlanId()) {
        oprot.writeFieldBegin(SCHEDULE_PLAN_ID_FIELD_DESC);
        oprot.writeI64(struct.schedulePlanId);
        oprot.writeFieldEnd();
      }
      if (struct.registrationSource != null) {
        if (struct.isSetRegistrationSource()) {
          oprot.writeFieldBegin(REGISTRATION_SOURCE_FIELD_DESC);
          oprot.writeI32(struct.registrationSource.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.status != null) {
        if (struct.isSetStatus()) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          oprot.writeI32(struct.status.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRegistrationTime()) {
        oprot.writeFieldBegin(REGISTRATION_TIME_FIELD_DESC);
        oprot.writeI64(struct.registrationTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSeeDoctorTime()) {
        oprot.writeFieldBegin(SEE_DOCTOR_TIME_FIELD_DESC);
        oprot.writeI64(struct.seeDoctorTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBillingCategoryId()) {
        oprot.writeFieldBegin(BILLING_CATEGORY_ID_FIELD_DESC);
        oprot.writeI64(struct.billingCategoryId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSequenceNumber()) {
        oprot.writeFieldBegin(SEQUENCE_NUMBER_FIELD_DESC);
        oprot.writeI32(struct.sequenceNumber);
        oprot.writeFieldEnd();
      }
      if (struct.isSetExpense()) {
        oprot.writeFieldBegin(EXPENSE_FIELD_DESC);
        oprot.writeDouble(struct.expense);
        oprot.writeFieldEnd();
      }
      if (struct.isSetValid()) {
        oprot.writeFieldBegin(VALID_FIELD_DESC);
        oprot.writeI32(struct.valid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RegistrationTupleSchemeFactory implements SchemeFactory {
    public RegistrationTupleScheme getScheme() {
      return new RegistrationTupleScheme();
    }
  }

  private static class RegistrationTupleScheme extends TupleScheme<Registration> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Registration struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetMedicalRecordNo()) {
        optionals.set(1);
      }
      if (struct.isSetIdentityCardNo()) {
        optionals.set(2);
      }
      if (struct.isSetSchedulePlanId()) {
        optionals.set(3);
      }
      if (struct.isSetRegistrationSource()) {
        optionals.set(4);
      }
      if (struct.isSetStatus()) {
        optionals.set(5);
      }
      if (struct.isSetRegistrationTime()) {
        optionals.set(6);
      }
      if (struct.isSetSeeDoctorTime()) {
        optionals.set(7);
      }
      if (struct.isSetBillingCategoryId()) {
        optionals.set(8);
      }
      if (struct.isSetSequenceNumber()) {
        optionals.set(9);
      }
      if (struct.isSetExpense()) {
        optionals.set(10);
      }
      if (struct.isSetValid()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetMedicalRecordNo()) {
        oprot.writeI64(struct.medicalRecordNo);
      }
      if (struct.isSetIdentityCardNo()) {
        oprot.writeString(struct.identityCardNo);
      }
      if (struct.isSetSchedulePlanId()) {
        oprot.writeI64(struct.schedulePlanId);
      }
      if (struct.isSetRegistrationSource()) {
        oprot.writeI32(struct.registrationSource.getValue());
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status.getValue());
      }
      if (struct.isSetRegistrationTime()) {
        oprot.writeI64(struct.registrationTime);
      }
      if (struct.isSetSeeDoctorTime()) {
        oprot.writeI64(struct.seeDoctorTime);
      }
      if (struct.isSetBillingCategoryId()) {
        oprot.writeI64(struct.billingCategoryId);
      }
      if (struct.isSetSequenceNumber()) {
        oprot.writeI32(struct.sequenceNumber);
      }
      if (struct.isSetExpense()) {
        oprot.writeDouble(struct.expense);
      }
      if (struct.isSetValid()) {
        oprot.writeI32(struct.valid);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Registration struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.medicalRecordNo = iprot.readI64();
        struct.setMedicalRecordNoIsSet(true);
      }
      if (incoming.get(2)) {
        struct.identityCardNo = iprot.readString();
        struct.setIdentityCardNoIsSet(true);
      }
      if (incoming.get(3)) {
        struct.schedulePlanId = iprot.readI64();
        struct.setSchedulePlanIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.registrationSource = top.itcat.rpc.service.model.RegistrationSourceEnum.findByValue(iprot.readI32());
        struct.setRegistrationSourceIsSet(true);
      }
      if (incoming.get(5)) {
        struct.status = top.itcat.rpc.service.model.RegistrationStatusEnum.findByValue(iprot.readI32());
        struct.setStatusIsSet(true);
      }
      if (incoming.get(6)) {
        struct.registrationTime = iprot.readI64();
        struct.setRegistrationTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.seeDoctorTime = iprot.readI64();
        struct.setSeeDoctorTimeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.billingCategoryId = iprot.readI64();
        struct.setBillingCategoryIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.sequenceNumber = iprot.readI32();
        struct.setSequenceNumberIsSet(true);
      }
      if (incoming.get(10)) {
        struct.expense = iprot.readDouble();
        struct.setExpenseIsSet(true);
      }
      if (incoming.get(11)) {
        struct.valid = iprot.readI32();
        struct.setValidIsSet(true);
      }
    }
  }

}

