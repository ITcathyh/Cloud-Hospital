/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package top.itcat.rpc.service.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2019-7-3")
public class PrescriptionGroup implements org.apache.thrift.TBase<PrescriptionGroup, PrescriptionGroup._Fields>, java.io.Serializable, Cloneable, Comparable<PrescriptionGroup> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PrescriptionGroup");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SERVICE_OBJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceObject", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField SUITABLE_RANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("suitableRange", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("items", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField DEPARTMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("departmentId", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField DOCUMENT_CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("documentCategory", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField CREATOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("creatorId", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField CATALOG_FIELD_DESC = new org.apache.thrift.protocol.TField("catalog", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField VALID_FIELD_DESC = new org.apache.thrift.protocol.TField("valid", org.apache.thrift.protocol.TType.I32, (short)255);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PrescriptionGroupStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PrescriptionGroupTupleSchemeFactory());
  }

  public long id; // optional
  public String code; // optional
  public String name; // optional
  /**
   * 
   * @see top.itcat.rpc.service.model.ServiceObject
   */
  public top.itcat.rpc.service.model.ServiceObject serviceObject; // optional
  /**
   * 
   * @see top.itcat.rpc.service.model.SuitableRangeEnum
   */
  public top.itcat.rpc.service.model.SuitableRangeEnum suitableRange; // optional
  public List<PrescriptionItemTemplate> items; // optional
  public long departmentId; // optional
  public long createTime; // optional
  public String remark; // optional
  /**
   * 
   * @see DocumentCategory
   */
  public DocumentCategory documentCategory; // optional
  public long creatorId; // optional
  /**
   * 
   * @see PrescriptionGroupCatalogEnum
   */
  public PrescriptionGroupCatalogEnum catalog; // optional
  public int valid; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    CODE((short)2, "code"),
    NAME((short)3, "name"),
    /**
     * 
     * @see top.itcat.rpc.service.model.ServiceObject
     */
    SERVICE_OBJECT((short)4, "serviceObject"),
    /**
     * 
     * @see top.itcat.rpc.service.model.SuitableRangeEnum
     */
    SUITABLE_RANGE((short)5, "suitableRange"),
    ITEMS((short)6, "items"),
    DEPARTMENT_ID((short)7, "departmentId"),
    CREATE_TIME((short)8, "createTime"),
    REMARK((short)9, "remark"),
    /**
     * 
     * @see DocumentCategory
     */
    DOCUMENT_CATEGORY((short)10, "documentCategory"),
    CREATOR_ID((short)11, "creatorId"),
    /**
     * 
     * @see PrescriptionGroupCatalogEnum
     */
    CATALOG((short)12, "catalog"),
    VALID((short)255, "valid");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // CODE
          return CODE;
        case 3: // NAME
          return NAME;
        case 4: // SERVICE_OBJECT
          return SERVICE_OBJECT;
        case 5: // SUITABLE_RANGE
          return SUITABLE_RANGE;
        case 6: // ITEMS
          return ITEMS;
        case 7: // DEPARTMENT_ID
          return DEPARTMENT_ID;
        case 8: // CREATE_TIME
          return CREATE_TIME;
        case 9: // REMARK
          return REMARK;
        case 10: // DOCUMENT_CATEGORY
          return DOCUMENT_CATEGORY;
        case 11: // CREATOR_ID
          return CREATOR_ID;
        case 12: // CATALOG
          return CATALOG;
        case 255: // VALID
          return VALID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __DEPARTMENTID_ISSET_ID = 1;
  private static final int __CREATETIME_ISSET_ID = 2;
  private static final int __CREATORID_ISSET_ID = 3;
  private static final int __VALID_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.CODE,_Fields.NAME,_Fields.SERVICE_OBJECT,_Fields.SUITABLE_RANGE,_Fields.ITEMS,_Fields.DEPARTMENT_ID,_Fields.CREATE_TIME,_Fields.REMARK,_Fields.DOCUMENT_CATEGORY,_Fields.CREATOR_ID,_Fields.CATALOG,_Fields.VALID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SERVICE_OBJECT, new org.apache.thrift.meta_data.FieldMetaData("serviceObject", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, top.itcat.rpc.service.model.ServiceObject.class)));
    tmpMap.put(_Fields.SUITABLE_RANGE, new org.apache.thrift.meta_data.FieldMetaData("suitableRange", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, top.itcat.rpc.service.model.SuitableRangeEnum.class)));
    tmpMap.put(_Fields.ITEMS, new org.apache.thrift.meta_data.FieldMetaData("items", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "PrescriptionItemTemplate"))));
    tmpMap.put(_Fields.DEPARTMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("departmentId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOCUMENT_CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("documentCategory", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, DocumentCategory.class)));
    tmpMap.put(_Fields.CREATOR_ID, new org.apache.thrift.meta_data.FieldMetaData("creatorId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CATALOG, new org.apache.thrift.meta_data.FieldMetaData("catalog", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PrescriptionGroupCatalogEnum.class)));
    tmpMap.put(_Fields.VALID, new org.apache.thrift.meta_data.FieldMetaData("valid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PrescriptionGroup.class, metaDataMap);
  }

  public PrescriptionGroup() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PrescriptionGroup(PrescriptionGroup other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetCode()) {
      this.code = other.code;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetServiceObject()) {
      this.serviceObject = other.serviceObject;
    }
    if (other.isSetSuitableRange()) {
      this.suitableRange = other.suitableRange;
    }
    if (other.isSetItems()) {
      List<PrescriptionItemTemplate> __this__items = new ArrayList<PrescriptionItemTemplate>(other.items.size());
      for (PrescriptionItemTemplate other_element : other.items) {
        __this__items.add(other_element);
      }
      this.items = __this__items;
    }
    this.departmentId = other.departmentId;
    this.createTime = other.createTime;
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    if (other.isSetDocumentCategory()) {
      this.documentCategory = other.documentCategory;
    }
    this.creatorId = other.creatorId;
    if (other.isSetCatalog()) {
      this.catalog = other.catalog;
    }
    this.valid = other.valid;
  }

  public PrescriptionGroup deepCopy() {
    return new PrescriptionGroup(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.code = null;
    this.name = null;
    this.serviceObject = null;
    this.suitableRange = null;
    this.items = null;
    setDepartmentIdIsSet(false);
    this.departmentId = 0;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    this.remark = null;
    this.documentCategory = null;
    setCreatorIdIsSet(false);
    this.creatorId = 0;
    this.catalog = null;
    setValidIsSet(false);
    this.valid = 0;
  }

  public long getId() {
    return this.id;
  }

  public PrescriptionGroup setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getCode() {
    return this.code;
  }

  public PrescriptionGroup setCode(String code) {
    this.code = code;
    return this;
  }

  public void unsetCode() {
    this.code = null;
  }

  /** Returns true if field code is set (has been assigned a value) and false otherwise */
  public boolean isSetCode() {
    return this.code != null;
  }

  public void setCodeIsSet(boolean value) {
    if (!value) {
      this.code = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public PrescriptionGroup setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  /**
   * 
   * @see top.itcat.rpc.service.model.ServiceObject
   */
  public top.itcat.rpc.service.model.ServiceObject getServiceObject() {
    return this.serviceObject;
  }

  /**
   * 
   * @see top.itcat.rpc.service.model.ServiceObject
   */
  public PrescriptionGroup setServiceObject(top.itcat.rpc.service.model.ServiceObject serviceObject) {
    this.serviceObject = serviceObject;
    return this;
  }

  public void unsetServiceObject() {
    this.serviceObject = null;
  }

  /** Returns true if field serviceObject is set (has been assigned a value) and false otherwise */
  public boolean isSetServiceObject() {
    return this.serviceObject != null;
  }

  public void setServiceObjectIsSet(boolean value) {
    if (!value) {
      this.serviceObject = null;
    }
  }

  /**
   * 
   * @see top.itcat.rpc.service.model.SuitableRangeEnum
   */
  public top.itcat.rpc.service.model.SuitableRangeEnum getSuitableRange() {
    return this.suitableRange;
  }

  /**
   * 
   * @see top.itcat.rpc.service.model.SuitableRangeEnum
   */
  public PrescriptionGroup setSuitableRange(top.itcat.rpc.service.model.SuitableRangeEnum suitableRange) {
    this.suitableRange = suitableRange;
    return this;
  }

  public void unsetSuitableRange() {
    this.suitableRange = null;
  }

  /** Returns true if field suitableRange is set (has been assigned a value) and false otherwise */
  public boolean isSetSuitableRange() {
    return this.suitableRange != null;
  }

  public void setSuitableRangeIsSet(boolean value) {
    if (!value) {
      this.suitableRange = null;
    }
  }

  public int getItemsSize() {
    return (this.items == null) ? 0 : this.items.size();
  }

  public java.util.Iterator<PrescriptionItemTemplate> getItemsIterator() {
    return (this.items == null) ? null : this.items.iterator();
  }

  public void addToItems(PrescriptionItemTemplate elem) {
    if (this.items == null) {
      this.items = new ArrayList<PrescriptionItemTemplate>();
    }
    this.items.add(elem);
  }

  public List<PrescriptionItemTemplate> getItems() {
    return this.items;
  }

  public PrescriptionGroup setItems(List<PrescriptionItemTemplate> items) {
    this.items = items;
    return this;
  }

  public void unsetItems() {
    this.items = null;
  }

  /** Returns true if field items is set (has been assigned a value) and false otherwise */
  public boolean isSetItems() {
    return this.items != null;
  }

  public void setItemsIsSet(boolean value) {
    if (!value) {
      this.items = null;
    }
  }

  public long getDepartmentId() {
    return this.departmentId;
  }

  public PrescriptionGroup setDepartmentId(long departmentId) {
    this.departmentId = departmentId;
    setDepartmentIdIsSet(true);
    return this;
  }

  public void unsetDepartmentId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEPARTMENTID_ISSET_ID);
  }

  /** Returns true if field departmentId is set (has been assigned a value) and false otherwise */
  public boolean isSetDepartmentId() {
    return EncodingUtils.testBit(__isset_bitfield, __DEPARTMENTID_ISSET_ID);
  }

  public void setDepartmentIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEPARTMENTID_ISSET_ID, value);
  }

  public long getCreateTime() {
    return this.createTime;
  }

  public PrescriptionGroup setCreateTime(long createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public String getRemark() {
    return this.remark;
  }

  public PrescriptionGroup setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  /**
   * 
   * @see DocumentCategory
   */
  public DocumentCategory getDocumentCategory() {
    return this.documentCategory;
  }

  /**
   * 
   * @see DocumentCategory
   */
  public PrescriptionGroup setDocumentCategory(DocumentCategory documentCategory) {
    this.documentCategory = documentCategory;
    return this;
  }

  public void unsetDocumentCategory() {
    this.documentCategory = null;
  }

  /** Returns true if field documentCategory is set (has been assigned a value) and false otherwise */
  public boolean isSetDocumentCategory() {
    return this.documentCategory != null;
  }

  public void setDocumentCategoryIsSet(boolean value) {
    if (!value) {
      this.documentCategory = null;
    }
  }

  public long getCreatorId() {
    return this.creatorId;
  }

  public PrescriptionGroup setCreatorId(long creatorId) {
    this.creatorId = creatorId;
    setCreatorIdIsSet(true);
    return this;
  }

  public void unsetCreatorId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATORID_ISSET_ID);
  }

  /** Returns true if field creatorId is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatorId() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATORID_ISSET_ID);
  }

  public void setCreatorIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATORID_ISSET_ID, value);
  }

  /**
   * 
   * @see PrescriptionGroupCatalogEnum
   */
  public PrescriptionGroupCatalogEnum getCatalog() {
    return this.catalog;
  }

  /**
   * 
   * @see PrescriptionGroupCatalogEnum
   */
  public PrescriptionGroup setCatalog(PrescriptionGroupCatalogEnum catalog) {
    this.catalog = catalog;
    return this;
  }

  public void unsetCatalog() {
    this.catalog = null;
  }

  /** Returns true if field catalog is set (has been assigned a value) and false otherwise */
  public boolean isSetCatalog() {
    return this.catalog != null;
  }

  public void setCatalogIsSet(boolean value) {
    if (!value) {
      this.catalog = null;
    }
  }

  public int getValid() {
    return this.valid;
  }

  public PrescriptionGroup setValid(int valid) {
    this.valid = valid;
    setValidIsSet(true);
    return this;
  }

  public void unsetValid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VALID_ISSET_ID);
  }

  /** Returns true if field valid is set (has been assigned a value) and false otherwise */
  public boolean isSetValid() {
    return EncodingUtils.testBit(__isset_bitfield, __VALID_ISSET_ID);
  }

  public void setValidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VALID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case CODE:
      if (value == null) {
        unsetCode();
      } else {
        setCode((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case SERVICE_OBJECT:
      if (value == null) {
        unsetServiceObject();
      } else {
        setServiceObject((top.itcat.rpc.service.model.ServiceObject)value);
      }
      break;

    case SUITABLE_RANGE:
      if (value == null) {
        unsetSuitableRange();
      } else {
        setSuitableRange((top.itcat.rpc.service.model.SuitableRangeEnum)value);
      }
      break;

    case ITEMS:
      if (value == null) {
        unsetItems();
      } else {
        setItems((List<PrescriptionItemTemplate>)value);
      }
      break;

    case DEPARTMENT_ID:
      if (value == null) {
        unsetDepartmentId();
      } else {
        setDepartmentId((Long)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Long)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case DOCUMENT_CATEGORY:
      if (value == null) {
        unsetDocumentCategory();
      } else {
        setDocumentCategory((DocumentCategory)value);
      }
      break;

    case CREATOR_ID:
      if (value == null) {
        unsetCreatorId();
      } else {
        setCreatorId((Long)value);
      }
      break;

    case CATALOG:
      if (value == null) {
        unsetCatalog();
      } else {
        setCatalog((PrescriptionGroupCatalogEnum)value);
      }
      break;

    case VALID:
      if (value == null) {
        unsetValid();
      } else {
        setValid((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case CODE:
      return getCode();

    case NAME:
      return getName();

    case SERVICE_OBJECT:
      return getServiceObject();

    case SUITABLE_RANGE:
      return getSuitableRange();

    case ITEMS:
      return getItems();

    case DEPARTMENT_ID:
      return Long.valueOf(getDepartmentId());

    case CREATE_TIME:
      return Long.valueOf(getCreateTime());

    case REMARK:
      return getRemark();

    case DOCUMENT_CATEGORY:
      return getDocumentCategory();

    case CREATOR_ID:
      return Long.valueOf(getCreatorId());

    case CATALOG:
      return getCatalog();

    case VALID:
      return Integer.valueOf(getValid());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case CODE:
      return isSetCode();
    case NAME:
      return isSetName();
    case SERVICE_OBJECT:
      return isSetServiceObject();
    case SUITABLE_RANGE:
      return isSetSuitableRange();
    case ITEMS:
      return isSetItems();
    case DEPARTMENT_ID:
      return isSetDepartmentId();
    case CREATE_TIME:
      return isSetCreateTime();
    case REMARK:
      return isSetRemark();
    case DOCUMENT_CATEGORY:
      return isSetDocumentCategory();
    case CREATOR_ID:
      return isSetCreatorId();
    case CATALOG:
      return isSetCatalog();
    case VALID:
      return isSetValid();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PrescriptionGroup)
      return this.equals((PrescriptionGroup)that);
    return false;
  }

  public boolean equals(PrescriptionGroup that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_code = true && this.isSetCode();
    boolean that_present_code = true && that.isSetCode();
    if (this_present_code || that_present_code) {
      if (!(this_present_code && that_present_code))
        return false;
      if (!this.code.equals(that.code))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_serviceObject = true && this.isSetServiceObject();
    boolean that_present_serviceObject = true && that.isSetServiceObject();
    if (this_present_serviceObject || that_present_serviceObject) {
      if (!(this_present_serviceObject && that_present_serviceObject))
        return false;
      if (!this.serviceObject.equals(that.serviceObject))
        return false;
    }

    boolean this_present_suitableRange = true && this.isSetSuitableRange();
    boolean that_present_suitableRange = true && that.isSetSuitableRange();
    if (this_present_suitableRange || that_present_suitableRange) {
      if (!(this_present_suitableRange && that_present_suitableRange))
        return false;
      if (!this.suitableRange.equals(that.suitableRange))
        return false;
    }

    boolean this_present_items = true && this.isSetItems();
    boolean that_present_items = true && that.isSetItems();
    if (this_present_items || that_present_items) {
      if (!(this_present_items && that_present_items))
        return false;
      if (!this.items.equals(that.items))
        return false;
    }

    boolean this_present_departmentId = true && this.isSetDepartmentId();
    boolean that_present_departmentId = true && that.isSetDepartmentId();
    if (this_present_departmentId || that_present_departmentId) {
      if (!(this_present_departmentId && that_present_departmentId))
        return false;
      if (this.departmentId != that.departmentId)
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_documentCategory = true && this.isSetDocumentCategory();
    boolean that_present_documentCategory = true && that.isSetDocumentCategory();
    if (this_present_documentCategory || that_present_documentCategory) {
      if (!(this_present_documentCategory && that_present_documentCategory))
        return false;
      if (!this.documentCategory.equals(that.documentCategory))
        return false;
    }

    boolean this_present_creatorId = true && this.isSetCreatorId();
    boolean that_present_creatorId = true && that.isSetCreatorId();
    if (this_present_creatorId || that_present_creatorId) {
      if (!(this_present_creatorId && that_present_creatorId))
        return false;
      if (this.creatorId != that.creatorId)
        return false;
    }

    boolean this_present_catalog = true && this.isSetCatalog();
    boolean that_present_catalog = true && that.isSetCatalog();
    if (this_present_catalog || that_present_catalog) {
      if (!(this_present_catalog && that_present_catalog))
        return false;
      if (!this.catalog.equals(that.catalog))
        return false;
    }

    boolean this_present_valid = true && this.isSetValid();
    boolean that_present_valid = true && that.isSetValid();
    if (this_present_valid || that_present_valid) {
      if (!(this_present_valid && that_present_valid))
        return false;
      if (this.valid != that.valid)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_code = true && (isSetCode());
    list.add(present_code);
    if (present_code)
      list.add(code);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_serviceObject = true && (isSetServiceObject());
    list.add(present_serviceObject);
    if (present_serviceObject)
      list.add(serviceObject.getValue());

    boolean present_suitableRange = true && (isSetSuitableRange());
    list.add(present_suitableRange);
    if (present_suitableRange)
      list.add(suitableRange.getValue());

    boolean present_items = true && (isSetItems());
    list.add(present_items);
    if (present_items)
      list.add(items);

    boolean present_departmentId = true && (isSetDepartmentId());
    list.add(present_departmentId);
    if (present_departmentId)
      list.add(departmentId);

    boolean present_createTime = true && (isSetCreateTime());
    list.add(present_createTime);
    if (present_createTime)
      list.add(createTime);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_documentCategory = true && (isSetDocumentCategory());
    list.add(present_documentCategory);
    if (present_documentCategory)
      list.add(documentCategory.getValue());

    boolean present_creatorId = true && (isSetCreatorId());
    list.add(present_creatorId);
    if (present_creatorId)
      list.add(creatorId);

    boolean present_catalog = true && (isSetCatalog());
    list.add(present_catalog);
    if (present_catalog)
      list.add(catalog.getValue());

    boolean present_valid = true && (isSetValid());
    list.add(present_valid);
    if (present_valid)
      list.add(valid);

    return list.hashCode();
  }

  @Override
  public int compareTo(PrescriptionGroup other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCode()).compareTo(other.isSetCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServiceObject()).compareTo(other.isSetServiceObject());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServiceObject()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceObject, other.serviceObject);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSuitableRange()).compareTo(other.isSetSuitableRange());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuitableRange()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.suitableRange, other.suitableRange);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItems()).compareTo(other.isSetItems());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItems()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.items, other.items);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDepartmentId()).compareTo(other.isSetDepartmentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepartmentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.departmentId, other.departmentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDocumentCategory()).compareTo(other.isSetDocumentCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDocumentCategory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.documentCategory, other.documentCategory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreatorId()).compareTo(other.isSetCreatorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creatorId, other.creatorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCatalog()).compareTo(other.isSetCatalog());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCatalog()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.catalog, other.catalog);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValid()).compareTo(other.isSetValid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.valid, other.valid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PrescriptionGroup(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetCode()) {
      if (!first) sb.append(", ");
      sb.append("code:");
      if (this.code == null) {
        sb.append("null");
      } else {
        sb.append(this.code);
      }
      first = false;
    }
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetServiceObject()) {
      if (!first) sb.append(", ");
      sb.append("serviceObject:");
      if (this.serviceObject == null) {
        sb.append("null");
      } else {
        sb.append(this.serviceObject);
      }
      first = false;
    }
    if (isSetSuitableRange()) {
      if (!first) sb.append(", ");
      sb.append("suitableRange:");
      if (this.suitableRange == null) {
        sb.append("null");
      } else {
        sb.append(this.suitableRange);
      }
      first = false;
    }
    if (isSetItems()) {
      if (!first) sb.append(", ");
      sb.append("items:");
      if (this.items == null) {
        sb.append("null");
      } else {
        sb.append(this.items);
      }
      first = false;
    }
    if (isSetDepartmentId()) {
      if (!first) sb.append(", ");
      sb.append("departmentId:");
      sb.append(this.departmentId);
      first = false;
    }
    if (isSetCreateTime()) {
      if (!first) sb.append(", ");
      sb.append("createTime:");
      sb.append(this.createTime);
      first = false;
    }
    if (isSetRemark()) {
      if (!first) sb.append(", ");
      sb.append("remark:");
      if (this.remark == null) {
        sb.append("null");
      } else {
        sb.append(this.remark);
      }
      first = false;
    }
    if (isSetDocumentCategory()) {
      if (!first) sb.append(", ");
      sb.append("documentCategory:");
      if (this.documentCategory == null) {
        sb.append("null");
      } else {
        sb.append(this.documentCategory);
      }
      first = false;
    }
    if (isSetCreatorId()) {
      if (!first) sb.append(", ");
      sb.append("creatorId:");
      sb.append(this.creatorId);
      first = false;
    }
    if (isSetCatalog()) {
      if (!first) sb.append(", ");
      sb.append("catalog:");
      if (this.catalog == null) {
        sb.append("null");
      } else {
        sb.append(this.catalog);
      }
      first = false;
    }
    if (isSetValid()) {
      if (!first) sb.append(", ");
      sb.append("valid:");
      sb.append(this.valid);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PrescriptionGroupStandardSchemeFactory implements SchemeFactory {
    public PrescriptionGroupStandardScheme getScheme() {
      return new PrescriptionGroupStandardScheme();
    }
  }

  private static class PrescriptionGroupStandardScheme extends StandardScheme<PrescriptionGroup> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PrescriptionGroup struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.code = iprot.readString();
              struct.setCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SERVICE_OBJECT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.serviceObject = top.itcat.rpc.service.model.ServiceObject.findByValue(iprot.readI32());
              struct.setServiceObjectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SUITABLE_RANGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.suitableRange = top.itcat.rpc.service.model.SuitableRangeEnum.findByValue(iprot.readI32());
              struct.setSuitableRangeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ITEMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.items = new ArrayList<PrescriptionItemTemplate>(_list16.size);
                PrescriptionItemTemplate _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = new PrescriptionItemTemplate();
                  _elem17.read(iprot);
                  struct.items.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setItemsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DEPARTMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.departmentId = iprot.readI64();
              struct.setDepartmentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTime = iprot.readI64();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DOCUMENT_CATEGORY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.documentCategory = top.itcat.rpc.service.model.DocumentCategory.findByValue(iprot.readI32());
              struct.setDocumentCategoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CREATOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.creatorId = iprot.readI64();
              struct.setCreatorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CATALOG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.catalog = top.itcat.rpc.service.model.PrescriptionGroupCatalogEnum.findByValue(iprot.readI32());
              struct.setCatalogIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 255: // VALID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.valid = iprot.readI32();
              struct.setValidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PrescriptionGroup struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.code != null) {
        if (struct.isSetCode()) {
          oprot.writeFieldBegin(CODE_FIELD_DESC);
          oprot.writeString(struct.code);
          oprot.writeFieldEnd();
        }
      }
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.serviceObject != null) {
        if (struct.isSetServiceObject()) {
          oprot.writeFieldBegin(SERVICE_OBJECT_FIELD_DESC);
          oprot.writeI32(struct.serviceObject.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.suitableRange != null) {
        if (struct.isSetSuitableRange()) {
          oprot.writeFieldBegin(SUITABLE_RANGE_FIELD_DESC);
          oprot.writeI32(struct.suitableRange.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.items != null) {
        if (struct.isSetItems()) {
          oprot.writeFieldBegin(ITEMS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.items.size()));
            for (PrescriptionItemTemplate _iter19 : struct.items)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDepartmentId()) {
        oprot.writeFieldBegin(DEPARTMENT_ID_FIELD_DESC);
        oprot.writeI64(struct.departmentId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCreateTime()) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeI64(struct.createTime);
        oprot.writeFieldEnd();
      }
      if (struct.remark != null) {
        if (struct.isSetRemark()) {
          oprot.writeFieldBegin(REMARK_FIELD_DESC);
          oprot.writeString(struct.remark);
          oprot.writeFieldEnd();
        }
      }
      if (struct.documentCategory != null) {
        if (struct.isSetDocumentCategory()) {
          oprot.writeFieldBegin(DOCUMENT_CATEGORY_FIELD_DESC);
          oprot.writeI32(struct.documentCategory.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCreatorId()) {
        oprot.writeFieldBegin(CREATOR_ID_FIELD_DESC);
        oprot.writeI64(struct.creatorId);
        oprot.writeFieldEnd();
      }
      if (struct.catalog != null) {
        if (struct.isSetCatalog()) {
          oprot.writeFieldBegin(CATALOG_FIELD_DESC);
          oprot.writeI32(struct.catalog.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetValid()) {
        oprot.writeFieldBegin(VALID_FIELD_DESC);
        oprot.writeI32(struct.valid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PrescriptionGroupTupleSchemeFactory implements SchemeFactory {
    public PrescriptionGroupTupleScheme getScheme() {
      return new PrescriptionGroupTupleScheme();
    }
  }

  private static class PrescriptionGroupTupleScheme extends TupleScheme<PrescriptionGroup> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PrescriptionGroup struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetCode()) {
        optionals.set(1);
      }
      if (struct.isSetName()) {
        optionals.set(2);
      }
      if (struct.isSetServiceObject()) {
        optionals.set(3);
      }
      if (struct.isSetSuitableRange()) {
        optionals.set(4);
      }
      if (struct.isSetItems()) {
        optionals.set(5);
      }
      if (struct.isSetDepartmentId()) {
        optionals.set(6);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(7);
      }
      if (struct.isSetRemark()) {
        optionals.set(8);
      }
      if (struct.isSetDocumentCategory()) {
        optionals.set(9);
      }
      if (struct.isSetCreatorId()) {
        optionals.set(10);
      }
      if (struct.isSetCatalog()) {
        optionals.set(11);
      }
      if (struct.isSetValid()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetCode()) {
        oprot.writeString(struct.code);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetServiceObject()) {
        oprot.writeI32(struct.serviceObject.getValue());
      }
      if (struct.isSetSuitableRange()) {
        oprot.writeI32(struct.suitableRange.getValue());
      }
      if (struct.isSetItems()) {
        {
          oprot.writeI32(struct.items.size());
          for (PrescriptionItemTemplate _iter20 : struct.items)
          {
            _iter20.write(oprot);
          }
        }
      }
      if (struct.isSetDepartmentId()) {
        oprot.writeI64(struct.departmentId);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI64(struct.createTime);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetDocumentCategory()) {
        oprot.writeI32(struct.documentCategory.getValue());
      }
      if (struct.isSetCreatorId()) {
        oprot.writeI64(struct.creatorId);
      }
      if (struct.isSetCatalog()) {
        oprot.writeI32(struct.catalog.getValue());
      }
      if (struct.isSetValid()) {
        oprot.writeI32(struct.valid);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PrescriptionGroup struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.code = iprot.readString();
        struct.setCodeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.serviceObject = top.itcat.rpc.service.model.ServiceObject.findByValue(iprot.readI32());
        struct.setServiceObjectIsSet(true);
      }
      if (incoming.get(4)) {
        struct.suitableRange = top.itcat.rpc.service.model.SuitableRangeEnum.findByValue(iprot.readI32());
        struct.setSuitableRangeIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.items = new ArrayList<PrescriptionItemTemplate>(_list21.size);
          PrescriptionItemTemplate _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = new PrescriptionItemTemplate();
            _elem22.read(iprot);
            struct.items.add(_elem22);
          }
        }
        struct.setItemsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.departmentId = iprot.readI64();
        struct.setDepartmentIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.createTime = iprot.readI64();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(9)) {
        struct.documentCategory = top.itcat.rpc.service.model.DocumentCategory.findByValue(iprot.readI32());
        struct.setDocumentCategoryIsSet(true);
      }
      if (incoming.get(10)) {
        struct.creatorId = iprot.readI64();
        struct.setCreatorIdIsSet(true);
      }
      if (incoming.get(11)) {
        struct.catalog = top.itcat.rpc.service.model.PrescriptionGroupCatalogEnum.findByValue(iprot.readI32());
        struct.setCatalogIsSet(true);
      }
      if (incoming.get(12)) {
        struct.valid = iprot.readI32();
        struct.setValidIsSet(true);
      }
    }
  }

}

