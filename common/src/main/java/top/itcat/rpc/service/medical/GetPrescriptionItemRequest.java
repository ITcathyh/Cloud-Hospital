/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package top.itcat.rpc.service.medical;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2019-7-3")
public class GetPrescriptionItemRequest implements org.apache.thrift.TBase<GetPrescriptionItemRequest, GetPrescriptionItemRequest._Fields>, java.io.Serializable, Cloneable, Comparable<GetPrescriptionItemRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetPrescriptionItemRequest");

  private static final org.apache.thrift.protocol.TField CATALOG_ENUM_FIELD_DESC = new org.apache.thrift.protocol.TField("catalogEnum", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField CHARGE_ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("chargeItemId", org.apache.thrift.protocol.TType.I64, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GetPrescriptionItemRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GetPrescriptionItemRequestTupleSchemeFactory());
  }

  /**
   * 
   * @see top.itcat.rpc.service.model.CatalogEnum
   */
  public top.itcat.rpc.service.model.CatalogEnum catalogEnum; // optional
  public long chargeItemId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see top.itcat.rpc.service.model.CatalogEnum
     */
    CATALOG_ENUM((short)2, "catalogEnum"),
    CHARGE_ITEM_ID((short)3, "chargeItemId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 2: // CATALOG_ENUM
          return CATALOG_ENUM;
        case 3: // CHARGE_ITEM_ID
          return CHARGE_ITEM_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CHARGEITEMID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.CATALOG_ENUM,_Fields.CHARGE_ITEM_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CATALOG_ENUM, new org.apache.thrift.meta_data.FieldMetaData("catalogEnum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, top.itcat.rpc.service.model.CatalogEnum.class)));
    tmpMap.put(_Fields.CHARGE_ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("chargeItemId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetPrescriptionItemRequest.class, metaDataMap);
  }

  public GetPrescriptionItemRequest() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GetPrescriptionItemRequest(GetPrescriptionItemRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCatalogEnum()) {
      this.catalogEnum = other.catalogEnum;
    }
    this.chargeItemId = other.chargeItemId;
  }

  public GetPrescriptionItemRequest deepCopy() {
    return new GetPrescriptionItemRequest(this);
  }

  @Override
  public void clear() {
    this.catalogEnum = null;
    setChargeItemIdIsSet(false);
    this.chargeItemId = 0;
  }

  /**
   * 
   * @see top.itcat.rpc.service.model.CatalogEnum
   */
  public top.itcat.rpc.service.model.CatalogEnum getCatalogEnum() {
    return this.catalogEnum;
  }

  /**
   * 
   * @see top.itcat.rpc.service.model.CatalogEnum
   */
  public GetPrescriptionItemRequest setCatalogEnum(top.itcat.rpc.service.model.CatalogEnum catalogEnum) {
    this.catalogEnum = catalogEnum;
    return this;
  }

  public void unsetCatalogEnum() {
    this.catalogEnum = null;
  }

  /** Returns true if field catalogEnum is set (has been assigned a value) and false otherwise */
  public boolean isSetCatalogEnum() {
    return this.catalogEnum != null;
  }

  public void setCatalogEnumIsSet(boolean value) {
    if (!value) {
      this.catalogEnum = null;
    }
  }

  public long getChargeItemId() {
    return this.chargeItemId;
  }

  public GetPrescriptionItemRequest setChargeItemId(long chargeItemId) {
    this.chargeItemId = chargeItemId;
    setChargeItemIdIsSet(true);
    return this;
  }

  public void unsetChargeItemId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHARGEITEMID_ISSET_ID);
  }

  /** Returns true if field chargeItemId is set (has been assigned a value) and false otherwise */
  public boolean isSetChargeItemId() {
    return EncodingUtils.testBit(__isset_bitfield, __CHARGEITEMID_ISSET_ID);
  }

  public void setChargeItemIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHARGEITEMID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CATALOG_ENUM:
      if (value == null) {
        unsetCatalogEnum();
      } else {
        setCatalogEnum((top.itcat.rpc.service.model.CatalogEnum)value);
      }
      break;

    case CHARGE_ITEM_ID:
      if (value == null) {
        unsetChargeItemId();
      } else {
        setChargeItemId((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CATALOG_ENUM:
      return getCatalogEnum();

    case CHARGE_ITEM_ID:
      return Long.valueOf(getChargeItemId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CATALOG_ENUM:
      return isSetCatalogEnum();
    case CHARGE_ITEM_ID:
      return isSetChargeItemId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GetPrescriptionItemRequest)
      return this.equals((GetPrescriptionItemRequest)that);
    return false;
  }

  public boolean equals(GetPrescriptionItemRequest that) {
    if (that == null)
      return false;

    boolean this_present_catalogEnum = true && this.isSetCatalogEnum();
    boolean that_present_catalogEnum = true && that.isSetCatalogEnum();
    if (this_present_catalogEnum || that_present_catalogEnum) {
      if (!(this_present_catalogEnum && that_present_catalogEnum))
        return false;
      if (!this.catalogEnum.equals(that.catalogEnum))
        return false;
    }

    boolean this_present_chargeItemId = true && this.isSetChargeItemId();
    boolean that_present_chargeItemId = true && that.isSetChargeItemId();
    if (this_present_chargeItemId || that_present_chargeItemId) {
      if (!(this_present_chargeItemId && that_present_chargeItemId))
        return false;
      if (this.chargeItemId != that.chargeItemId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_catalogEnum = true && (isSetCatalogEnum());
    list.add(present_catalogEnum);
    if (present_catalogEnum)
      list.add(catalogEnum.getValue());

    boolean present_chargeItemId = true && (isSetChargeItemId());
    list.add(present_chargeItemId);
    if (present_chargeItemId)
      list.add(chargeItemId);

    return list.hashCode();
  }

  @Override
  public int compareTo(GetPrescriptionItemRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCatalogEnum()).compareTo(other.isSetCatalogEnum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCatalogEnum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.catalogEnum, other.catalogEnum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChargeItemId()).compareTo(other.isSetChargeItemId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChargeItemId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chargeItemId, other.chargeItemId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GetPrescriptionItemRequest(");
    boolean first = true;

    if (isSetCatalogEnum()) {
      sb.append("catalogEnum:");
      if (this.catalogEnum == null) {
        sb.append("null");
      } else {
        sb.append(this.catalogEnum);
      }
      first = false;
    }
    if (isSetChargeItemId()) {
      if (!first) sb.append(", ");
      sb.append("chargeItemId:");
      sb.append(this.chargeItemId);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GetPrescriptionItemRequestStandardSchemeFactory implements SchemeFactory {
    public GetPrescriptionItemRequestStandardScheme getScheme() {
      return new GetPrescriptionItemRequestStandardScheme();
    }
  }

  private static class GetPrescriptionItemRequestStandardScheme extends StandardScheme<GetPrescriptionItemRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GetPrescriptionItemRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 2: // CATALOG_ENUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.catalogEnum = top.itcat.rpc.service.model.CatalogEnum.findByValue(iprot.readI32());
              struct.setCatalogEnumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CHARGE_ITEM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.chargeItemId = iprot.readI64();
              struct.setChargeItemIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GetPrescriptionItemRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.catalogEnum != null) {
        if (struct.isSetCatalogEnum()) {
          oprot.writeFieldBegin(CATALOG_ENUM_FIELD_DESC);
          oprot.writeI32(struct.catalogEnum.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetChargeItemId()) {
        oprot.writeFieldBegin(CHARGE_ITEM_ID_FIELD_DESC);
        oprot.writeI64(struct.chargeItemId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GetPrescriptionItemRequestTupleSchemeFactory implements SchemeFactory {
    public GetPrescriptionItemRequestTupleScheme getScheme() {
      return new GetPrescriptionItemRequestTupleScheme();
    }
  }

  private static class GetPrescriptionItemRequestTupleScheme extends TupleScheme<GetPrescriptionItemRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GetPrescriptionItemRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCatalogEnum()) {
        optionals.set(0);
      }
      if (struct.isSetChargeItemId()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetCatalogEnum()) {
        oprot.writeI32(struct.catalogEnum.getValue());
      }
      if (struct.isSetChargeItemId()) {
        oprot.writeI64(struct.chargeItemId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GetPrescriptionItemRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.catalogEnum = top.itcat.rpc.service.model.CatalogEnum.findByValue(iprot.readI32());
        struct.setCatalogEnumIsSet(true);
      }
      if (incoming.get(1)) {
        struct.chargeItemId = iprot.readI64();
        struct.setChargeItemIdIsSet(true);
      }
    }
  }

}

