/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package top.itcat.rpc.service.user;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2019-7-3")
public class GetUserIdsResponse implements org.apache.thrift.TBase<GetUserIdsResponse, GetUserIdsResponse._Fields>, java.io.Serializable, Cloneable, Comparable<GetUserIdsResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetUserIdsResponse");

  private static final org.apache.thrift.protocol.TField IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ids", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField BASE_RESP_FIELD_DESC = new org.apache.thrift.protocol.TField("BaseResp", org.apache.thrift.protocol.TType.STRUCT, (short)255);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GetUserIdsResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GetUserIdsResponseTupleSchemeFactory());
  }

  public Map<top.itcat.rpc.service.model.RoleEnum,List<Long>> ids; // optional
  public top.itcat.rpc.base.BaseResp BaseResp; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    IDS((short)1, "ids"),
    BASE_RESP((short)255, "BaseResp");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IDS
          return IDS;
        case 255: // BASE_RESP
          return BASE_RESP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.IDS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IDS, new org.apache.thrift.meta_data.FieldMetaData("ids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, top.itcat.rpc.service.model.RoleEnum.class), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)))));
    tmpMap.put(_Fields.BASE_RESP, new org.apache.thrift.meta_data.FieldMetaData("BaseResp", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, top.itcat.rpc.base.BaseResp.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetUserIdsResponse.class, metaDataMap);
  }

  public GetUserIdsResponse() {
  }

  public GetUserIdsResponse(
    top.itcat.rpc.base.BaseResp BaseResp)
  {
    this();
    this.BaseResp = BaseResp;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GetUserIdsResponse(GetUserIdsResponse other) {
    if (other.isSetIds()) {
      Map<top.itcat.rpc.service.model.RoleEnum,List<Long>> __this__ids = new HashMap<top.itcat.rpc.service.model.RoleEnum,List<Long>>(other.ids.size());
      for (Map.Entry<top.itcat.rpc.service.model.RoleEnum, List<Long>> other_element : other.ids.entrySet()) {

        top.itcat.rpc.service.model.RoleEnum other_element_key = other_element.getKey();
        List<Long> other_element_value = other_element.getValue();

        top.itcat.rpc.service.model.RoleEnum __this__ids_copy_key = other_element_key;

        List<Long> __this__ids_copy_value = new ArrayList<Long>(other_element_value);

        __this__ids.put(__this__ids_copy_key, __this__ids_copy_value);
      }
      this.ids = __this__ids;
    }
    if (other.isSetBaseResp()) {
      this.BaseResp = new top.itcat.rpc.base.BaseResp(other.BaseResp);
    }
  }

  public GetUserIdsResponse deepCopy() {
    return new GetUserIdsResponse(this);
  }

  @Override
  public void clear() {
    this.ids = null;
    this.BaseResp = null;
  }

  public int getIdsSize() {
    return (this.ids == null) ? 0 : this.ids.size();
  }

  public void putToIds(top.itcat.rpc.service.model.RoleEnum key, List<Long> val) {
    if (this.ids == null) {
      this.ids = new HashMap<top.itcat.rpc.service.model.RoleEnum,List<Long>>();
    }
    this.ids.put(key, val);
  }

  public Map<top.itcat.rpc.service.model.RoleEnum,List<Long>> getIds() {
    return this.ids;
  }

  public GetUserIdsResponse setIds(Map<top.itcat.rpc.service.model.RoleEnum,List<Long>> ids) {
    this.ids = ids;
    return this;
  }

  public void unsetIds() {
    this.ids = null;
  }

  /** Returns true if field ids is set (has been assigned a value) and false otherwise */
  public boolean isSetIds() {
    return this.ids != null;
  }

  public void setIdsIsSet(boolean value) {
    if (!value) {
      this.ids = null;
    }
  }

  public top.itcat.rpc.base.BaseResp getBaseResp() {
    return this.BaseResp;
  }

  public GetUserIdsResponse setBaseResp(top.itcat.rpc.base.BaseResp BaseResp) {
    this.BaseResp = BaseResp;
    return this;
  }

  public void unsetBaseResp() {
    this.BaseResp = null;
  }

  /** Returns true if field BaseResp is set (has been assigned a value) and false otherwise */
  public boolean isSetBaseResp() {
    return this.BaseResp != null;
  }

  public void setBaseRespIsSet(boolean value) {
    if (!value) {
      this.BaseResp = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case IDS:
      if (value == null) {
        unsetIds();
      } else {
        setIds((Map<top.itcat.rpc.service.model.RoleEnum,List<Long>>)value);
      }
      break;

    case BASE_RESP:
      if (value == null) {
        unsetBaseResp();
      } else {
        setBaseResp((top.itcat.rpc.base.BaseResp)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case IDS:
      return getIds();

    case BASE_RESP:
      return getBaseResp();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case IDS:
      return isSetIds();
    case BASE_RESP:
      return isSetBaseResp();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GetUserIdsResponse)
      return this.equals((GetUserIdsResponse)that);
    return false;
  }

  public boolean equals(GetUserIdsResponse that) {
    if (that == null)
      return false;

    boolean this_present_ids = true && this.isSetIds();
    boolean that_present_ids = true && that.isSetIds();
    if (this_present_ids || that_present_ids) {
      if (!(this_present_ids && that_present_ids))
        return false;
      if (!this.ids.equals(that.ids))
        return false;
    }

    boolean this_present_BaseResp = true && this.isSetBaseResp();
    boolean that_present_BaseResp = true && that.isSetBaseResp();
    if (this_present_BaseResp || that_present_BaseResp) {
      if (!(this_present_BaseResp && that_present_BaseResp))
        return false;
      if (!this.BaseResp.equals(that.BaseResp))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_ids = true && (isSetIds());
    list.add(present_ids);
    if (present_ids)
      list.add(ids);

    boolean present_BaseResp = true && (isSetBaseResp());
    list.add(present_BaseResp);
    if (present_BaseResp)
      list.add(BaseResp);

    return list.hashCode();
  }

  @Override
  public int compareTo(GetUserIdsResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetIds()).compareTo(other.isSetIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ids, other.ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBaseResp()).compareTo(other.isSetBaseResp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBaseResp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.BaseResp, other.BaseResp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GetUserIdsResponse(");
    boolean first = true;

    if (isSetIds()) {
      sb.append("ids:");
      if (this.ids == null) {
        sb.append("null");
      } else {
        sb.append(this.ids);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("BaseResp:");
    if (this.BaseResp == null) {
      sb.append("null");
    } else {
      sb.append(this.BaseResp);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (BaseResp == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'BaseResp' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (BaseResp != null) {
      BaseResp.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GetUserIdsResponseStandardSchemeFactory implements SchemeFactory {
    public GetUserIdsResponseStandardScheme getScheme() {
      return new GetUserIdsResponseStandardScheme();
    }
  }

  private static class GetUserIdsResponseStandardScheme extends StandardScheme<GetUserIdsResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GetUserIdsResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map224 = iprot.readMapBegin();
                struct.ids = new HashMap<top.itcat.rpc.service.model.RoleEnum,List<Long>>(2*_map224.size);
                top.itcat.rpc.service.model.RoleEnum _key225;
                List<Long> _val226;
                for (int _i227 = 0; _i227 < _map224.size; ++_i227)
                {
                  _key225 = top.itcat.rpc.service.model.RoleEnum.findByValue(iprot.readI32());
                  {
                    org.apache.thrift.protocol.TList _list228 = iprot.readListBegin();
                    _val226 = new ArrayList<Long>(_list228.size);
                    long _elem229;
                    for (int _i230 = 0; _i230 < _list228.size; ++_i230)
                    {
                      _elem229 = iprot.readI64();
                      _val226.add(_elem229);
                    }
                    iprot.readListEnd();
                  }
                  struct.ids.put(_key225, _val226);
                }
                iprot.readMapEnd();
              }
              struct.setIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 255: // BASE_RESP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.BaseResp = new top.itcat.rpc.base.BaseResp();
              struct.BaseResp.read(iprot);
              struct.setBaseRespIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GetUserIdsResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.ids != null) {
        if (struct.isSetIds()) {
          oprot.writeFieldBegin(IDS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST, struct.ids.size()));
            for (Map.Entry<top.itcat.rpc.service.model.RoleEnum, List<Long>> _iter231 : struct.ids.entrySet())
            {
              oprot.writeI32(_iter231.getKey().getValue());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, _iter231.getValue().size()));
                for (long _iter232 : _iter231.getValue())
                {
                  oprot.writeI64(_iter232);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.BaseResp != null) {
        oprot.writeFieldBegin(BASE_RESP_FIELD_DESC);
        struct.BaseResp.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GetUserIdsResponseTupleSchemeFactory implements SchemeFactory {
    public GetUserIdsResponseTupleScheme getScheme() {
      return new GetUserIdsResponseTupleScheme();
    }
  }

  private static class GetUserIdsResponseTupleScheme extends TupleScheme<GetUserIdsResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GetUserIdsResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.BaseResp.write(oprot);
      BitSet optionals = new BitSet();
      if (struct.isSetIds()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetIds()) {
        {
          oprot.writeI32(struct.ids.size());
          for (Map.Entry<top.itcat.rpc.service.model.RoleEnum, List<Long>> _iter233 : struct.ids.entrySet())
          {
            oprot.writeI32(_iter233.getKey().getValue());
            {
              oprot.writeI32(_iter233.getValue().size());
              for (long _iter234 : _iter233.getValue())
              {
                oprot.writeI64(_iter234);
              }
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GetUserIdsResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.BaseResp = new top.itcat.rpc.base.BaseResp();
      struct.BaseResp.read(iprot);
      struct.setBaseRespIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map235 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.ids = new HashMap<top.itcat.rpc.service.model.RoleEnum,List<Long>>(2*_map235.size);
          top.itcat.rpc.service.model.RoleEnum _key236;
          List<Long> _val237;
          for (int _i238 = 0; _i238 < _map235.size; ++_i238)
          {
            _key236 = top.itcat.rpc.service.model.RoleEnum.findByValue(iprot.readI32());
            {
              org.apache.thrift.protocol.TList _list239 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
              _val237 = new ArrayList<Long>(_list239.size);
              long _elem240;
              for (int _i241 = 0; _i241 < _list239.size; ++_i241)
              {
                _elem240 = iprot.readI64();
                _val237.add(_elem240);
              }
            }
            struct.ids.put(_key236, _val237);
          }
        }
        struct.setIdsIsSet(true);
      }
    }
  }

}

