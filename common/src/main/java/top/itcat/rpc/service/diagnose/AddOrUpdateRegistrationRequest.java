/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package top.itcat.rpc.service.diagnose;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2019-7-3")
public class AddOrUpdateRegistrationRequest implements org.apache.thrift.TBase<AddOrUpdateRegistrationRequest, AddOrUpdateRegistrationRequest._Fields>, java.io.Serializable, Cloneable, Comparable<AddOrUpdateRegistrationRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddOrUpdateRegistrationRequest");

  private static final org.apache.thrift.protocol.TField BEAN_FIELD_DESC = new org.apache.thrift.protocol.TField("bean", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField NEED_BOOK_FIELD_DESC = new org.apache.thrift.protocol.TField("needBook", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField OPERATOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("operatorId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField CREATOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("creatorId", org.apache.thrift.protocol.TType.I64, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AddOrUpdateRegistrationRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AddOrUpdateRegistrationRequestTupleSchemeFactory());
  }

  public top.itcat.rpc.service.model.Registration bean; // optional
  public boolean needBook; // optional
  public long operatorId; // optional
  public long creatorId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BEAN((short)1, "bean"),
    NEED_BOOK((short)2, "needBook"),
    OPERATOR_ID((short)3, "operatorId"),
    CREATOR_ID((short)4, "creatorId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BEAN
          return BEAN;
        case 2: // NEED_BOOK
          return NEED_BOOK;
        case 3: // OPERATOR_ID
          return OPERATOR_ID;
        case 4: // CREATOR_ID
          return CREATOR_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NEEDBOOK_ISSET_ID = 0;
  private static final int __OPERATORID_ISSET_ID = 1;
  private static final int __CREATORID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.BEAN,_Fields.NEED_BOOK,_Fields.OPERATOR_ID,_Fields.CREATOR_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BEAN, new org.apache.thrift.meta_data.FieldMetaData("bean", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, top.itcat.rpc.service.model.Registration.class)));
    tmpMap.put(_Fields.NEED_BOOK, new org.apache.thrift.meta_data.FieldMetaData("needBook", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.OPERATOR_ID, new org.apache.thrift.meta_data.FieldMetaData("operatorId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATOR_ID, new org.apache.thrift.meta_data.FieldMetaData("creatorId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddOrUpdateRegistrationRequest.class, metaDataMap);
  }

  public AddOrUpdateRegistrationRequest() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AddOrUpdateRegistrationRequest(AddOrUpdateRegistrationRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetBean()) {
      this.bean = new top.itcat.rpc.service.model.Registration(other.bean);
    }
    this.needBook = other.needBook;
    this.operatorId = other.operatorId;
    this.creatorId = other.creatorId;
  }

  public AddOrUpdateRegistrationRequest deepCopy() {
    return new AddOrUpdateRegistrationRequest(this);
  }

  @Override
  public void clear() {
    this.bean = null;
    setNeedBookIsSet(false);
    this.needBook = false;
    setOperatorIdIsSet(false);
    this.operatorId = 0;
    setCreatorIdIsSet(false);
    this.creatorId = 0;
  }

  public top.itcat.rpc.service.model.Registration getBean() {
    return this.bean;
  }

  public AddOrUpdateRegistrationRequest setBean(top.itcat.rpc.service.model.Registration bean) {
    this.bean = bean;
    return this;
  }

  public void unsetBean() {
    this.bean = null;
  }

  /** Returns true if field bean is set (has been assigned a value) and false otherwise */
  public boolean isSetBean() {
    return this.bean != null;
  }

  public void setBeanIsSet(boolean value) {
    if (!value) {
      this.bean = null;
    }
  }

  public boolean isNeedBook() {
    return this.needBook;
  }

  public AddOrUpdateRegistrationRequest setNeedBook(boolean needBook) {
    this.needBook = needBook;
    setNeedBookIsSet(true);
    return this;
  }

  public void unsetNeedBook() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEEDBOOK_ISSET_ID);
  }

  /** Returns true if field needBook is set (has been assigned a value) and false otherwise */
  public boolean isSetNeedBook() {
    return EncodingUtils.testBit(__isset_bitfield, __NEEDBOOK_ISSET_ID);
  }

  public void setNeedBookIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEEDBOOK_ISSET_ID, value);
  }

  public long getOperatorId() {
    return this.operatorId;
  }

  public AddOrUpdateRegistrationRequest setOperatorId(long operatorId) {
    this.operatorId = operatorId;
    setOperatorIdIsSet(true);
    return this;
  }

  public void unsetOperatorId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPERATORID_ISSET_ID);
  }

  /** Returns true if field operatorId is set (has been assigned a value) and false otherwise */
  public boolean isSetOperatorId() {
    return EncodingUtils.testBit(__isset_bitfield, __OPERATORID_ISSET_ID);
  }

  public void setOperatorIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPERATORID_ISSET_ID, value);
  }

  public long getCreatorId() {
    return this.creatorId;
  }

  public AddOrUpdateRegistrationRequest setCreatorId(long creatorId) {
    this.creatorId = creatorId;
    setCreatorIdIsSet(true);
    return this;
  }

  public void unsetCreatorId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATORID_ISSET_ID);
  }

  /** Returns true if field creatorId is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatorId() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATORID_ISSET_ID);
  }

  public void setCreatorIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATORID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BEAN:
      if (value == null) {
        unsetBean();
      } else {
        setBean((top.itcat.rpc.service.model.Registration)value);
      }
      break;

    case NEED_BOOK:
      if (value == null) {
        unsetNeedBook();
      } else {
        setNeedBook((Boolean)value);
      }
      break;

    case OPERATOR_ID:
      if (value == null) {
        unsetOperatorId();
      } else {
        setOperatorId((Long)value);
      }
      break;

    case CREATOR_ID:
      if (value == null) {
        unsetCreatorId();
      } else {
        setCreatorId((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BEAN:
      return getBean();

    case NEED_BOOK:
      return Boolean.valueOf(isNeedBook());

    case OPERATOR_ID:
      return Long.valueOf(getOperatorId());

    case CREATOR_ID:
      return Long.valueOf(getCreatorId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BEAN:
      return isSetBean();
    case NEED_BOOK:
      return isSetNeedBook();
    case OPERATOR_ID:
      return isSetOperatorId();
    case CREATOR_ID:
      return isSetCreatorId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AddOrUpdateRegistrationRequest)
      return this.equals((AddOrUpdateRegistrationRequest)that);
    return false;
  }

  public boolean equals(AddOrUpdateRegistrationRequest that) {
    if (that == null)
      return false;

    boolean this_present_bean = true && this.isSetBean();
    boolean that_present_bean = true && that.isSetBean();
    if (this_present_bean || that_present_bean) {
      if (!(this_present_bean && that_present_bean))
        return false;
      if (!this.bean.equals(that.bean))
        return false;
    }

    boolean this_present_needBook = true && this.isSetNeedBook();
    boolean that_present_needBook = true && that.isSetNeedBook();
    if (this_present_needBook || that_present_needBook) {
      if (!(this_present_needBook && that_present_needBook))
        return false;
      if (this.needBook != that.needBook)
        return false;
    }

    boolean this_present_operatorId = true && this.isSetOperatorId();
    boolean that_present_operatorId = true && that.isSetOperatorId();
    if (this_present_operatorId || that_present_operatorId) {
      if (!(this_present_operatorId && that_present_operatorId))
        return false;
      if (this.operatorId != that.operatorId)
        return false;
    }

    boolean this_present_creatorId = true && this.isSetCreatorId();
    boolean that_present_creatorId = true && that.isSetCreatorId();
    if (this_present_creatorId || that_present_creatorId) {
      if (!(this_present_creatorId && that_present_creatorId))
        return false;
      if (this.creatorId != that.creatorId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_bean = true && (isSetBean());
    list.add(present_bean);
    if (present_bean)
      list.add(bean);

    boolean present_needBook = true && (isSetNeedBook());
    list.add(present_needBook);
    if (present_needBook)
      list.add(needBook);

    boolean present_operatorId = true && (isSetOperatorId());
    list.add(present_operatorId);
    if (present_operatorId)
      list.add(operatorId);

    boolean present_creatorId = true && (isSetCreatorId());
    list.add(present_creatorId);
    if (present_creatorId)
      list.add(creatorId);

    return list.hashCode();
  }

  @Override
  public int compareTo(AddOrUpdateRegistrationRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBean()).compareTo(other.isSetBean());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBean()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bean, other.bean);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNeedBook()).compareTo(other.isSetNeedBook());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNeedBook()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.needBook, other.needBook);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperatorId()).compareTo(other.isSetOperatorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperatorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operatorId, other.operatorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreatorId()).compareTo(other.isSetCreatorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creatorId, other.creatorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AddOrUpdateRegistrationRequest(");
    boolean first = true;

    if (isSetBean()) {
      sb.append("bean:");
      if (this.bean == null) {
        sb.append("null");
      } else {
        sb.append(this.bean);
      }
      first = false;
    }
    if (isSetNeedBook()) {
      if (!first) sb.append(", ");
      sb.append("needBook:");
      sb.append(this.needBook);
      first = false;
    }
    if (isSetOperatorId()) {
      if (!first) sb.append(", ");
      sb.append("operatorId:");
      sb.append(this.operatorId);
      first = false;
    }
    if (isSetCreatorId()) {
      if (!first) sb.append(", ");
      sb.append("creatorId:");
      sb.append(this.creatorId);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (bean != null) {
      bean.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AddOrUpdateRegistrationRequestStandardSchemeFactory implements SchemeFactory {
    public AddOrUpdateRegistrationRequestStandardScheme getScheme() {
      return new AddOrUpdateRegistrationRequestStandardScheme();
    }
  }

  private static class AddOrUpdateRegistrationRequestStandardScheme extends StandardScheme<AddOrUpdateRegistrationRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AddOrUpdateRegistrationRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BEAN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.bean = new top.itcat.rpc.service.model.Registration();
              struct.bean.read(iprot);
              struct.setBeanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NEED_BOOK
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.needBook = iprot.readBool();
              struct.setNeedBookIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OPERATOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.operatorId = iprot.readI64();
              struct.setOperatorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CREATOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.creatorId = iprot.readI64();
              struct.setCreatorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AddOrUpdateRegistrationRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.bean != null) {
        if (struct.isSetBean()) {
          oprot.writeFieldBegin(BEAN_FIELD_DESC);
          struct.bean.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetNeedBook()) {
        oprot.writeFieldBegin(NEED_BOOK_FIELD_DESC);
        oprot.writeBool(struct.needBook);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOperatorId()) {
        oprot.writeFieldBegin(OPERATOR_ID_FIELD_DESC);
        oprot.writeI64(struct.operatorId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCreatorId()) {
        oprot.writeFieldBegin(CREATOR_ID_FIELD_DESC);
        oprot.writeI64(struct.creatorId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AddOrUpdateRegistrationRequestTupleSchemeFactory implements SchemeFactory {
    public AddOrUpdateRegistrationRequestTupleScheme getScheme() {
      return new AddOrUpdateRegistrationRequestTupleScheme();
    }
  }

  private static class AddOrUpdateRegistrationRequestTupleScheme extends TupleScheme<AddOrUpdateRegistrationRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AddOrUpdateRegistrationRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBean()) {
        optionals.set(0);
      }
      if (struct.isSetNeedBook()) {
        optionals.set(1);
      }
      if (struct.isSetOperatorId()) {
        optionals.set(2);
      }
      if (struct.isSetCreatorId()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetBean()) {
        struct.bean.write(oprot);
      }
      if (struct.isSetNeedBook()) {
        oprot.writeBool(struct.needBook);
      }
      if (struct.isSetOperatorId()) {
        oprot.writeI64(struct.operatorId);
      }
      if (struct.isSetCreatorId()) {
        oprot.writeI64(struct.creatorId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AddOrUpdateRegistrationRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.bean = new top.itcat.rpc.service.model.Registration();
        struct.bean.read(iprot);
        struct.setBeanIsSet(true);
      }
      if (incoming.get(1)) {
        struct.needBook = iprot.readBool();
        struct.setNeedBookIsSet(true);
      }
      if (incoming.get(2)) {
        struct.operatorId = iprot.readI64();
        struct.setOperatorIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.creatorId = iprot.readI64();
        struct.setCreatorIdIsSet(true);
      }
    }
  }

}

