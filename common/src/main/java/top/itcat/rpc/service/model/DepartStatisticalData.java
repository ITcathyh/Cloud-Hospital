/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package top.itcat.rpc.service.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2019-7-3")
public class DepartStatisticalData implements org.apache.thrift.TBase<DepartStatisticalData, DepartStatisticalData._Fields>, java.io.Serializable, Cloneable, Comparable<DepartStatisticalData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DepartStatisticalData");

  private static final org.apache.thrift.protocol.TField DEPART_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("departId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField CHARGE_DETAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("chargeDetail", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField REGISTRATION_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("registrationCount", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DepartStatisticalDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DepartStatisticalDataTupleSchemeFactory());
  }

  public long departId; // optional
  public Map<Long,Double> chargeDetail; // optional
  public int registrationCount; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DEPART_ID((short)1, "departId"),
    CHARGE_DETAIL((short)2, "chargeDetail"),
    REGISTRATION_COUNT((short)3, "registrationCount");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DEPART_ID
          return DEPART_ID;
        case 2: // CHARGE_DETAIL
          return CHARGE_DETAIL;
        case 3: // REGISTRATION_COUNT
          return REGISTRATION_COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DEPARTID_ISSET_ID = 0;
  private static final int __REGISTRATIONCOUNT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DEPART_ID,_Fields.CHARGE_DETAIL,_Fields.REGISTRATION_COUNT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DEPART_ID, new org.apache.thrift.meta_data.FieldMetaData("departId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CHARGE_DETAIL, new org.apache.thrift.meta_data.FieldMetaData("chargeDetail", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.REGISTRATION_COUNT, new org.apache.thrift.meta_data.FieldMetaData("registrationCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DepartStatisticalData.class, metaDataMap);
  }

  public DepartStatisticalData() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DepartStatisticalData(DepartStatisticalData other) {
    __isset_bitfield = other.__isset_bitfield;
    this.departId = other.departId;
    if (other.isSetChargeDetail()) {
      Map<Long,Double> __this__chargeDetail = new HashMap<Long,Double>(other.chargeDetail);
      this.chargeDetail = __this__chargeDetail;
    }
    this.registrationCount = other.registrationCount;
  }

  public DepartStatisticalData deepCopy() {
    return new DepartStatisticalData(this);
  }

  @Override
  public void clear() {
    setDepartIdIsSet(false);
    this.departId = 0;
    this.chargeDetail = null;
    setRegistrationCountIsSet(false);
    this.registrationCount = 0;
  }

  public long getDepartId() {
    return this.departId;
  }

  public DepartStatisticalData setDepartId(long departId) {
    this.departId = departId;
    setDepartIdIsSet(true);
    return this;
  }

  public void unsetDepartId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEPARTID_ISSET_ID);
  }

  /** Returns true if field departId is set (has been assigned a value) and false otherwise */
  public boolean isSetDepartId() {
    return EncodingUtils.testBit(__isset_bitfield, __DEPARTID_ISSET_ID);
  }

  public void setDepartIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEPARTID_ISSET_ID, value);
  }

  public int getChargeDetailSize() {
    return (this.chargeDetail == null) ? 0 : this.chargeDetail.size();
  }

  public void putToChargeDetail(long key, double val) {
    if (this.chargeDetail == null) {
      this.chargeDetail = new HashMap<Long,Double>();
    }
    this.chargeDetail.put(key, val);
  }

  public Map<Long,Double> getChargeDetail() {
    return this.chargeDetail;
  }

  public DepartStatisticalData setChargeDetail(Map<Long,Double> chargeDetail) {
    this.chargeDetail = chargeDetail;
    return this;
  }

  public void unsetChargeDetail() {
    this.chargeDetail = null;
  }

  /** Returns true if field chargeDetail is set (has been assigned a value) and false otherwise */
  public boolean isSetChargeDetail() {
    return this.chargeDetail != null;
  }

  public void setChargeDetailIsSet(boolean value) {
    if (!value) {
      this.chargeDetail = null;
    }
  }

  public int getRegistrationCount() {
    return this.registrationCount;
  }

  public DepartStatisticalData setRegistrationCount(int registrationCount) {
    this.registrationCount = registrationCount;
    setRegistrationCountIsSet(true);
    return this;
  }

  public void unsetRegistrationCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REGISTRATIONCOUNT_ISSET_ID);
  }

  /** Returns true if field registrationCount is set (has been assigned a value) and false otherwise */
  public boolean isSetRegistrationCount() {
    return EncodingUtils.testBit(__isset_bitfield, __REGISTRATIONCOUNT_ISSET_ID);
  }

  public void setRegistrationCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REGISTRATIONCOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DEPART_ID:
      if (value == null) {
        unsetDepartId();
      } else {
        setDepartId((Long)value);
      }
      break;

    case CHARGE_DETAIL:
      if (value == null) {
        unsetChargeDetail();
      } else {
        setChargeDetail((Map<Long,Double>)value);
      }
      break;

    case REGISTRATION_COUNT:
      if (value == null) {
        unsetRegistrationCount();
      } else {
        setRegistrationCount((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DEPART_ID:
      return Long.valueOf(getDepartId());

    case CHARGE_DETAIL:
      return getChargeDetail();

    case REGISTRATION_COUNT:
      return Integer.valueOf(getRegistrationCount());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DEPART_ID:
      return isSetDepartId();
    case CHARGE_DETAIL:
      return isSetChargeDetail();
    case REGISTRATION_COUNT:
      return isSetRegistrationCount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DepartStatisticalData)
      return this.equals((DepartStatisticalData)that);
    return false;
  }

  public boolean equals(DepartStatisticalData that) {
    if (that == null)
      return false;

    boolean this_present_departId = true && this.isSetDepartId();
    boolean that_present_departId = true && that.isSetDepartId();
    if (this_present_departId || that_present_departId) {
      if (!(this_present_departId && that_present_departId))
        return false;
      if (this.departId != that.departId)
        return false;
    }

    boolean this_present_chargeDetail = true && this.isSetChargeDetail();
    boolean that_present_chargeDetail = true && that.isSetChargeDetail();
    if (this_present_chargeDetail || that_present_chargeDetail) {
      if (!(this_present_chargeDetail && that_present_chargeDetail))
        return false;
      if (!this.chargeDetail.equals(that.chargeDetail))
        return false;
    }

    boolean this_present_registrationCount = true && this.isSetRegistrationCount();
    boolean that_present_registrationCount = true && that.isSetRegistrationCount();
    if (this_present_registrationCount || that_present_registrationCount) {
      if (!(this_present_registrationCount && that_present_registrationCount))
        return false;
      if (this.registrationCount != that.registrationCount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_departId = true && (isSetDepartId());
    list.add(present_departId);
    if (present_departId)
      list.add(departId);

    boolean present_chargeDetail = true && (isSetChargeDetail());
    list.add(present_chargeDetail);
    if (present_chargeDetail)
      list.add(chargeDetail);

    boolean present_registrationCount = true && (isSetRegistrationCount());
    list.add(present_registrationCount);
    if (present_registrationCount)
      list.add(registrationCount);

    return list.hashCode();
  }

  @Override
  public int compareTo(DepartStatisticalData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDepartId()).compareTo(other.isSetDepartId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepartId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.departId, other.departId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChargeDetail()).compareTo(other.isSetChargeDetail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChargeDetail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chargeDetail, other.chargeDetail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegistrationCount()).compareTo(other.isSetRegistrationCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegistrationCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.registrationCount, other.registrationCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DepartStatisticalData(");
    boolean first = true;

    if (isSetDepartId()) {
      sb.append("departId:");
      sb.append(this.departId);
      first = false;
    }
    if (isSetChargeDetail()) {
      if (!first) sb.append(", ");
      sb.append("chargeDetail:");
      if (this.chargeDetail == null) {
        sb.append("null");
      } else {
        sb.append(this.chargeDetail);
      }
      first = false;
    }
    if (isSetRegistrationCount()) {
      if (!first) sb.append(", ");
      sb.append("registrationCount:");
      sb.append(this.registrationCount);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DepartStatisticalDataStandardSchemeFactory implements SchemeFactory {
    public DepartStatisticalDataStandardScheme getScheme() {
      return new DepartStatisticalDataStandardScheme();
    }
  }

  private static class DepartStatisticalDataStandardScheme extends StandardScheme<DepartStatisticalData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DepartStatisticalData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DEPART_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.departId = iprot.readI64();
              struct.setDepartIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CHARGE_DETAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.chargeDetail = new HashMap<Long,Double>(2*_map0.size);
                long _key1;
                double _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readI64();
                  _val2 = iprot.readDouble();
                  struct.chargeDetail.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setChargeDetailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REGISTRATION_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.registrationCount = iprot.readI32();
              struct.setRegistrationCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DepartStatisticalData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetDepartId()) {
        oprot.writeFieldBegin(DEPART_ID_FIELD_DESC);
        oprot.writeI64(struct.departId);
        oprot.writeFieldEnd();
      }
      if (struct.chargeDetail != null) {
        if (struct.isSetChargeDetail()) {
          oprot.writeFieldBegin(CHARGE_DETAIL_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.DOUBLE, struct.chargeDetail.size()));
            for (Map.Entry<Long, Double> _iter4 : struct.chargeDetail.entrySet())
            {
              oprot.writeI64(_iter4.getKey());
              oprot.writeDouble(_iter4.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRegistrationCount()) {
        oprot.writeFieldBegin(REGISTRATION_COUNT_FIELD_DESC);
        oprot.writeI32(struct.registrationCount);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DepartStatisticalDataTupleSchemeFactory implements SchemeFactory {
    public DepartStatisticalDataTupleScheme getScheme() {
      return new DepartStatisticalDataTupleScheme();
    }
  }

  private static class DepartStatisticalDataTupleScheme extends TupleScheme<DepartStatisticalData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DepartStatisticalData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDepartId()) {
        optionals.set(0);
      }
      if (struct.isSetChargeDetail()) {
        optionals.set(1);
      }
      if (struct.isSetRegistrationCount()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetDepartId()) {
        oprot.writeI64(struct.departId);
      }
      if (struct.isSetChargeDetail()) {
        {
          oprot.writeI32(struct.chargeDetail.size());
          for (Map.Entry<Long, Double> _iter5 : struct.chargeDetail.entrySet())
          {
            oprot.writeI64(_iter5.getKey());
            oprot.writeDouble(_iter5.getValue());
          }
        }
      }
      if (struct.isSetRegistrationCount()) {
        oprot.writeI32(struct.registrationCount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DepartStatisticalData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.departId = iprot.readI64();
        struct.setDepartIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.chargeDetail = new HashMap<Long,Double>(2*_map6.size);
          long _key7;
          double _val8;
          for (int _i9 = 0; _i9 < _map6.size; ++_i9)
          {
            _key7 = iprot.readI64();
            _val8 = iprot.readDouble();
            struct.chargeDetail.put(_key7, _val8);
          }
        }
        struct.setChargeDetailIsSet(true);
      }
      if (incoming.get(2)) {
        struct.registrationCount = iprot.readI32();
        struct.setRegistrationCountIsSet(true);
      }
    }
  }

}

