/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package top.itcat.rpc.service.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2019-7-3")
public class ScheduleRule implements org.apache.thrift.TBase<ScheduleRule, ScheduleRule._Fields>, java.io.Serializable, Cloneable, Comparable<ScheduleRule> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ScheduleRule");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField DOCTOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("doctorId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField DEPARTMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("departmentId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("day", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField NOON_BREAK_FIELD_DESC = new org.apache.thrift.protocol.TField("noonBreak", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField LIMIT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("limitNumber", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField ONLINE_QUOTA_FIELD_DESC = new org.apache.thrift.protocol.TField("onlineQuota", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField OPERATION_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("operationDate", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField REGISTRATION_LEVEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("registrationLevelId", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField EXPIRED_FIELD_DESC = new org.apache.thrift.protocol.TField("expired", org.apache.thrift.protocol.TType.BOOL, (short)10);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField VALID_FIELD_DESC = new org.apache.thrift.protocol.TField("valid", org.apache.thrift.protocol.TType.I32, (short)255);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ScheduleRuleStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ScheduleRuleTupleSchemeFactory());
  }

  public long id; // optional
  public long doctorId; // optional
  public long departmentId; // optional
  /**
   * 
   * @see WorkDayEnum
   */
  public WorkDayEnum day; // optional
  /**
   * 
   * @see WorkTimeEnum
   */
  public WorkTimeEnum noonBreak; // optional
  public int limitNumber; // optional
  public int onlineQuota; // optional
  public int operationDate; // optional
  public long registrationLevelId; // optional
  public boolean expired; // optional
  public long startTime; // optional
  public long endTime; // optional
  public int valid; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    DOCTOR_ID((short)2, "doctorId"),
    DEPARTMENT_ID((short)3, "departmentId"),
    /**
     * 
     * @see WorkDayEnum
     */
    DAY((short)4, "day"),
    /**
     * 
     * @see WorkTimeEnum
     */
    NOON_BREAK((short)5, "noonBreak"),
    LIMIT_NUMBER((short)6, "limitNumber"),
    ONLINE_QUOTA((short)7, "onlineQuota"),
    OPERATION_DATE((short)8, "operationDate"),
    REGISTRATION_LEVEL_ID((short)9, "registrationLevelId"),
    EXPIRED((short)10, "expired"),
    START_TIME((short)11, "startTime"),
    END_TIME((short)12, "endTime"),
    VALID((short)255, "valid");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // DOCTOR_ID
          return DOCTOR_ID;
        case 3: // DEPARTMENT_ID
          return DEPARTMENT_ID;
        case 4: // DAY
          return DAY;
        case 5: // NOON_BREAK
          return NOON_BREAK;
        case 6: // LIMIT_NUMBER
          return LIMIT_NUMBER;
        case 7: // ONLINE_QUOTA
          return ONLINE_QUOTA;
        case 8: // OPERATION_DATE
          return OPERATION_DATE;
        case 9: // REGISTRATION_LEVEL_ID
          return REGISTRATION_LEVEL_ID;
        case 10: // EXPIRED
          return EXPIRED;
        case 11: // START_TIME
          return START_TIME;
        case 12: // END_TIME
          return END_TIME;
        case 255: // VALID
          return VALID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __DOCTORID_ISSET_ID = 1;
  private static final int __DEPARTMENTID_ISSET_ID = 2;
  private static final int __LIMITNUMBER_ISSET_ID = 3;
  private static final int __ONLINEQUOTA_ISSET_ID = 4;
  private static final int __OPERATIONDATE_ISSET_ID = 5;
  private static final int __REGISTRATIONLEVELID_ISSET_ID = 6;
  private static final int __EXPIRED_ISSET_ID = 7;
  private static final int __STARTTIME_ISSET_ID = 8;
  private static final int __ENDTIME_ISSET_ID = 9;
  private static final int __VALID_ISSET_ID = 10;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.DOCTOR_ID,_Fields.DEPARTMENT_ID,_Fields.DAY,_Fields.NOON_BREAK,_Fields.LIMIT_NUMBER,_Fields.ONLINE_QUOTA,_Fields.OPERATION_DATE,_Fields.REGISTRATION_LEVEL_ID,_Fields.EXPIRED,_Fields.START_TIME,_Fields.END_TIME,_Fields.VALID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DOCTOR_ID, new org.apache.thrift.meta_data.FieldMetaData("doctorId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DEPARTMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("departmentId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DAY, new org.apache.thrift.meta_data.FieldMetaData("day", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, WorkDayEnum.class)));
    tmpMap.put(_Fields.NOON_BREAK, new org.apache.thrift.meta_data.FieldMetaData("noonBreak", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, WorkTimeEnum.class)));
    tmpMap.put(_Fields.LIMIT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("limitNumber", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ONLINE_QUOTA, new org.apache.thrift.meta_data.FieldMetaData("onlineQuota", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OPERATION_DATE, new org.apache.thrift.meta_data.FieldMetaData("operationDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REGISTRATION_LEVEL_ID, new org.apache.thrift.meta_data.FieldMetaData("registrationLevelId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EXPIRED, new org.apache.thrift.meta_data.FieldMetaData("expired", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VALID, new org.apache.thrift.meta_data.FieldMetaData("valid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ScheduleRule.class, metaDataMap);
  }

  public ScheduleRule() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ScheduleRule(ScheduleRule other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.doctorId = other.doctorId;
    this.departmentId = other.departmentId;
    if (other.isSetDay()) {
      this.day = other.day;
    }
    if (other.isSetNoonBreak()) {
      this.noonBreak = other.noonBreak;
    }
    this.limitNumber = other.limitNumber;
    this.onlineQuota = other.onlineQuota;
    this.operationDate = other.operationDate;
    this.registrationLevelId = other.registrationLevelId;
    this.expired = other.expired;
    this.startTime = other.startTime;
    this.endTime = other.endTime;
    this.valid = other.valid;
  }

  public ScheduleRule deepCopy() {
    return new ScheduleRule(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setDoctorIdIsSet(false);
    this.doctorId = 0;
    setDepartmentIdIsSet(false);
    this.departmentId = 0;
    this.day = null;
    this.noonBreak = null;
    setLimitNumberIsSet(false);
    this.limitNumber = 0;
    setOnlineQuotaIsSet(false);
    this.onlineQuota = 0;
    setOperationDateIsSet(false);
    this.operationDate = 0;
    setRegistrationLevelIdIsSet(false);
    this.registrationLevelId = 0;
    setExpiredIsSet(false);
    this.expired = false;
    setStartTimeIsSet(false);
    this.startTime = 0;
    setEndTimeIsSet(false);
    this.endTime = 0;
    setValidIsSet(false);
    this.valid = 0;
  }

  public long getId() {
    return this.id;
  }

  public ScheduleRule setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public long getDoctorId() {
    return this.doctorId;
  }

  public ScheduleRule setDoctorId(long doctorId) {
    this.doctorId = doctorId;
    setDoctorIdIsSet(true);
    return this;
  }

  public void unsetDoctorId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DOCTORID_ISSET_ID);
  }

  /** Returns true if field doctorId is set (has been assigned a value) and false otherwise */
  public boolean isSetDoctorId() {
    return EncodingUtils.testBit(__isset_bitfield, __DOCTORID_ISSET_ID);
  }

  public void setDoctorIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DOCTORID_ISSET_ID, value);
  }

  public long getDepartmentId() {
    return this.departmentId;
  }

  public ScheduleRule setDepartmentId(long departmentId) {
    this.departmentId = departmentId;
    setDepartmentIdIsSet(true);
    return this;
  }

  public void unsetDepartmentId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEPARTMENTID_ISSET_ID);
  }

  /** Returns true if field departmentId is set (has been assigned a value) and false otherwise */
  public boolean isSetDepartmentId() {
    return EncodingUtils.testBit(__isset_bitfield, __DEPARTMENTID_ISSET_ID);
  }

  public void setDepartmentIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEPARTMENTID_ISSET_ID, value);
  }

  /**
   * 
   * @see WorkDayEnum
   */
  public WorkDayEnum getDay() {
    return this.day;
  }

  /**
   * 
   * @see WorkDayEnum
   */
  public ScheduleRule setDay(WorkDayEnum day) {
    this.day = day;
    return this;
  }

  public void unsetDay() {
    this.day = null;
  }

  /** Returns true if field day is set (has been assigned a value) and false otherwise */
  public boolean isSetDay() {
    return this.day != null;
  }

  public void setDayIsSet(boolean value) {
    if (!value) {
      this.day = null;
    }
  }

  /**
   * 
   * @see WorkTimeEnum
   */
  public WorkTimeEnum getNoonBreak() {
    return this.noonBreak;
  }

  /**
   * 
   * @see WorkTimeEnum
   */
  public ScheduleRule setNoonBreak(WorkTimeEnum noonBreak) {
    this.noonBreak = noonBreak;
    return this;
  }

  public void unsetNoonBreak() {
    this.noonBreak = null;
  }

  /** Returns true if field noonBreak is set (has been assigned a value) and false otherwise */
  public boolean isSetNoonBreak() {
    return this.noonBreak != null;
  }

  public void setNoonBreakIsSet(boolean value) {
    if (!value) {
      this.noonBreak = null;
    }
  }

  public int getLimitNumber() {
    return this.limitNumber;
  }

  public ScheduleRule setLimitNumber(int limitNumber) {
    this.limitNumber = limitNumber;
    setLimitNumberIsSet(true);
    return this;
  }

  public void unsetLimitNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMITNUMBER_ISSET_ID);
  }

  /** Returns true if field limitNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetLimitNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __LIMITNUMBER_ISSET_ID);
  }

  public void setLimitNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMITNUMBER_ISSET_ID, value);
  }

  public int getOnlineQuota() {
    return this.onlineQuota;
  }

  public ScheduleRule setOnlineQuota(int onlineQuota) {
    this.onlineQuota = onlineQuota;
    setOnlineQuotaIsSet(true);
    return this;
  }

  public void unsetOnlineQuota() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ONLINEQUOTA_ISSET_ID);
  }

  /** Returns true if field onlineQuota is set (has been assigned a value) and false otherwise */
  public boolean isSetOnlineQuota() {
    return EncodingUtils.testBit(__isset_bitfield, __ONLINEQUOTA_ISSET_ID);
  }

  public void setOnlineQuotaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ONLINEQUOTA_ISSET_ID, value);
  }

  public int getOperationDate() {
    return this.operationDate;
  }

  public ScheduleRule setOperationDate(int operationDate) {
    this.operationDate = operationDate;
    setOperationDateIsSet(true);
    return this;
  }

  public void unsetOperationDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPERATIONDATE_ISSET_ID);
  }

  /** Returns true if field operationDate is set (has been assigned a value) and false otherwise */
  public boolean isSetOperationDate() {
    return EncodingUtils.testBit(__isset_bitfield, __OPERATIONDATE_ISSET_ID);
  }

  public void setOperationDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPERATIONDATE_ISSET_ID, value);
  }

  public long getRegistrationLevelId() {
    return this.registrationLevelId;
  }

  public ScheduleRule setRegistrationLevelId(long registrationLevelId) {
    this.registrationLevelId = registrationLevelId;
    setRegistrationLevelIdIsSet(true);
    return this;
  }

  public void unsetRegistrationLevelId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REGISTRATIONLEVELID_ISSET_ID);
  }

  /** Returns true if field registrationLevelId is set (has been assigned a value) and false otherwise */
  public boolean isSetRegistrationLevelId() {
    return EncodingUtils.testBit(__isset_bitfield, __REGISTRATIONLEVELID_ISSET_ID);
  }

  public void setRegistrationLevelIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REGISTRATIONLEVELID_ISSET_ID, value);
  }

  public boolean isExpired() {
    return this.expired;
  }

  public ScheduleRule setExpired(boolean expired) {
    this.expired = expired;
    setExpiredIsSet(true);
    return this;
  }

  public void unsetExpired() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXPIRED_ISSET_ID);
  }

  /** Returns true if field expired is set (has been assigned a value) and false otherwise */
  public boolean isSetExpired() {
    return EncodingUtils.testBit(__isset_bitfield, __EXPIRED_ISSET_ID);
  }

  public void setExpiredIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXPIRED_ISSET_ID, value);
  }

  public long getStartTime() {
    return this.startTime;
  }

  public ScheduleRule setStartTime(long startTime) {
    this.startTime = startTime;
    setStartTimeIsSet(true);
    return this;
  }

  public void unsetStartTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  public void setStartTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
  }

  public long getEndTime() {
    return this.endTime;
  }

  public ScheduleRule setEndTime(long endTime) {
    this.endTime = endTime;
    setEndTimeIsSet(true);
    return this;
  }

  public void unsetEndTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  public void setEndTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
  }

  public int getValid() {
    return this.valid;
  }

  public ScheduleRule setValid(int valid) {
    this.valid = valid;
    setValidIsSet(true);
    return this;
  }

  public void unsetValid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VALID_ISSET_ID);
  }

  /** Returns true if field valid is set (has been assigned a value) and false otherwise */
  public boolean isSetValid() {
    return EncodingUtils.testBit(__isset_bitfield, __VALID_ISSET_ID);
  }

  public void setValidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VALID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case DOCTOR_ID:
      if (value == null) {
        unsetDoctorId();
      } else {
        setDoctorId((Long)value);
      }
      break;

    case DEPARTMENT_ID:
      if (value == null) {
        unsetDepartmentId();
      } else {
        setDepartmentId((Long)value);
      }
      break;

    case DAY:
      if (value == null) {
        unsetDay();
      } else {
        setDay((WorkDayEnum)value);
      }
      break;

    case NOON_BREAK:
      if (value == null) {
        unsetNoonBreak();
      } else {
        setNoonBreak((WorkTimeEnum)value);
      }
      break;

    case LIMIT_NUMBER:
      if (value == null) {
        unsetLimitNumber();
      } else {
        setLimitNumber((Integer)value);
      }
      break;

    case ONLINE_QUOTA:
      if (value == null) {
        unsetOnlineQuota();
      } else {
        setOnlineQuota((Integer)value);
      }
      break;

    case OPERATION_DATE:
      if (value == null) {
        unsetOperationDate();
      } else {
        setOperationDate((Integer)value);
      }
      break;

    case REGISTRATION_LEVEL_ID:
      if (value == null) {
        unsetRegistrationLevelId();
      } else {
        setRegistrationLevelId((Long)value);
      }
      break;

    case EXPIRED:
      if (value == null) {
        unsetExpired();
      } else {
        setExpired((Boolean)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((Long)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((Long)value);
      }
      break;

    case VALID:
      if (value == null) {
        unsetValid();
      } else {
        setValid((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case DOCTOR_ID:
      return Long.valueOf(getDoctorId());

    case DEPARTMENT_ID:
      return Long.valueOf(getDepartmentId());

    case DAY:
      return getDay();

    case NOON_BREAK:
      return getNoonBreak();

    case LIMIT_NUMBER:
      return Integer.valueOf(getLimitNumber());

    case ONLINE_QUOTA:
      return Integer.valueOf(getOnlineQuota());

    case OPERATION_DATE:
      return Integer.valueOf(getOperationDate());

    case REGISTRATION_LEVEL_ID:
      return Long.valueOf(getRegistrationLevelId());

    case EXPIRED:
      return Boolean.valueOf(isExpired());

    case START_TIME:
      return Long.valueOf(getStartTime());

    case END_TIME:
      return Long.valueOf(getEndTime());

    case VALID:
      return Integer.valueOf(getValid());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case DOCTOR_ID:
      return isSetDoctorId();
    case DEPARTMENT_ID:
      return isSetDepartmentId();
    case DAY:
      return isSetDay();
    case NOON_BREAK:
      return isSetNoonBreak();
    case LIMIT_NUMBER:
      return isSetLimitNumber();
    case ONLINE_QUOTA:
      return isSetOnlineQuota();
    case OPERATION_DATE:
      return isSetOperationDate();
    case REGISTRATION_LEVEL_ID:
      return isSetRegistrationLevelId();
    case EXPIRED:
      return isSetExpired();
    case START_TIME:
      return isSetStartTime();
    case END_TIME:
      return isSetEndTime();
    case VALID:
      return isSetValid();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ScheduleRule)
      return this.equals((ScheduleRule)that);
    return false;
  }

  public boolean equals(ScheduleRule that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_doctorId = true && this.isSetDoctorId();
    boolean that_present_doctorId = true && that.isSetDoctorId();
    if (this_present_doctorId || that_present_doctorId) {
      if (!(this_present_doctorId && that_present_doctorId))
        return false;
      if (this.doctorId != that.doctorId)
        return false;
    }

    boolean this_present_departmentId = true && this.isSetDepartmentId();
    boolean that_present_departmentId = true && that.isSetDepartmentId();
    if (this_present_departmentId || that_present_departmentId) {
      if (!(this_present_departmentId && that_present_departmentId))
        return false;
      if (this.departmentId != that.departmentId)
        return false;
    }

    boolean this_present_day = true && this.isSetDay();
    boolean that_present_day = true && that.isSetDay();
    if (this_present_day || that_present_day) {
      if (!(this_present_day && that_present_day))
        return false;
      if (!this.day.equals(that.day))
        return false;
    }

    boolean this_present_noonBreak = true && this.isSetNoonBreak();
    boolean that_present_noonBreak = true && that.isSetNoonBreak();
    if (this_present_noonBreak || that_present_noonBreak) {
      if (!(this_present_noonBreak && that_present_noonBreak))
        return false;
      if (!this.noonBreak.equals(that.noonBreak))
        return false;
    }

    boolean this_present_limitNumber = true && this.isSetLimitNumber();
    boolean that_present_limitNumber = true && that.isSetLimitNumber();
    if (this_present_limitNumber || that_present_limitNumber) {
      if (!(this_present_limitNumber && that_present_limitNumber))
        return false;
      if (this.limitNumber != that.limitNumber)
        return false;
    }

    boolean this_present_onlineQuota = true && this.isSetOnlineQuota();
    boolean that_present_onlineQuota = true && that.isSetOnlineQuota();
    if (this_present_onlineQuota || that_present_onlineQuota) {
      if (!(this_present_onlineQuota && that_present_onlineQuota))
        return false;
      if (this.onlineQuota != that.onlineQuota)
        return false;
    }

    boolean this_present_operationDate = true && this.isSetOperationDate();
    boolean that_present_operationDate = true && that.isSetOperationDate();
    if (this_present_operationDate || that_present_operationDate) {
      if (!(this_present_operationDate && that_present_operationDate))
        return false;
      if (this.operationDate != that.operationDate)
        return false;
    }

    boolean this_present_registrationLevelId = true && this.isSetRegistrationLevelId();
    boolean that_present_registrationLevelId = true && that.isSetRegistrationLevelId();
    if (this_present_registrationLevelId || that_present_registrationLevelId) {
      if (!(this_present_registrationLevelId && that_present_registrationLevelId))
        return false;
      if (this.registrationLevelId != that.registrationLevelId)
        return false;
    }

    boolean this_present_expired = true && this.isSetExpired();
    boolean that_present_expired = true && that.isSetExpired();
    if (this_present_expired || that_present_expired) {
      if (!(this_present_expired && that_present_expired))
        return false;
      if (this.expired != that.expired)
        return false;
    }

    boolean this_present_startTime = true && this.isSetStartTime();
    boolean that_present_startTime = true && that.isSetStartTime();
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (this.startTime != that.startTime)
        return false;
    }

    boolean this_present_endTime = true && this.isSetEndTime();
    boolean that_present_endTime = true && that.isSetEndTime();
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (this.endTime != that.endTime)
        return false;
    }

    boolean this_present_valid = true && this.isSetValid();
    boolean that_present_valid = true && that.isSetValid();
    if (this_present_valid || that_present_valid) {
      if (!(this_present_valid && that_present_valid))
        return false;
      if (this.valid != that.valid)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_doctorId = true && (isSetDoctorId());
    list.add(present_doctorId);
    if (present_doctorId)
      list.add(doctorId);

    boolean present_departmentId = true && (isSetDepartmentId());
    list.add(present_departmentId);
    if (present_departmentId)
      list.add(departmentId);

    boolean present_day = true && (isSetDay());
    list.add(present_day);
    if (present_day)
      list.add(day.getValue());

    boolean present_noonBreak = true && (isSetNoonBreak());
    list.add(present_noonBreak);
    if (present_noonBreak)
      list.add(noonBreak.getValue());

    boolean present_limitNumber = true && (isSetLimitNumber());
    list.add(present_limitNumber);
    if (present_limitNumber)
      list.add(limitNumber);

    boolean present_onlineQuota = true && (isSetOnlineQuota());
    list.add(present_onlineQuota);
    if (present_onlineQuota)
      list.add(onlineQuota);

    boolean present_operationDate = true && (isSetOperationDate());
    list.add(present_operationDate);
    if (present_operationDate)
      list.add(operationDate);

    boolean present_registrationLevelId = true && (isSetRegistrationLevelId());
    list.add(present_registrationLevelId);
    if (present_registrationLevelId)
      list.add(registrationLevelId);

    boolean present_expired = true && (isSetExpired());
    list.add(present_expired);
    if (present_expired)
      list.add(expired);

    boolean present_startTime = true && (isSetStartTime());
    list.add(present_startTime);
    if (present_startTime)
      list.add(startTime);

    boolean present_endTime = true && (isSetEndTime());
    list.add(present_endTime);
    if (present_endTime)
      list.add(endTime);

    boolean present_valid = true && (isSetValid());
    list.add(present_valid);
    if (present_valid)
      list.add(valid);

    return list.hashCode();
  }

  @Override
  public int compareTo(ScheduleRule other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDoctorId()).compareTo(other.isSetDoctorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDoctorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doctorId, other.doctorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDepartmentId()).compareTo(other.isSetDepartmentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepartmentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.departmentId, other.departmentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDay()).compareTo(other.isSetDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.day, other.day);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNoonBreak()).compareTo(other.isSetNoonBreak());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNoonBreak()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noonBreak, other.noonBreak);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLimitNumber()).compareTo(other.isSetLimitNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimitNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limitNumber, other.limitNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOnlineQuota()).compareTo(other.isSetOnlineQuota());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOnlineQuota()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.onlineQuota, other.onlineQuota);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperationDate()).compareTo(other.isSetOperationDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperationDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operationDate, other.operationDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegistrationLevelId()).compareTo(other.isSetRegistrationLevelId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegistrationLevelId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.registrationLevelId, other.registrationLevelId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpired()).compareTo(other.isSetExpired());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpired()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expired, other.expired);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValid()).compareTo(other.isSetValid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.valid, other.valid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ScheduleRule(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetDoctorId()) {
      if (!first) sb.append(", ");
      sb.append("doctorId:");
      sb.append(this.doctorId);
      first = false;
    }
    if (isSetDepartmentId()) {
      if (!first) sb.append(", ");
      sb.append("departmentId:");
      sb.append(this.departmentId);
      first = false;
    }
    if (isSetDay()) {
      if (!first) sb.append(", ");
      sb.append("day:");
      if (this.day == null) {
        sb.append("null");
      } else {
        sb.append(this.day);
      }
      first = false;
    }
    if (isSetNoonBreak()) {
      if (!first) sb.append(", ");
      sb.append("noonBreak:");
      if (this.noonBreak == null) {
        sb.append("null");
      } else {
        sb.append(this.noonBreak);
      }
      first = false;
    }
    if (isSetLimitNumber()) {
      if (!first) sb.append(", ");
      sb.append("limitNumber:");
      sb.append(this.limitNumber);
      first = false;
    }
    if (isSetOnlineQuota()) {
      if (!first) sb.append(", ");
      sb.append("onlineQuota:");
      sb.append(this.onlineQuota);
      first = false;
    }
    if (isSetOperationDate()) {
      if (!first) sb.append(", ");
      sb.append("operationDate:");
      sb.append(this.operationDate);
      first = false;
    }
    if (isSetRegistrationLevelId()) {
      if (!first) sb.append(", ");
      sb.append("registrationLevelId:");
      sb.append(this.registrationLevelId);
      first = false;
    }
    if (isSetExpired()) {
      if (!first) sb.append(", ");
      sb.append("expired:");
      sb.append(this.expired);
      first = false;
    }
    if (isSetStartTime()) {
      if (!first) sb.append(", ");
      sb.append("startTime:");
      sb.append(this.startTime);
      first = false;
    }
    if (isSetEndTime()) {
      if (!first) sb.append(", ");
      sb.append("endTime:");
      sb.append(this.endTime);
      first = false;
    }
    if (isSetValid()) {
      if (!first) sb.append(", ");
      sb.append("valid:");
      sb.append(this.valid);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ScheduleRuleStandardSchemeFactory implements SchemeFactory {
    public ScheduleRuleStandardScheme getScheme() {
      return new ScheduleRuleStandardScheme();
    }
  }

  private static class ScheduleRuleStandardScheme extends StandardScheme<ScheduleRule> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ScheduleRule struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DOCTOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.doctorId = iprot.readI64();
              struct.setDoctorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DEPARTMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.departmentId = iprot.readI64();
              struct.setDepartmentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.day = top.itcat.rpc.service.model.WorkDayEnum.findByValue(iprot.readI32());
              struct.setDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NOON_BREAK
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.noonBreak = top.itcat.rpc.service.model.WorkTimeEnum.findByValue(iprot.readI32());
              struct.setNoonBreakIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LIMIT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.limitNumber = iprot.readI32();
              struct.setLimitNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ONLINE_QUOTA
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.onlineQuota = iprot.readI32();
              struct.setOnlineQuotaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // OPERATION_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.operationDate = iprot.readI32();
              struct.setOperationDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // REGISTRATION_LEVEL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.registrationLevelId = iprot.readI64();
              struct.setRegistrationLevelIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // EXPIRED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.expired = iprot.readBool();
              struct.setExpiredIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.startTime = iprot.readI64();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.endTime = iprot.readI64();
              struct.setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 255: // VALID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.valid = iprot.readI32();
              struct.setValidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ScheduleRule struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDoctorId()) {
        oprot.writeFieldBegin(DOCTOR_ID_FIELD_DESC);
        oprot.writeI64(struct.doctorId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDepartmentId()) {
        oprot.writeFieldBegin(DEPARTMENT_ID_FIELD_DESC);
        oprot.writeI64(struct.departmentId);
        oprot.writeFieldEnd();
      }
      if (struct.day != null) {
        if (struct.isSetDay()) {
          oprot.writeFieldBegin(DAY_FIELD_DESC);
          oprot.writeI32(struct.day.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.noonBreak != null) {
        if (struct.isSetNoonBreak()) {
          oprot.writeFieldBegin(NOON_BREAK_FIELD_DESC);
          oprot.writeI32(struct.noonBreak.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLimitNumber()) {
        oprot.writeFieldBegin(LIMIT_NUMBER_FIELD_DESC);
        oprot.writeI32(struct.limitNumber);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOnlineQuota()) {
        oprot.writeFieldBegin(ONLINE_QUOTA_FIELD_DESC);
        oprot.writeI32(struct.onlineQuota);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOperationDate()) {
        oprot.writeFieldBegin(OPERATION_DATE_FIELD_DESC);
        oprot.writeI32(struct.operationDate);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRegistrationLevelId()) {
        oprot.writeFieldBegin(REGISTRATION_LEVEL_ID_FIELD_DESC);
        oprot.writeI64(struct.registrationLevelId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetExpired()) {
        oprot.writeFieldBegin(EXPIRED_FIELD_DESC);
        oprot.writeBool(struct.expired);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStartTime()) {
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeI64(struct.startTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEndTime()) {
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeI64(struct.endTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetValid()) {
        oprot.writeFieldBegin(VALID_FIELD_DESC);
        oprot.writeI32(struct.valid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ScheduleRuleTupleSchemeFactory implements SchemeFactory {
    public ScheduleRuleTupleScheme getScheme() {
      return new ScheduleRuleTupleScheme();
    }
  }

  private static class ScheduleRuleTupleScheme extends TupleScheme<ScheduleRule> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ScheduleRule struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetDoctorId()) {
        optionals.set(1);
      }
      if (struct.isSetDepartmentId()) {
        optionals.set(2);
      }
      if (struct.isSetDay()) {
        optionals.set(3);
      }
      if (struct.isSetNoonBreak()) {
        optionals.set(4);
      }
      if (struct.isSetLimitNumber()) {
        optionals.set(5);
      }
      if (struct.isSetOnlineQuota()) {
        optionals.set(6);
      }
      if (struct.isSetOperationDate()) {
        optionals.set(7);
      }
      if (struct.isSetRegistrationLevelId()) {
        optionals.set(8);
      }
      if (struct.isSetExpired()) {
        optionals.set(9);
      }
      if (struct.isSetStartTime()) {
        optionals.set(10);
      }
      if (struct.isSetEndTime()) {
        optionals.set(11);
      }
      if (struct.isSetValid()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetDoctorId()) {
        oprot.writeI64(struct.doctorId);
      }
      if (struct.isSetDepartmentId()) {
        oprot.writeI64(struct.departmentId);
      }
      if (struct.isSetDay()) {
        oprot.writeI32(struct.day.getValue());
      }
      if (struct.isSetNoonBreak()) {
        oprot.writeI32(struct.noonBreak.getValue());
      }
      if (struct.isSetLimitNumber()) {
        oprot.writeI32(struct.limitNumber);
      }
      if (struct.isSetOnlineQuota()) {
        oprot.writeI32(struct.onlineQuota);
      }
      if (struct.isSetOperationDate()) {
        oprot.writeI32(struct.operationDate);
      }
      if (struct.isSetRegistrationLevelId()) {
        oprot.writeI64(struct.registrationLevelId);
      }
      if (struct.isSetExpired()) {
        oprot.writeBool(struct.expired);
      }
      if (struct.isSetStartTime()) {
        oprot.writeI64(struct.startTime);
      }
      if (struct.isSetEndTime()) {
        oprot.writeI64(struct.endTime);
      }
      if (struct.isSetValid()) {
        oprot.writeI32(struct.valid);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ScheduleRule struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.doctorId = iprot.readI64();
        struct.setDoctorIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.departmentId = iprot.readI64();
        struct.setDepartmentIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.day = top.itcat.rpc.service.model.WorkDayEnum.findByValue(iprot.readI32());
        struct.setDayIsSet(true);
      }
      if (incoming.get(4)) {
        struct.noonBreak = top.itcat.rpc.service.model.WorkTimeEnum.findByValue(iprot.readI32());
        struct.setNoonBreakIsSet(true);
      }
      if (incoming.get(5)) {
        struct.limitNumber = iprot.readI32();
        struct.setLimitNumberIsSet(true);
      }
      if (incoming.get(6)) {
        struct.onlineQuota = iprot.readI32();
        struct.setOnlineQuotaIsSet(true);
      }
      if (incoming.get(7)) {
        struct.operationDate = iprot.readI32();
        struct.setOperationDateIsSet(true);
      }
      if (incoming.get(8)) {
        struct.registrationLevelId = iprot.readI64();
        struct.setRegistrationLevelIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.expired = iprot.readBool();
        struct.setExpiredIsSet(true);
      }
      if (incoming.get(10)) {
        struct.startTime = iprot.readI64();
        struct.setStartTimeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.endTime = iprot.readI64();
        struct.setEndTimeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.valid = iprot.readI32();
        struct.setValidIsSet(true);
      }
    }
  }

}

